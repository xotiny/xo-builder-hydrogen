{"version":3,"names":["ruleComposer","require","eslint","eslintVersion","ESLint","version","rule","parseInt","builtinRules","Linter","getRules","get","isAccessorFieldName","node","parent","type","key","computed","module","exports","filterReports","problem"],"sources":["../../src/rules/no-undef.cjs"],"sourcesContent":["const ruleComposer = require(\"eslint-rule-composer\");\nconst eslint = require(\"eslint\");\nconst eslintVersion = eslint.ESLint.version;\n\nconst rule = (\n  parseInt(eslintVersion, 10) >= 9\n    ? require(\"eslint/use-at-your-own-risk\").builtinRules\n    : new eslint.Linter().getRules()\n).get(\"no-undef\");\n\n/**\n * Returns whether a node is under a decorator or not.\n * @param  {ASTNode}  node CallExpression node\n * @returns {Boolean} Returns true if the node is under a decorator.\n */\nfunction isAccessorFieldName(node) {\n  return (\n    node.parent.type === \"ClassAccessorProperty\" &&\n    node.parent.key === node &&\n    !node.parent.computed\n  );\n}\n\nmodule.exports = ruleComposer.filterReports(\n  rule,\n  problem => !isAccessorFieldName(problem.node),\n);\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,aAAa,GAAGD,MAAM,CAACE,MAAM,CAACC,OAAO;AAE3C,MAAMC,IAAI,GAAG,CACXC,QAAQ,CAACJ,aAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAC5BF,OAAO,CAAC,6BAA6B,CAAC,CAACO,YAAY,GACnD,IAAIN,MAAM,CAACO,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAClCC,GAAG,CAAC,UAAU,CAAC;AAOjB,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EACjC,OACEA,IAAI,CAACC,MAAM,CAACC,IAAI,KAAK,uBAAuB,IAC5CF,IAAI,CAACC,MAAM,CAACE,GAAG,KAAKH,IAAI,IACxB,CAACA,IAAI,CAACC,MAAM,CAACG,QAAQ;AAEzB;AAEAC,MAAM,CAACC,OAAO,GAAGnB,YAAY,CAACoB,aAAa,CACzCd,IAAI,EACJe,OAAO,IAAI,CAACT,mBAAmB,CAACS,OAAO,CAACR,IAAI,CAC9C,CAAC","ignoreList":[]}