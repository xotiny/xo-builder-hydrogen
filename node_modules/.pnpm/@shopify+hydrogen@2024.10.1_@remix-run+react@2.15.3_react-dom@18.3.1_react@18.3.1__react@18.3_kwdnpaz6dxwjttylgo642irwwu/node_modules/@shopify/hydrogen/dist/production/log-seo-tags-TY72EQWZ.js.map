{"version":3,"sources":["../../src/seo/log-seo-tags.ts"],"names":["Logger","headTags","logSeoTags","headingStyle","titleStyle","tag","key","val","urlKey","fetchImage","image","imageStyle","err","url","buff","arrayBufferToBase64","buffer","binary","bytes","len","index"],"mappings":"AAEe,SAARA,EAAwB,CAAC,SAAAC,CAAQ,EAAsC,CAC5E,OAAAC,EAAWD,CAAQ,EAEZ,IACT,CAEA,IAAME,EAAe,6BACfC,EACJ,4FAEK,SAASF,EAAWD,EAAiC,CAC1D,QAAQ,IAAI,GAAG,EACf,QAAQ,IAAI,kBAAmB,GAAGG,CAAU,EAAE,EAC9C,QAAQ,IAAI,GAAG,EAEfH,EAAS,QAASI,GAAQ,CACxB,GAAIA,EAAI,MAAQ,UAGd,GAFA,QAAQ,IAAI,oBAAgBF,CAAY,EAEpCE,EAAI,SACN,GAAI,CACF,QAAQ,MAAM,KAAK,MAAMA,EAAI,QAAQ,EAAG,CAAC,OAAQ,SAAS,CAAC,CAC7D,MAAQ,CACN,QAAQ,IAAIA,EAAI,QAAQ,CAC1B,MAEG,CAGL,GAFA,QAAQ,IAAI,YAAOA,EAAI,GAAG,IAAKF,CAAY,EAEvCE,EAAI,SACN,GAAI,OAAOA,EAAI,UAAa,SAC1B,QAAQ,IAAI,UAAKA,EAAI,QAAQ,EAAE,MAE/B,IAAI,CACF,OAAO,QAAQ,KAAK,MAAMA,EAAI,QAAQ,CAAC,EAAE,IAAI,CAAC,CAACC,EAAKC,CAAG,IACrD,QAAQ,IAAI,UAAKA,CAAG,EAAE,CACxB,CACF,MAAQ,CACN,QAAQ,IAAIF,EAAI,QAAQ,CAC1B,CAIJ,GAAIA,EAAI,MAAM,WAAa,eAAgB,CACzC,IAAMG,EAASH,EAAI,MAAM,QAEzBI,EAAWD,CAAM,EACd,KAAME,GAAU,CACf,IAAMC,EAAa,0DAA0DD,CAAK,gDAElF,QAAQ,IAAI,+BAA2BP,CAAY,EACnD,QAAQ,IAAI,OAAQQ,CAAU,EAC9B,QAAQ,IAAI,UAAKH,CAAM,EAAE,CAC3B,CAAC,EACA,MAAOI,GAAQ,CACd,QAAQ,MAAMA,CAAG,CACnB,CAAC,CACL,CAEA,OAAO,QAAQP,EAAI,KAAK,EAAE,IAAI,CAAC,CAACC,EAAKC,CAAG,IAAM,CAC5C,QAAQ,IAAI,UAAKD,CAAG,WAAMC,CAAG,EAAE,CACjC,CAAC,CACH,CACA,QAAQ,IAAI,GAAG,CACjB,CAAC,CACH,CAEA,eAAeE,EAAWI,EAAa,CAGrC,IAAMC,EAAO,MADA,MADE,MAAM,MAAMD,CAAG,GACJ,KAAK,GACP,YAAY,EAGpC,MAAO,yBAFcE,EAAoBD,CAAI,CAED,EAC9C,CAEA,SAASC,EAAoBC,EAAqB,CAChD,IAAIC,EAAS,GACPC,EAAQ,IAAI,WAAWF,CAAM,EAC7BG,EAAMD,EAAM,WAElB,QAASE,EAAQ,EAAGA,EAAQD,EAAKC,IAC/BH,GAAU,OAAO,aAAaC,EAAME,CAAK,CAAC,EAG5C,OAAO,KAAKH,CAAM,CACpB","sourcesContent":["import type {CustomHeadTagObject} from './generate-seo-tags';\n\nexport default function Logger({headTags}: {headTags: CustomHeadTagObject[]}) {\n  logSeoTags(headTags);\n\n  return null;\n}\n\nconst headingStyle = 'text-transform: uppercase;';\nconst titleStyle =\n  'text-transform: uppercase; font-weight: bold; text-transform: uppercase;font-weight: bold';\n\nexport function logSeoTags(headTags: CustomHeadTagObject[]) {\n  console.log(' ');\n  console.log('%cSEO Meta Tags', `${titleStyle}`);\n  console.log(' ');\n\n  headTags.forEach((tag) => {\n    if (tag.tag === 'script') {\n      console.log(`%c• JSON LD `, headingStyle);\n\n      if (tag.children) {\n        try {\n          console.table(JSON.parse(tag.children), ['name', 'content']);\n        } catch {\n          console.log(tag.children);\n        }\n      }\n    } else {\n      console.log(`%c• ${tag.tag} `, headingStyle);\n\n      if (tag.children) {\n        if (typeof tag.children === 'string') {\n          console.log(`↳ ${tag.children}`);\n        } else {\n          try {\n            Object.entries(JSON.parse(tag.children)).map(([key, val]) =>\n              console.log(`↳ ${val}`),\n            );\n          } catch {\n            console.log(tag.children);\n          }\n        }\n      }\n\n      if (tag.props.property === 'og:image:url') {\n        const urlKey = tag.props.content as string;\n\n        fetchImage(urlKey)\n          .then((image) => {\n            const imageStyle = `font-size: 400px; padding: 10px; background: white url(${image}) no-repeat center; background-size: contain;`;\n\n            console.log(`%c• Share image preview`, headingStyle);\n            console.log('%c  ', imageStyle);\n            console.log(`↳ ${urlKey}`);\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n      }\n\n      Object.entries(tag.props).map(([key, val]) => {\n        console.log(`↳ ${key} → ${val}`);\n      });\n    }\n    console.log(' ');\n  });\n}\n\nasync function fetchImage(url: string) {\n  const result = await fetch(url);\n  const data = await result.blob();\n  const buff = await data.arrayBuffer();\n  const base64String = arrayBufferToBase64(buff);\n\n  return `data:image/png;base64,${base64String}`;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n\n  for (let index = 0; index < len; index++) {\n    binary += String.fromCharCode(bytes[index]);\n  }\n\n  return btoa(binary);\n}\n"]}