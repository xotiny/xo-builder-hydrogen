import * as _remix_run_server_runtime from '@remix-run/server-runtime';
import { ServerBuild } from '@remix-run/server-runtime';
export { ActionFunction, ActionFunctionArgs, AppLoadContext, Cookie, CookieOptions, CookieParseOptions, CookieSerializeOptions, CookieSignatureOptions, DataFunctionArgs, EntryContext, ErrorResponse, HandleDataRequestFunction, HandleDocumentRequestFunction, HandleErrorFunction, HeadersArgs, HeadersFunction, HtmlLinkDescriptor, JsonFunction, LinkDescriptor, LinksFunction, LoaderFunction, LoaderFunctionArgs, MaxPartSizeExceededError, MemoryUploadHandlerFilterArgs, MemoryUploadHandlerOptions, ServerRuntimeMetaArgs as MetaArgs, ServerRuntimeMetaDescriptor as MetaDescriptor, ServerRuntimeMetaFunction as MetaFunction, PageLinkDescriptor, RequestHandler, SerializeFrom, ServerBuild, ServerEntryModule, Session, SessionData, SessionIdStorageStrategy, SessionStorage, SignFunction, TypedDeferredData, TypedResponse, UnsignFunction, UploadHandler, UploadHandlerPart, createSession, data, defer, isCookie, isSession, json, redirect, redirectDocument } from '@remix-run/server-runtime';

declare const createCookie: _remix_run_server_runtime.CreateCookieFunction;
declare const createCookieSessionStorage: _remix_run_server_runtime.CreateCookieSessionStorageFunction;
declare const createSessionStorage: _remix_run_server_runtime.CreateSessionStorageFunction;
declare const createMemorySessionStorage: _remix_run_server_runtime.CreateMemorySessionStorageFunction;

declare function createRequestHandler<Context = unknown>({ build, mode, poweredByHeader, getLoadContext, }: {
    build: ServerBuild;
    mode?: string;
    poweredByHeader?: boolean;
    getLoadContext?: (request: Request) => Promise<Context> | Context;
}): (request: Request) => Promise<Response>;
type StorefrontHeaders = {
    requestGroupId: string | null;
    buyerIp: string | null;
    cookie: string | null;
    purpose: string | null;
};
declare function getStorefrontHeaders(request: Request): StorefrontHeaders;

export { createCookie, createCookieSessionStorage, createMemorySessionStorage, createRequestHandler, createSessionStorage, getStorefrontHeaders };
