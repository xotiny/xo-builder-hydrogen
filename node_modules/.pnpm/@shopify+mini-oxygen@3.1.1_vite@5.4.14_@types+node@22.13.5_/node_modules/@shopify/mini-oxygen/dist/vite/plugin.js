import path from "node:path";
import {
  setupOxygenMiddleware
} from "./server-middleware.js";
const DEFAULT_SSR_ENTRY = "./server";
function oxygen(pluginOptions = {}) {
  let resolvedConfig;
  let absoluteWorkerEntryFile;
  let apiOptions = {};
  return [
    {
      name: "oxygen:main",
      config(config, env) {
        return {
          appType: "custom",
          resolve: {
            conditions: ["worker", "workerd"]
          },
          ssr: {
            noExternal: true,
            target: "webworker"
          },
          // When building, the CLI will set the `ssr` option to `true`
          // if no --entry flag is passed for the default SSR entry file.
          // Replace it here with a default value.
          ...env.isSsrBuild && config.build?.ssr && {
            build: {
              ssr: config.build?.ssr === true ? (
                // No --entry flag passed by the user, use the
                // option passed to the plugin or the default value
                pluginOptions.entry ?? DEFAULT_SSR_ENTRY
              ) : (
                // --entry flag passed by the user, keep it
                config.build?.ssr
              )
            }
          }
        };
      },
      api: {
        registerPluginOptions(newOptions) {
          apiOptions = {
            ...apiOptions,
            ...newOptions,
            env: { ...apiOptions.env, ...newOptions.env },
            crossBoundarySetup: [
              ...apiOptions.crossBoundarySetup || [],
              ...newOptions.crossBoundarySetup || []
            ]
          };
        }
      },
      configureServer: {
        order: "pre",
        handler: (viteDevServer) => {
          const entry = apiOptions.entry ?? pluginOptions.entry ?? DEFAULT_SSR_ENTRY;
          resolvedConfig = viteDevServer.config;
          absoluteWorkerEntryFile = path.isAbsolute(entry) ? entry : path.resolve(resolvedConfig.root, entry);
          return () => {
            setupOxygenMiddleware(viteDevServer, async () => {
              const remoteEnv = await Promise.resolve(apiOptions.envPromise);
              return {
                entry,
                viteDevServer,
                crossBoundarySetup: apiOptions.crossBoundarySetup,
                env: { ...remoteEnv, ...apiOptions.env, ...pluginOptions.env },
                debug: apiOptions.debug ?? pluginOptions.debug ?? false,
                inspectorPort: apiOptions.inspectorPort ?? pluginOptions.inspectorPort,
                requestHook: apiOptions.requestHook,
                entryPointErrorHandler: apiOptions.entryPointErrorHandler,
                compatibilityDate: apiOptions.compatibilityDate,
                logRequestLine: (
                  // Give priority to the plugin option over the CLI option here,
                  // since the CLI one is just a default, not a user-provided flag.
                  pluginOptions?.logRequestLine ?? apiOptions.logRequestLine
                )
              };
            });
          };
        }
      },
      transform(code, id, options) {
        if (resolvedConfig?.command === "serve" && resolvedConfig?.server?.hmr !== false && options?.ssr && (id === absoluteWorkerEntryFile || id === absoluteWorkerEntryFile + path.extname(id))) {
          return {
            // Accept HMR in server entry module to avoid full-page refresh in the browser.
            // Note: appending code at the end should not break the source map.
            code: code + "\nif (import.meta.hot) import.meta.hot.accept();"
          };
        }
      },
      generateBundle(_, bundle) {
        if (apiOptions.compatibilityDate) {
          if (!/^\d{4}-\d{2}-\d{2}$/.test(apiOptions.compatibilityDate)) {
            throw new Error(
              `Invalid compatibility date "${apiOptions.compatibilityDate}"`
            );
          }
          const oxygenJsonFile = "oxygen.json";
          const oxygenJsonContent = {
            version: 1,
            compatibility_date: apiOptions.compatibilityDate
          };
          bundle[oxygenJsonFile] = {
            type: "asset",
            fileName: oxygenJsonFile,
            name: oxygenJsonFile,
            needsCodeReference: false,
            source: JSON.stringify(oxygenJsonContent, null, 2)
          };
        }
      }
    }
  ];
}
export {
  oxygen
};
