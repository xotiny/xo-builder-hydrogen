import {
  CorePlugin,
  MiniflareCore,
  BuildPlugin,
  BindingsPlugin
} from "@miniflare/core";
import { CachePlugin } from "@miniflare/cache";
import { VMScriptRunner } from "@miniflare/runner-vm";
import { Log, LogLevel } from "@miniflare/shared";
import { QueueBroker } from "@miniflare/queues";
import sourceMapSupport from "source-map-support";
import { createServer } from "./server.js";
import { StorageFactory } from "./storage.js";
import { isO2Verbose } from "../common/debug.js";
const PLUGINS = {
  CorePlugin,
  CachePlugin,
  BuildPlugin,
  BindingsPlugin
};
class MiniOxygen extends MiniflareCore {
  constructor({ sourceMap, ...options }, env) {
    if (sourceMap) {
      sourceMapSupport.install({ emptyCacheBetweenOperations: true });
    }
    const storageFactory = new StorageFactory();
    super(
      PLUGINS,
      {
        log: new Log(isO2Verbose() ? LogLevel.VERBOSE : LogLevel.ERROR),
        storageFactory,
        scriptRunner: new VMScriptRunner(),
        queueBroker: new QueueBroker()
      },
      {
        bindings: env,
        globals: options.globalFetch ? {
          fetch: options.globalFetch
        } : {},
        ...options
      }
    );
  }
  async dispose() {
    return super.dispose();
  }
  createServer(options) {
    return createServer(this, options);
  }
}
export {
  MiniOxygen
};
