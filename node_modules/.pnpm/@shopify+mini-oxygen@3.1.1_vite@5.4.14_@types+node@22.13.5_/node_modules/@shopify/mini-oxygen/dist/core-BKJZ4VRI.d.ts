import * as http from 'http';
import { Request, Response, MiniflareCore, CorePlugin, BuildPlugin, BindingsPlugin, MiniflareCoreOptions, fetch } from '@miniflare/core';
import { CachePlugin } from '@miniflare/cache';
import http$1 from 'node:http';
import { OXYGEN_HEADERS_MAP } from './common/headers.js';

type DispatchFetch = (request: Request) => Promise<Response>;
interface MiniOxygenServerHooks {
    onRequest?: (request: Request, defaultDispatcher: DispatchFetch) => void | Response | Promise<void | Response>;
    onResponse?: (request: Request, response: Response) => void | Promise<void>;
    onResponseError?: (request: Request, error: unknown) => void;
}
type OxygenHeaderParams = keyof typeof OXYGEN_HEADERS_MAP;
interface MiniOxygenServerOptions extends MiniOxygenServerHooks {
    assetsDir?: string;
    autoReload?: boolean;
    publicPath?: string;
    proxyServer?: string;
    oxygenHeaders?: Partial<{
        [key in OxygenHeaderParams]: string;
    }>;
}
declare function createServer(mf: MiniOxygen, { assetsDir, publicPath, autoReload, proxyServer, ...rest }: MiniOxygenServerOptions): http$1.Server<typeof http$1.IncomingMessage, typeof http$1.ServerResponse>;

declare const PLUGINS: {
    CorePlugin: typeof CorePlugin;
    CachePlugin: typeof CachePlugin;
    BuildPlugin: typeof BuildPlugin;
    BindingsPlugin: typeof BindingsPlugin;
};
type MiniOxygenType = typeof PLUGINS;
type MiniOxygenOptions = MiniflareCoreOptions<MiniOxygenType> & {
    sourceMap?: boolean;
    globalFetch?: typeof fetch;
};
declare class MiniOxygen extends MiniflareCore<MiniOxygenType> {
    constructor({ sourceMap, ...options }: MiniOxygenOptions, env: {
        [key: string]: unknown;
    });
    dispose(): Promise<void>;
    createServer(options: MiniOxygenServerOptions): http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
}

export { type DispatchFetch as D, type MiniOxygenServerOptions as M, type OxygenHeaderParams as O, type MiniOxygenServerHooks as a, type MiniOxygenType as b, createServer as c, MiniOxygen as d };
