import { isEmpty } from "../../is-empty";
import { getCssVariableParallax } from '../get-css-variable-parallax';
function orientedName(prop, orient) {
    if (prop === 'padding' || prop === 'margin') {
        return `${prop}-${orient}`;
    }
    if (prop === 'border-width') {
        return `border-${orient}-width`;
    }
    if (prop === 'border-color') {
        return `border-${orient}-color`;
    }
    if (prop === 'border-radius') {
        if (orient === 'top') {
            return 'border-start-start-radius';
        }
        if (orient === 'right') {
            return 'border-start-end-radius';
        }
        if (orient === 'bottom') {
            return 'border-end-end-radius';
        }
        if (orient === 'left') {
            return 'border-end-start-radius';
        }
    }
    return '';
}
function getShortenOrientedWithValue(prop, value) {
    let cssOrientWithValue = '';
    if (value.top &&
        value.top?.value != null &&
        value.left &&
        value.left?.value != null &&
        value.right &&
        value.right?.value != null &&
        value.bottom &&
        value.bottom?.value != null) {
        if (new Set([value.top.value, value.left.value, value.right.value, value.bottom.value]).size === 1 &&
            new Set([value.top.unit, value.left.unit, value.right.unit, value.bottom.unit]).size === 1) {
            cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit ?? 'px'};`;
        }
        else if (value.top.value === value.bottom.value &&
            value.top.unit === value.bottom.unit &&
            value.left.value === value.right.value &&
            value.left.unit === value.right.unit) {
            cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit ?? 'px'};`;
        }
        else if (value.left.value === value.right.value && value.left.unit === value.right.unit) {
            cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit} ${value.bottom.value}${value.bottom.unit ?? 'px'};`;
        }
        else {
            cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit} ${value.bottom.value}${value.bottom.unit} ${value.left.value}${value.left.unit ?? 'px'};`;
        }
    }
    else {
        if (value.top && value.top?.value != null) {
            cssOrientWithValue += `${orientedName(prop, 'top')}: ${value.top.value}${value.top.unit ?? 'px'};`;
        }
        if (value.left && value.left?.value != null) {
            cssOrientWithValue += `${orientedName(prop, 'left')}: ${value.left.value}${value.left.unit ?? 'px'};`;
        }
        if (value.right && value.right?.value != null) {
            cssOrientWithValue += `${orientedName(prop, 'right')}: ${value.right.value}${value.right.unit ?? 'px'};`;
        }
        if (value.bottom && value.bottom?.value != null) {
            cssOrientWithValue += `${orientedName(prop, 'bottom')}: ${value.bottom.value}${value.bottom.unit ?? 'px'};`;
        }
    }
    return cssOrientWithValue;
}
function getShortenOrientedWithoutValue(prop, value) {
    let cssOrientWithValue = '';
    if (value.top && value.left && value.right && value.bottom) {
        if (new Set([value.top, value.left, value.right, value.bottom]).size === 1) {
            cssOrientWithValue = `${prop}: ${value.top};`;
        }
        else if (value.top === value.bottom && value.left === value.right) {
            cssOrientWithValue = `${prop}: ${value.top} ${value.right};`;
        }
        else if (value.left === value.right) {
            cssOrientWithValue = `${prop}: ${value.top} ${value.right} ${value.bottom};`;
        }
        else {
            cssOrientWithValue = `${prop}: ${value.top} ${value.right} ${value.bottom} ${value.left};`;
        }
    }
    else {
        if (value.top) {
            cssOrientWithValue += `${orientedName(prop, 'top')}: ${value.top};`;
        }
        if (value.left) {
            cssOrientWithValue += `${orientedName(prop, 'left')}: ${value.left};`;
        }
        if (value.right) {
            cssOrientWithValue += `${orientedName(prop, 'right')}: ${value.right};`;
        }
        if (value.bottom) {
            cssOrientWithValue += `${orientedName(prop, 'bottom')}: ${value.bottom};`;
        }
    }
    return cssOrientWithValue;
}
export function getBackgroundGradient(value) {
    let points = '';
    if (typeof value === 'object') {
        [...value.points]
            // @ts-ignore
            .sort((a, b) => a.position - b.position)
            // @ts-ignore
            .forEach(point => {
            points += `, ${point.color} ${point.position}%`;
        });
        return `background-image: linear-gradient(${Math.round(value.rotate)}deg${points});`;
    }
    return '';
}
function getShadow(value) {
    let cssShadow = '';
    value?.forEach((shadow, index) => {
        /** Điều kiện shadow hiển thị phải có 2/3 giá trị ( phải có horizontal & vertical ) */
        if (!(!shadow.horizontal || !shadow.vertical || shadow.horizontal.value == null || shadow.vertical.value == null)) {
            cssShadow += `${shadow.horizontal.value}${shadow.horizontal.unit} ${shadow.vertical.value}${shadow.vertical.unit}`;
            if (shadow.blur.value != null) {
                cssShadow += ` ${shadow.blur.value}${shadow.blur.unit}`;
            }
            if (shadow.spread?.value != null) {
                cssShadow += ` ${shadow.spread.value}${shadow.spread.unit}`;
            }
            cssShadow += ` ${shadow.color}${index !== value.length - 1 ? ', ' : ''}`;
        }
    });
    if (cssShadow[cssShadow.length - 1] === ',') {
        cssShadow.replace(/,$/, ';');
    }
    return cssShadow;
}
function getTransform(value, device) {
    let cssTransform = '';
    if (value.translateX?.[device]) {
        cssTransform += `translateX(${value.translateX[device]?.value}${value.translateX[device]?.unit}) `;
    }
    if (value.translateY?.[device]) {
        cssTransform += `translateY(${value.translateY[device]?.value}${value.translateY[device]?.unit}) `;
    }
    if (value.rotate?.[device]) {
        cssTransform += `rotate(${value.rotate[device]?.value}deg) `;
    }
    if (value.scale?.[device]) {
        cssTransform += `scale(${value.scale[device]?.value}) `;
    }
    return cssTransform ? `${cssTransform.trim()}` : cssTransform;
}
function getFieldNotHaveDevice(prop, value, device) {
    if (prop === 'font-family' && value.fontFamily && device === 'desktop') {
        return `font-family: '${value.fontFamily}';`;
    }
    if (prop === 'transition' && value.value && device === 'desktop') {
        return `${prop}: ${value.value}${value.unit};`;
    }
    if (prop === 'backdrop-filter' && value.value && device === 'desktop') {
        return `${prop}: blur(${value.value}${value.unit});`;
    }
    if (prop === 'overflow' && value && device === 'desktop') {
        return `${prop}: ${value};`;
    }
    if (prop === 'transform') {
        const cssTransform = getTransform(value, device);
        return cssTransform ? `${prop}: ${cssTransform};` : '';
    }
    return '';
}
function getPropValue(prop, value, options) {
    if (/^(font-size|line-height|letter-spacing|width|height)$/g.test(prop)) {
        return value.value ? `${prop}: ${value.value}${value.unit};` : '';
    }
    if (prop === 'opacity' && value.value != null) {
        return value.value !== 100 ? `opacity: ${(value.value / 100).toFixed(2)};` : '';
    }
    if (prop === 'font-weight' && value) {
        return `${prop}: ${value};`;
    }
    if (prop === 'blur' && value.value != null) {
        return `filter: blur(${value.value}${value.unit});`;
    }
    if (prop === 'text-stroke-width' && value.value != null) {
        return `-webkit-text-stroke-width: ${value.value}${value.unit};`;
    }
    if (prop === 'text-stroke-color' && value) {
        return `-webkit-text-stroke-color: ${value};`;
    }
    if (prop === 'background-image' && options.backgroundType === 'image') {
        return `${prop}: url('${value.url}');`;
    }
    if (prop === 'background-color' && (options.backgroundType === 'standard' || !options.backgroundType)) {
        return `${prop}: ${value};`;
    }
    if (/^(box-shadow|text-shadow)$/g.test(prop)) {
        const shadow = getShadow(value);
        return value?.length && shadow ? `${prop}: ${shadow};` : '';
    }
    if (prop === 'background-position') {
        return `${prop}: ${value.x}% ${value.y}%;`;
    }
    if (/^(padding|margin|border-width|border-radius)$/g.test(prop)) {
        const cssGetShortenOrientedWithValue = getShortenOrientedWithValue(prop, value);
        return cssGetShortenOrientedWithValue;
    }
    if (prop === 'border-color') {
        const cssGetShortenOrientedWithoutValue = getShortenOrientedWithoutValue(prop, value);
        return cssGetShortenOrientedWithoutValue;
    }
    if (prop === 'background-gradient' && (options.backgroundType === 'standard' || !options.backgroundType)) {
        const cssBackgroundGradient = getBackgroundGradient(value);
        return cssBackgroundGradient;
    }
    if (prop === 'width-fit-content' && value) {
        return 'width: fit-content;';
    }
    if (prop === 'background-overlay' || prop === 'background-video') {
        return '';
    }
    return `${prop}: ${value};`;
}
function getCssWithDevice(device, styles) {
    if (!styles) {
        return '';
    }
    return Object.entries(styles)
        .map(([prop, value]) => {
        if (!value[device]) {
            return getFieldNotHaveDevice(prop, value, device);
        }
        return getPropValue(prop, value[device], {
            backgroundType: styles?.['background-type'],
        });
    })
        .join('');
}
function flatStyles(styles, pseudo) {
    return {
        ...styles?.[pseudo]?.typography,
        ...styles?.[pseudo]?.background,
        ...styles?.[pseudo]?.border,
        ...styles?.[pseudo]?.spacing,
        ...styles?.[pseudo]?.effect,
        ...styles?.[pseudo]?.advanced,
    };
}
function beautyCss(selector, css) {
    const cssTrim = css.trim();
    if (!cssTrim) {
        return '';
    }
    return `
  ${selector} {
    ${cssTrim}
  }
  `;
}
function assignVariableCssCode(selector, cssCode) {
    return cssCode ? cssCode.replaceAll('$element', selector) : '';
}
function removeEmptyLine(css) {
    return css.replace(/^\s*$(?:\r\n?|\n)/gm, '');
}
function getTabletStyles(selector, tabletNormal, tabletHover, tabletActive, cssCode) {
    const css = `
    ${beautyCss(`${selector}`, tabletNormal)}
    ${beautyCss(`${selector}:hover`, tabletHover)}
    ${beautyCss(`${selector}:active`, tabletActive)}
    ${cssCode}
  `.trim();
    if (css) {
        return `
      @media (min-width: 768px) and (max-width: 991px) {
        ${css}
      }
    `;
    }
    return '';
}
function getMobileStyles(selector, mobileNormal, mobileHover, mobileActive, styles, cssCode, enableBackgroundImageMobile, backgroundImageValue) {
    const normal = `${mobileNormal}\n${enableBackgroundImageMobile && backgroundImageValue ? `background-image: url(${backgroundImageValue.url});` : ''}`;
    const bgVideo = styles?.normal?.background?.['mobile-static-image'] ? 'display: none !important;' : '';
    const css = `
    ${beautyCss(`${selector}`, normal)}
    ${beautyCss('.xb-bg-video', bgVideo)}
    ${beautyCss(`${selector}:hover`, mobileHover)}
    ${beautyCss(`${selector}:active`, mobileActive)}
    ${cssCode}
  `.trim();
    if (css) {
        return `
      @media (max-width: 767px) {
        ${css}
      }
    `;
    }
    return '';
}
function getSelector(className) {
    return `body .${className}`;
}
export function getStyles(className, styles, cssCode) {
    const normal = flatStyles(styles, 'normal');
    const hover = flatStyles(styles, 'hover');
    const active = flatStyles(styles, 'active');
    const desktopNormal = getCssWithDevice('desktop', normal);
    const desktopHover = getCssWithDevice('desktop', hover);
    const desktopActive = getCssWithDevice('desktop', active);
    const tabletNormal = getCssWithDevice('tablet', normal);
    const tabletHover = getCssWithDevice('tablet', hover);
    const tabletActive = getCssWithDevice('tablet', active);
    const mobileNormal = getCssWithDevice('mobile', normal);
    const mobileHover = getCssWithDevice('mobile', hover);
    const mobileActive = getCssWithDevice('mobile', active);
    const selector = getSelector(className);
    const enableBackgroundImageMobile = !!styles?.normal?.background?.['background-image-mobile'] && styles?.normal?.background?.['mobile-static-image'];
    const backgroundImageValue = styles?.normal?.background?.['background-image-mobile'];
    const cssCodeStr = typeof cssCode === 'string' ? assignVariableCssCode(selector, cssCode) : '';
    const hoverRelationSelector = styles?.hover?.['hover-relation']?.['hover-parent'] && styles?.hover?.['hover-relation']?.['hover-parent'] !== className
        ? `.${styles.hover['hover-relation']['hover-parent']}:hover ${selector}`
        : `${selector}:hover`;
    return removeEmptyLine(`
    ${beautyCss(selector, `${desktopNormal}\n${getCssVariableParallax(styles)}`)}
    ${beautyCss(hoverRelationSelector, desktopHover)}
    ${beautyCss(`${selector}:active`, desktopActive)}
    ${isEmpty(cssCode || {}) ? '' : cssCodeStr}
    ${assignVariableCssCode(selector, cssCode?.desktop)}
    ${getTabletStyles(selector, tabletNormal, tabletHover, tabletActive, assignVariableCssCode(selector, cssCode?.tablet))}
    ${getMobileStyles(selector, mobileNormal, mobileHover, mobileActive, styles, assignVariableCssCode(selector, cssCode?.mobile), enableBackgroundImageMobile, backgroundImageValue)}
  `);
}
