export class Style {
    style;
    constructor(initial = {}) {
        this.style = initial;
    }
    static create(initial = {}) {
        return new Style(initial);
    }
    set(style) {
        this.style = {
            ...this.style,
            ...style,
        };
    }
    get() {
        return Object.entries(this.style).reduce((acc, [key, val]) => {
            const keyCamelCase = /^--/g.test(key) ? key : key.replace(/(^-)(webkit|moz|ms|o)/g, '$2').replace(/([-]\w)/g, g => g[1].toUpperCase());
            return {
                ...acc,
                [keyCamelCase]: val,
            };
        }, {});
    }
    static combine(...styles) {
        return Object.assign({}, ...styles);
    }
}
