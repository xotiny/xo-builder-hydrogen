import { FIELD_TYPES } from "../../constants";
import { isEmpty } from '../is-empty';
import { objectValues } from '../object/object-values';
function getCssTablet(tablet) {
    if (!tablet) {
        return '';
    }
    return `
    @media (min-width: 768px) and (max-width: 991px) {
      ${tablet}
    }
  `;
}
function getCssMobile(mobile) {
    if (!mobile) {
        return '';
    }
    return `
    @media (max-width: 767px) {
      ${mobile}
    }
  `;
}
function getCssCodeFromSettings(rootSettings, elementId, settings = {}) {
    return rootSettings
        .reduce((acc, rootSetting) => {
        if (rootSetting.type !== FIELD_TYPES.CSS_CODE) {
            return acc;
        }
        const setting = settings?.[rootSetting.id];
        if (typeof setting === 'string') {
            if (!setting) {
                return acc;
            }
            return `
          ${acc}
          ${setting}
        `;
        }
        if (isEmpty(setting)) {
            return acc;
        }
        return `
        ${acc}
        ${setting?.desktop ?? ''}
        ${getCssTablet(setting?.tablet)}
        ${getCssMobile(setting?.mobile)}
      `;
    }, '')
        .replace(/\$element/g, `.${elementId}`)
        .trim();
}
export function getCssCode(currentElements, elements) {
    const cssCode = objectValues(currentElements).map(currentElement => {
        const element = elements[currentElement.elementId];
        if (!element) {
            return '';
        }
        return getCssCodeFromSettings(element.settings ?? [], currentElement.id, currentElement.settings);
    });
    const beauty = [...new Set(cssCode)].join('\n').trim();
    return beauty;
}
