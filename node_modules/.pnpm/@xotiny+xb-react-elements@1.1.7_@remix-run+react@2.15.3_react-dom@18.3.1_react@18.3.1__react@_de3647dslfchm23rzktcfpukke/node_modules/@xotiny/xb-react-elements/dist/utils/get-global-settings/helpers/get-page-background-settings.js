function convertDataObjectToColor(data) {
    const { rotate, points } = data;
    if ('rotate' in data && 'points' in data && Array.isArray(points) && points.length > 0) {
        const result = points.map((point) => `${point.color} ${point.position}%`);
        return `linear-gradient(${Math.round(rotate)}deg, ${result.join(', ')})`;
    }
    return '';
}
export function getBackgroundFieldResult(value, result = {}) {
    Object.keys(value).forEach(key => {
        let convertColorResult;
        switch (key) {
            case 'background-gradient':
                convertColorResult = convertDataObjectToColor(value[key]);
                result['background-image'] = convertColorResult;
                break;
            case 'background-image':
                result[key] = `url("${value[key].url}")`;
                break;
            case 'background-position':
                result[key] = `${value[key].x}% ${value[key].y}%`;
                break;
            case 'background-type':
                break;
            default:
                result[key] = value[key];
                break;
        }
    });
    return result;
}
