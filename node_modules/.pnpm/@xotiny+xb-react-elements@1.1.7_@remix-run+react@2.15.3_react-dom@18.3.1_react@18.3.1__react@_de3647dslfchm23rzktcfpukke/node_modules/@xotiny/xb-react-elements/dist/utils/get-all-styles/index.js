import { FIELD_TYPES } from "../../constants";
import { objectValues } from '../object/object-values';
import { objectEntries } from '../object/object-entries';
import { getStyles } from '../template-helpers/get-styles';
import { isEmpty } from '../is-empty';
const CLASS_PLACEHOLDER = '_____CLASS_____';
function getAllStylesFromSettings(rootSettings, settings = {}) {
    return rootSettings.reduce((acc, rootSetting) => {
        if (rootSetting.type !== FIELD_TYPES.STYLES) {
            return acc;
        }
        const setting = settings?.[rootSetting.id];
        if (isEmpty(setting)) {
            return acc;
        }
        return `${acc}\n${getStyles(CLASS_PLACEHOLDER, setting, settings.css_code || {})}`;
    }, '');
}
export function getAllStyles(currentElements, elements) {
    const merged = objectValues(currentElements).reduce((acc, currentElement) => {
        const element = elements[currentElement.elementId];
        if (!element) {
            return acc;
        }
        const className = currentElement.id;
        const cssArr = getAllStylesFromSettings(element.settings ?? [], currentElement.settings);
        if (!cssArr) {
            return acc;
        }
        return {
            ...acc,
            [cssArr]: acc[cssArr] ? [...acc[cssArr], className] : [className],
        };
    }, {});
    const allCss = objectEntries(merged).map(([css, classNames]) => {
        const result = css
            // Trường hợp nối class hover vào cha
            .replace(new RegExp(`(\\..*:hover\\s*\\.)(${CLASS_PLACEHOLDER})`, 'g'), (_value, p1) => classNames.map(className => `${p1}${className}`).join(', '))
            // Trường hợp nối class thường
            .replace(new RegExp(`${CLASS_PLACEHOLDER}\\s`, 'g'), classNames.join(', .'))
            // Trường hợp nối class hover vào chính nó
            .replaceAll(`${CLASS_PLACEHOLDER}:hover`, classNames.map(className => `${className}:hover`).join(', .'))
            // Trường hợp nối class active vào chính nó
            .replaceAll(`${CLASS_PLACEHOLDER}:active`, classNames.map(className => `${className}:active`).join(', .'))
            .trim();
        return result;
    });
    return allCss;
}
