import { CONFIG } from "../../config";
export function getSortValuesFromParam(sortParam, handle) {
    switch (sortParam) {
        case 'price-high-low':
            return {
                sortKey: 'PRICE',
                reverse: true,
            };
        case 'price-low-high':
            return {
                sortKey: 'PRICE',
                reverse: false,
            };
        case 'best-selling':
            return {
                sortKey: 'BEST_SELLING',
                reverse: false,
            };
        case 'newest':
            return handle === 'all'
                ? {
                    sortKey: 'CREATED_AT',
                    reverse: true,
                }
                : {
                    sortKey: 'CREATED',
                    reverse: true,
                };
        case 'created-descending':
            return handle === 'all'
                ? {
                    sortKey: 'CREATED_AT',
                    reverse: true,
                }
                : {
                    sortKey: 'CREATED',
                    reverse: true,
                };
        case 'oldest':
            return handle === 'all'
                ? {
                    sortKey: 'CREATED_AT',
                    reverse: false,
                }
                : {
                    sortKey: 'CREATED',
                    reverse: false,
                };
        case 'created-ascending':
            return handle === 'all'
                ? {
                    sortKey: 'CREATED_AT',
                    reverse: false,
                }
                : {
                    sortKey: 'CREATED',
                    reverse: false,
                };
        case 'title-ascending':
            return {
                sortKey: 'TITLE',
                reverse: false,
            };
        case 'title-descending':
            return {
                sortKey: 'TITLE',
                reverse: true,
            };
        case 'featured':
            return handle === 'all'
                ? {
                    sortKey: 'ID',
                    reverse: false,
                }
                : {
                    sortKey: 'MANUAL',
                    reverse: false,
                };
        default:
            return {
                sortKey: 'RELEVANCE',
                reverse: false,
            };
    }
}
export function parseAsCurrency(value, locale) {
    return new Intl.NumberFormat(locale.language + '-' + locale.country, {
        style: 'currency',
        currency: locale.currency,
    }).format(value);
}
export function getAppliedFilter(filters, allFilterValues, locale) {
    return filters
        .map(filter => {
        const foundValue = allFilterValues?.find(value => {
            const valueInput = JSON.parse(value.input);
            // special case for price, the user can enter something freeform (still a number, though)
            // that may not make sense for the locale/currency.
            // Basically just check if the price filter is applied at all.
            if (valueInput.price && filter.price) {
                return true;
            }
            return (
            // This comparison should be okay as long as we're not manipulating the input we
            // get from the API before using it as a URL param.
            JSON.stringify(valueInput) === JSON.stringify(filter));
        });
        if (!foundValue) {
            // eslint-disable-next-line no-console
            console.error('Could not find filter value for filter', filter);
            return null;
        }
        if (foundValue.id === 'filter.v.price') {
            // Special case for price, we want to show the min and max values as the label.
            const input = JSON.parse(foundValue.input);
            const min = parseAsCurrency(input.price?.min ?? 0, locale);
            const max = input.price?.max ? parseAsCurrency(input.price.max, locale) : '';
            const label = min && max ? `${min} - ${max}` : 'Price';
            return {
                filter,
                label,
            };
        }
        return {
            filter,
            label: foundValue.label,
        };
    })
        .filter((filter) => filter !== null);
}
export function getAppliedFilterLink(filter, params, location) {
    const paramsClone = new URLSearchParams(params);
    Object.entries(filter.filter).forEach(([key, value]) => {
        const fullKey = CONFIG.collectionPage.filterUrlPrefix + key;
        paramsClone.delete(fullKey, JSON.stringify(value));
    });
    return `${location.pathname}?${paramsClone.toString()}`;
}
export function filterInputToParams(rawInput, params) {
    const input = typeof rawInput === 'string' ? JSON.parse(rawInput) : rawInput;
    Object.entries(input).forEach(([key, value]) => {
        if (key === 'price') {
            // For price, we want to overwrite
            params.set(`${CONFIG.collectionPage.filterUrlPrefix}${key}`, JSON.stringify(value));
        }
        else {
            if (params.has(`${CONFIG.collectionPage.filterUrlPrefix}${key}`, JSON.stringify(value))) {
                params.delete(`${CONFIG.collectionPage.filterUrlPrefix}${key}`, JSON.stringify(value));
            }
            else {
                params.append(`${CONFIG.collectionPage.filterUrlPrefix}${key}`, JSON.stringify(value));
            }
        }
    });
    return params;
}
export function getFilterLink(rawInput, params, location) {
    const paramsClone = new URLSearchParams(params);
    const newParams = filterInputToParams(rawInput, paramsClone);
    return `${location.pathname}?${newParams.toString()}`;
}
