import { convertObjectToCSSProperties } from './helpers/obj-to-css-props';
import { fieldControlValuesToVariables } from './field-control-values-to-variables';
import { getBackgroundFieldResult } from './helpers/get-page-background-settings';
/*
  - Input: {
    "layout": {
      "container-width": {
        "desktop": {
          "value": 1500,
          "unit": "px"
        }
      }
    },
    customCode: {
      "css": ".class_from_custom_css { color: red; }",
    }
  };

  - Output:
    `
      :root {
        --layout-container-width-desktop: 1500px;
      }
      .class_from_custom_css { color: red; }
    `;
*/
/** Hàm lấy css global settings hoặc page settings, đầu ra là css: string | Hiện tại đang lấy các field: *layout | colors | customCode: css*  */
export function getGlobalCssSettings(globalOrPageSettings) {
    let resultLayoutColor = {};
    let resultBackgroundColor = {};
    let customCss = '';
    Object.keys(globalOrPageSettings).forEach(key => {
        if (key === 'layout' || key === 'colors') {
            resultLayoutColor = {
                ...resultLayoutColor,
                ...fieldControlValuesToVariables(globalOrPageSettings[key], key),
            };
        }
        else if (key === 'background') {
            resultBackgroundColor = {
                ...resultBackgroundColor,
                ...getBackgroundFieldResult(globalOrPageSettings[key]),
            };
        }
        else if (key === 'customCode') {
            const { css } = globalOrPageSettings[key];
            customCss = css;
        }
    });
    let pageSettingsVars = convertObjectToCSSProperties(resultLayoutColor);
    const pageBackgroundVars = convertObjectToCSSProperties(resultBackgroundColor, true);
    if (!!globalOrPageSettings?.additionalSettings && !globalOrPageSettings?.additionalSettings?.isOverrideGlobalSettings) {
        pageSettingsVars = '';
    }
    return `
    :root {
      ${pageSettingsVars}
    }
    body {
      ${pageBackgroundVars}
    }
    ${customCss}
  `;
}
