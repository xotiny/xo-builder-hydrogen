import { useLocation, useNavigate } from '@remix-run/react';
import { useEffect } from 'react';
import { delay } from "../utils/delay";
import { isBrowser } from "../utils/is-browser";
const ANCHOR_SELECTOR = '[xb-href]:not([xb-href^="#"]).xb-link, a[href]:not([href^="#"]).xb-link';
const handlePrefetch = (el) => {
    const href = el.getAttribute('xb-href') || el.getAttribute('href');
    const oldLinkEl = document.head.querySelector(`link[rel="prefetch"][href="${href}"]`);
    const fullHref = href?.startsWith('/') ? window.location.origin + href : href;
    if ((href?.startsWith(window.location.origin) || href?.startsWith('/')) && !href.includes('/account') && fullHref !== window.location.href) {
        const linkEl = document.createElement('link');
        linkEl.rel = 'prefetch';
        linkEl.as = 'fetch';
        linkEl.href = href;
        oldLinkEl?.remove();
        document.head.appendChild(linkEl);
    }
};
export function useLinksPrefetch() {
    const location = useLocation();
    useEffect(() => {
        if (isBrowser()) {
            const anchorEls = document.querySelectorAll(ANCHOR_SELECTOR);
            const intersectionObserver = new IntersectionObserver(entries => {
                entries.forEach(async (entry) => {
                    await delay(50);
                    if (entry.isIntersecting) {
                        const el = entry.target;
                        handlePrefetch(el);
                        intersectionObserver.unobserve(el);
                    }
                });
            }, { threshold: 0.5 });
            anchorEls.forEach(el => {
                intersectionObserver.observe(el);
            });
            return () => {
                intersectionObserver.disconnect();
            };
        }
    }, [location]);
}
export function useLinks() {
    const navigate = useNavigate();
    const handleClick = (event) => {
        const targetEl = event.target;
        const anchorEl = targetEl.closest(ANCHOR_SELECTOR);
        const href = anchorEl?.getAttribute('xb-href') || anchorEl?.getAttribute('href');
        if (href) {
            event.preventDefault();
            const targetAttr = anchorEl.getAttribute('xb-target') || anchorEl.getAttribute('target');
            const isBlank = targetAttr === '_blank' || event.ctrlKey || event.metaKey;
            if (isBlank) {
                window.open(href, '_blank');
            }
            else if (href.startsWith('http') && !href.startsWith(window.location.origin)) {
                window.location.href = href;
            }
            else {
                navigate(href);
            }
        }
    };
    useEffect(() => {
        if (isBrowser()) {
            window.addEventListener('click', handleClick);
            return () => {
                window.removeEventListener('click', handleClick);
            };
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
}
