import { useContext } from 'react';
import { useMatches } from '@remix-run/react';
import { createShopifyItemContext } from "../context/shopify-item-provider";
import { createShopifyProductContext } from "../context/shopify-product-provider";
import { hasArticleSetting, hasBlogSettings, hasCollectionListAllSetting, hasCollectionListManualSetting, hasCollectionSetting, hasProductList, hasProductRecommendationSetting, hasProductSetting, } from "../hydrogen/utils/get-shopify-settings";
import { isEmpty } from "../utils/is-empty";
import { XbBuilderContext } from '../context/xb-builder.context';
function useGetElementId() {
    function getElementId(type, currentElementId, page) {
        const currentElements = page.entities;
        const currentElement = currentElements[currentElementId];
        function handler(element) {
            if (!element.parent) {
                return currentElementId;
            }
            if (type === 'collectionList' &&
                element.settings &&
                (hasCollectionListAllSetting(element.settings) || hasCollectionListManualSetting(element.settings)) &&
                element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'collection' && element.settings && hasCollectionSetting(element.settings) && element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'product' && element.settings && hasProductSetting(element.settings) && element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'productRecommendation' &&
                element.settings &&
                hasProductRecommendationSetting(element.settings) &&
                element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'productList' && element.settings && hasProductList(element.settings) && element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'blog' && element.settings && hasBlogSettings(element.settings) && element.elementId !== currentElement.elementId) {
                return element.id;
            }
            if (type === 'article' && element.settings && hasArticleSetting(element.settings) && element.elementId !== currentElement.elementId) {
                return element.id;
            }
            const parentElement = currentElements[element.parent];
            return handler(parentElement);
        }
        return handler(currentElement);
    }
    return getElementId;
}
export function useAppState() {
    const appState = useContext(XbBuilderContext);
    if (isEmpty(appState)) {
        throw new Error('useAppState must be in the XbBuilderShopifyProvider');
    }
    return appState;
}
function useShopifyData(type, currentElementId) {
    const appState = useAppState();
    const getElementId = useGetElementId();
    if (!currentElementId) {
        return;
    }
    const elementId = getElementId(type, currentElementId, appState.pageData);
    if (isEmpty(appState)) {
        throw new Error('useShopifyData must be in the XbBuilderShopifyProvider');
    }
    const elementState = appState?.shopifyData?.[type];
    return elementState?.[elementId];
}
const ProductContext = createShopifyProductContext();
const CollectionContext = createShopifyItemContext();
const ArticleContext = createShopifyItemContext();
const BlogContext = createShopifyItemContext();
const ProductMediaContext = createShopifyItemContext();
const ProductOptionContext = createShopifyItemContext();
const ProductOptionValueContext = createShopifyItemContext();
const ElementSettingsContext = createShopifyItemContext();
export const ProductProvider = ProductContext.Provider;
export const CollectionProvider = CollectionContext.Provider;
export const ArticleProvider = ArticleContext.Provider;
export const BlogProvider = BlogContext.Provider;
export const ProductMediaProvider = ProductMediaContext.Provider;
export const ProductOptionProvider = ProductOptionContext.Provider;
export const ProductOptionValueProvider = ProductOptionValueContext.Provider;
export const ElementSettingsProvider = ElementSettingsContext.Provider;
export function useCollection(elementId) {
    const collection = CollectionContext.useItem();
    const data = useShopifyData('collection', elementId);
    const collectionDetail = useCollectionDetail();
    if (!collection && !collectionDetail) {
        return data;
    }
    if (collection) {
        return collection;
    }
    return collectionDetail?.collection;
}
export function useProduct(elementId) {
    const data = ProductContext.useItem();
    const productData = useShopifyData('product', elementId);
    const productDetail = useProductDetail();
    if (!data?.product && !!productData) {
        return {
            product: productData,
            selectedVariant: productData?.selectedVariant,
        };
    }
    if (data?.product) {
        return data;
    }
    return {
        product: productDetail,
        selectedVariant: productDetail?.selectedVariant,
        isProductPage: true,
    };
}
export function useCollectionList(elementId) {
    const data = useShopifyData('collectionList', elementId);
    return data?.collections;
}
export function useArticle(elementId) {
    const article = ArticleContext.useItem();
    const data = useShopifyData('article', elementId);
    const appState = useAppState();
    const articleDetail = appState.shopifyData.articleDetail;
    if (!article && !!data) {
        return data;
    }
    if (article) {
        return article;
    }
    return articleDetail;
}
export function useBlog(elementId) {
    const data = useShopifyData('blog', elementId);
    return data?.blog;
}
export function useProductRecommendation(elementId) {
    const data = useShopifyData('productRecommendation', elementId);
    return data?.productRecommendation;
}
export function useProductList(type, elementId) {
    if (type === 'all') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const data = useShopifyData('productList', elementId);
        return data?.products;
    }
    if (type === 'related') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const data = useShopifyData('productRecommendation', elementId);
        return data?.productRecommendations;
    }
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const data = useShopifyData('collection', elementId);
    return data?.products?.nodes;
}
export function useProductMedia() {
    const data = ProductMediaContext.useItem();
    if (data)
        return data;
    return {};
}
export function useShop() {
    const appState = useAppState();
    return appState.shopifyData.shop;
}
export function useProductOption() {
    const data = ProductOptionContext.useItem();
    if (data)
        return data;
    return null;
}
export function useProductOptionValue() {
    const data = ProductOptionValueContext.useItem();
    if (data)
        return data;
    return null;
}
export function useProductDetail() {
    const appState = useAppState();
    return appState.shopifyData.productDetail;
}
export function useCollectionDetail() {
    const appState = useAppState();
    return appState.shopifyData.collectionDetail;
}
export function useElementSettings() {
    const data = ElementSettingsContext.useItem();
    if (data)
        return data;
    return null;
}
export function usePageDetail() {
    const appState = useAppState();
    return appState.shopifyData.page;
}
export function useSeo() {
    const matches = useMatches();
    const pageData = matches?.[matches?.length - 1]?.data;
    return pageData;
}
