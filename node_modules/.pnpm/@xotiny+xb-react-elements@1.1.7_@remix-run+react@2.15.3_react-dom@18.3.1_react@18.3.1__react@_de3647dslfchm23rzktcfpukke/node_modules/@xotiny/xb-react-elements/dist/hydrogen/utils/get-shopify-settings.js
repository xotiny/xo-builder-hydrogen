import { CONFIG } from "../../config";
import { objectValues } from "../../utils/object/object-values";
import { isEmpty } from '../../utils/is-empty';
export function getShopifySettings(page) {
    return Object.values(page.entities).reduce((acc, entity) => {
        const val = objectValues(CONFIG.shopifyFieldIds).reduce((acc, key) => {
            const optionValue = entity.settings?.[key];
            if (isEmpty(optionValue)) {
                return acc;
            }
            return {
                ...acc,
                [key]: optionValue,
            };
        }, {});
        if (isEmpty(val)) {
            return acc;
        }
        return [
            ...acc,
            {
                id: entity.id,
                elementId: entity.elementId,
                settings: val,
            },
        ];
    }, []);
}
export function hasCollectionSetting(settings) {
    return !!settings?.[CONFIG.shopifyFieldIds.collection];
}
export function hasProductSetting(settings) {
    return !!settings?.[CONFIG.shopifyFieldIds.product];
}
export function hasCollectionListManualSetting(settings) {
    return settings?.[CONFIG.shopifyFieldIds.collectionSource] === 'manual';
}
export function hasCollectionListAllSetting(settings) {
    return settings?.[CONFIG.shopifyFieldIds.collectionSource] === 'all';
}
export function hasProductRecommendationSetting(settings) {
    return settings?.[CONFIG.shopifyFieldIds.productSource] === 'related' && settings?.$product;
}
export function hasProductList(settings) {
    return settings?.[CONFIG.shopifyFieldIds.productSource] === 'all';
}
export function hasArticleSetting(settings) {
    return !!settings?.[CONFIG.shopifyFieldIds.article];
}
export function hasBlogSettings(settings) {
    return !!settings?.[CONFIG.shopifyFieldIds.blog];
}
export function filterBy(type, settings) {
    switch (type) {
        case 'collectionList':
            return settings.filter(item => hasCollectionListAllSetting(item.settings) || hasCollectionListManualSetting(item.settings));
        case 'collection':
            return settings.filter(item => hasCollectionSetting(item.settings));
        case 'product':
            return settings.filter(item => hasProductSetting(item.settings));
        case 'article':
            return settings.filter(item => hasArticleSetting(item.settings));
        case 'blog':
            return settings.filter(item => hasBlogSettings(item.settings));
        case 'productRecommendation':
            return settings.filter(item => hasProductRecommendationSetting(item.settings));
        case 'productList':
            return settings.filter(item => hasProductList(item.settings));
        default:
            return settings;
    }
}
