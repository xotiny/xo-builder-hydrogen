import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useLocation, useNavigate } from '@remix-run/react';
import { useEffect, useMemo, useState } from 'react';
import { CONFIG } from "../../config";
import { filterInputToParams } from "../../utils/get-collection-filter";
export function PriceRangeFilter({ max, min }) {
    const location = useLocation();
    const params = useMemo(() => new URLSearchParams(location.search), [location.search]);
    const navigate = useNavigate();
    const [minPrice, setMinPrice] = useState(min);
    const [maxPrice, setMaxPrice] = useState(max);
    useEffect(() => {
        const id = setTimeout(() => {
            if (minPrice === undefined && maxPrice === undefined) {
                params.delete(`${CONFIG.collectionPage.filterUrlPrefix}price`);
                navigate(`${location.pathname}?${params.toString()}`);
                return;
            }
            const price = {
                ...(minPrice === undefined ? {} : { min: minPrice }),
                ...(maxPrice === undefined ? {} : { max: maxPrice }),
            };
            const newParams = filterInputToParams({ price }, params);
            navigate(`${location.pathname}?${newParams.toString()}`);
        }, CONFIG.collectionPage.priceRangeDebounce);
        return () => {
            clearTimeout(id);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [minPrice, maxPrice]);
    const onChangeMax = (event) => {
        const value = event.target.value;
        const newMaxPrice = Number.isNaN(parseFloat(value)) ? undefined : parseFloat(value);
        setMaxPrice(newMaxPrice);
    };
    const onChangeMin = (event) => {
        const value = event.target.value;
        const newMinPrice = Number.isNaN(parseFloat(value)) ? undefined : parseFloat(value);
        setMinPrice(newMinPrice);
    };
    return (_jsx("div", { className: "xb-field-price", children: _jsxs("div", { className: "xb-field-price__input-group", children: [_jsxs("div", { className: "xb-field-price__input-box", children: [_jsx("span", { children: "$" }), _jsx("input", { name: "minPrice", className: "xb-field-price__input", type: "number", value: minPrice ?? '', onChange: onChangeMin })] }), _jsx("span", { children: "To" }), _jsxs("div", { className: "xb-field-price__input-box", children: [_jsx("span", { children: "$" }), _jsx("input", { name: "maxPrice", className: "xb-field-price__input", type: "number", value: maxPrice ?? '', onChange: onChangeMax })] })] }) }));
}
