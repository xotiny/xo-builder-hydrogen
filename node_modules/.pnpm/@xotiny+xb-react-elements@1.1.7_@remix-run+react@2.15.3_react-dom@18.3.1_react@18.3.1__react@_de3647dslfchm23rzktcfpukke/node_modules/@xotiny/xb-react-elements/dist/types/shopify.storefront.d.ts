import type * as StorefrontAPI from '@shopify/hydrogen/storefront-api-types';
export type ProductListType = 'custom' | 'all' | 'related';
export type CollectionQueryVariables = StorefrontAPI.Exact<{
    handle: StorefrontAPI.Scalars['String']['input'];
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type CollectionQuery = {
    collection?: CollectionItem;
};
export type CollectionItem = StorefrontAPI.Maybe<Pick<StorefrontAPI.Collection, 'id' | 'handle' | 'title' | 'description' | 'onlineStoreUrl'> & {
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
    seo: Pick<StorefrontAPI.Seo, 'description' | 'title'>;
    products: {
        filters: Array<Pick<StorefrontAPI.Filter, 'id' | 'label' | 'type'> & {
            values: Array<Pick<StorefrontAPI.FilterValue, 'id' | 'label' | 'count' | 'input'>>;
        }>;
        nodes: Array<ProductFragment>;
        pageInfo: Pick<StorefrontAPI.PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'>;
    };
}>;
export type ArticleQueryVariables = StorefrontAPI.Exact<{
    articleHandle: StorefrontAPI.Scalars['String']['input'];
    blogHandle: StorefrontAPI.Scalars['String']['input'];
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type ArticleQuery = {
    blog?: StorefrontAPI.Maybe<{
        articleByHandle?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Article, 'title' | 'contentHtml' | 'publishedAt'> & {
            author?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ArticleAuthor, 'name'>>;
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
            seo?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Seo, 'description' | 'title'>>;
        }>;
    }>;
};
export type ArticleType = {
    articleByHandle?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Article, 'title' | 'contentHtml' | 'publishedAt' | 'handle' | 'tags'> & {
        author?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ArticleAuthor, 'name'>>;
        image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
        seo?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Seo, 'description' | 'title'>>;
        blog: Pick<StorefrontAPI.Blog, 'handle'>;
    }>;
};
export type BlogQueryVariables = StorefrontAPI.Exact<{
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    blogHandle: StorefrontAPI.Scalars['String']['input'];
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type BlogQuery = {
    blog?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Blog, 'title'> & {
        seo?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Seo, 'title' | 'description'>>;
        articles: {
            nodes: Array<Pick<StorefrontAPI.Article, 'contentHtml' | 'handle' | 'id' | 'publishedAt' | 'title' | 'tags'> & {
                author?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ArticleAuthor, 'name'>>;
                image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
                blog: Pick<StorefrontAPI.Blog, 'handle'>;
            }>;
            pageInfo: Pick<StorefrontAPI.PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'>;
        };
    }>;
};
export type ArticleItemFragment = Pick<StorefrontAPI.Article, 'contentHtml' | 'handle' | 'id' | 'publishedAt' | 'title'> & {
    author?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ArticleAuthor, 'name'>>;
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
    blog: Pick<StorefrontAPI.Blog, 'handle'>;
};
export type BlogsQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type BlogsQuery = {
    blogs: {
        pageInfo: Pick<StorefrontAPI.PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>;
        nodes: Array<Pick<StorefrontAPI.Blog, 'title' | 'handle'> & {
            seo?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Seo, 'title' | 'description'>>;
        }>;
    };
};
export type CollectionFragment = Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle'> & {
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
};
export type ProductVariantFragment = Pick<StorefrontAPI.ProductVariant, 'availableForSale' | 'id' | 'sku' | 'title' | 'quantityAvailable'> & {
    compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
    image?: StorefrontAPI.Maybe<{
        __typename: 'Image';
    } & Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
    price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
    product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
    selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
    unitPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
};
export type ProductFragment = Pick<StorefrontAPI.Product, 'id' | 'title' | 'vendor' | 'handle' | 'descriptionHtml' | 'description' | 'updatedAt' | 'totalInventory'> & {
    options: Array<Pick<StorefrontAPI.ProductOption, 'name'> & {
        optionValues: Array<Pick<StorefrontAPI.ProductOptionValue, 'name' | 'id'>>;
    }>;
    selectedVariant?: StorefrontAPI.Maybe<ProductVariantType>;
    selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<ProductVariantType>;
    adjacentVariants: Array<ProductVariantType>;
    variants: {
        nodes: Array<ProductVariantType>;
    };
    seo: Pick<StorefrontAPI.Seo, 'description' | 'title'>;
    featuredImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
    priceRange: {
        minVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
        maxVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
    };
    media: {
        nodes: Array<({
            __typename: 'ExternalVideo';
        } & Pick<StorefrontAPI.ExternalVideo, 'id' | 'embedUrl' | 'host' | 'mediaContentType' | 'alt'> & {
            previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
        }) | ({
            __typename: 'MediaImage';
        } & Pick<StorefrontAPI.MediaImage, 'id' | 'mediaContentType' | 'alt'> & {
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'width' | 'height'>>;
            previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
        }) | ({
            __typename: 'Model3d';
        } & Pick<StorefrontAPI.Model3d, 'id' | 'mediaContentType' | 'alt'> & {
            sources: Array<Pick<StorefrontAPI.Model3dSource, 'mimeType' | 'url'>>;
            previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
        }) | ({
            __typename: 'Video';
        } & Pick<StorefrontAPI.Video, 'id' | 'mediaContentType' | 'alt'> & {
            sources: Array<Pick<StorefrontAPI.VideoSource, 'mimeType' | 'url'>>;
            previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
        })>;
    };
    collections: {
        edges: Array<{
            node: Pick<StorefrontAPI.Collection, 'handle' | 'title'>;
        }>;
    };
};
export type ProductQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    handle: StorefrontAPI.Scalars['String']['input'];
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    selectedOptions: Array<StorefrontAPI.SelectedOptionInput> | StorefrontAPI.SelectedOptionInput;
}>;
export type ProductQuery = {
    product?: ProductFragment;
};
export type ProductOptionType = Pick<StorefrontAPI.ProductOption, 'name'> & {
    optionValues: Array<Pick<StorefrontAPI.ProductOptionValue, 'name' | 'id'>>;
};
export type ProductOptionValue = {
    available: boolean;
    exists: boolean;
    handle: string;
    isDifferentProduct: boolean;
    name: string;
    optionName: string;
    selected: boolean;
    swatch: any;
    variantUriQuery: string;
    variant: any;
    value: string;
    swatchColorEnabled: boolean;
};
export type ProductVariantsFragment = {
    variants: {
        nodes: Array<ProductVariantType>;
    };
};
export type ProductVariantType = Pick<StorefrontAPI.ProductVariant, 'availableForSale' | 'id' | 'sku' | 'title' | 'quantityAvailable'> & {
    compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
    image?: StorefrontAPI.Maybe<{
        __typename: 'Image';
    } & Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
    price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
    product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
    selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
    unitPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
    storeAvailability: {
        nodes: Array<Pick<StorefrontAPI.StoreAvailability, 'available' | 'pickUpTime' | 'quantityAvailable'> & {
            location: Pick<StorefrontAPI.Location, 'name' | 'address'>;
        }>;
    };
};
export type ProductImageType = StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
export type ProductItemFragment = ProductFragment;
export type RecommendedProductsQueryVariables = StorefrontAPI.Exact<{
    productHandle?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type RecommendedProductsQuery = {
    productRecommendations?: StorefrontAPI.Maybe<Array<ProductFragment>>;
};
export type ProductsQuery = {
    products: {
        edges: Array<{
            node: ProductFragment;
        }>;
    };
};
export type ExternalVideoType = {
    __typename: 'ExternalVideo';
    previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
} & Pick<StorefrontAPI.ExternalVideo, 'id' | 'embedUrl' | 'host' | 'mediaContentType' | 'alt'>;
export type MediaImageType = {
    __typename: 'MediaImage';
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'width' | 'height'>>;
    previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
} & Pick<StorefrontAPI.MediaImage, 'id' | 'mediaContentType' | 'alt'>;
export type Model3dType = {
    __typename: 'Model3d';
    sources: Array<Pick<StorefrontAPI.Model3dSource, 'mimeType' | 'url'>>;
    previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
} & Pick<StorefrontAPI.Model3d, 'id' | 'mediaContentType' | 'alt'>;
export type VideoType = {
    __typename: 'Video';
    sources: Array<Pick<StorefrontAPI.VideoSource, 'mimeType' | 'url'>>;
    previewImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
} & Pick<StorefrontAPI.Video, 'id' | 'mediaContentType' | 'alt'>;
export type MediaType = ExternalVideoType | MediaImageType | Model3dType | VideoType;
export type ShopQuery = {
    shop: Pick<StorefrontAPI.Shop, 'name'> & {
        paymentSettings: Pick<StorefrontAPI.PaymentSettings, 'acceptedCardBrands' | 'cardVaultUrl' | 'countryCode' | 'currencyCode' | 'enabledPresentmentCurrencies' | 'supportedDigitalWallets'>;
        primaryDomain: Pick<StorefrontAPI.Domain, 'url'>;
    };
};
export type CollectionFilterQueryVariables = StorefrontAPI.Exact<{
    handle: StorefrontAPI.Scalars['String']['input'];
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    filters?: StorefrontAPI.InputMaybe<Array<StorefrontAPI.ProductFilter> | StorefrontAPI.ProductFilter>;
    sortKey: StorefrontAPI.ProductCollectionSortKeys;
    reverse?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Boolean']['input']>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type CollectionFilterQuery = {
    collection: CollectionItem;
    collections: {
        edges: Array<{
            node: Pick<StorefrontAPI.Collection, 'title' | 'handle'>;
        }>;
    };
};
export type CollectionFilterData = {
    collection?: CollectionItem;
    collections: Array<Pick<StorefrontAPI.Collection, 'title' | 'handle'>>;
};
export type MoneyFragment = Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
export type CartLineFragment = Pick<StorefrontAPI.CartLine, 'id' | 'quantity'> & {
    attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
    cost: {
        totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        compareAtAmountPerQuantity?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
    };
    merchandise: Pick<StorefrontAPI.ProductVariant, 'id' | 'availableForSale' | 'requiresShipping' | 'title'> & {
        compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
        price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
        product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
        selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
    };
};
export type CartLineComponentFragment = Pick<StorefrontAPI.ComponentizableCartLine, 'id' | 'quantity'> & {
    attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
    cost: {
        totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        compareAtAmountPerQuantity?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
    };
    merchandise: Pick<StorefrontAPI.ProductVariant, 'id' | 'availableForSale' | 'requiresShipping' | 'title'> & {
        compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
        price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
        product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
        selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
    };
};
export type CartApiQueryFragment = Pick<StorefrontAPI.Cart, 'updatedAt' | 'id' | 'checkoutUrl' | 'totalQuantity' | 'note'> & {
    buyerIdentity: Pick<StorefrontAPI.CartBuyerIdentity, 'countryCode' | 'email' | 'phone'> & {
        customer?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Customer, 'id' | 'email' | 'firstName' | 'lastName' | 'displayName'>>;
    };
    lines: {
        nodes: Array<(Pick<StorefrontAPI.CartLine, 'id' | 'quantity'> & {
            attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
            cost: {
                totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                compareAtAmountPerQuantity?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
            };
            merchandise: Pick<StorefrontAPI.ProductVariant, 'id' | 'availableForSale' | 'requiresShipping' | 'title'> & {
                compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
                price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
                product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
                selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
            };
        }) | (Pick<StorefrontAPI.ComponentizableCartLine, 'id' | 'quantity'> & {
            attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
            cost: {
                totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                compareAtAmountPerQuantity?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
            };
            merchandise: Pick<StorefrontAPI.ProductVariant, 'id' | 'availableForSale' | 'requiresShipping' | 'title'> & {
                compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
                price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
                image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
                product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
                selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
            };
        })>;
    };
    cost: {
        subtotalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
        totalDutyAmount?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
        totalTaxAmount?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>>;
    };
    attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
    discountCodes: Array<Pick<StorefrontAPI.CartDiscountCode, 'code' | 'applicable'>>;
};
export type MenuItemFragment = Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>;
export type ChildMenuItemFragment = Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>;
export type ParentMenuItemFragment = Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'> & {
    items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>>;
};
export type MenuFragment = Pick<StorefrontAPI.Menu, 'id'> & {
    items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'> & {
        items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>>;
    }>;
};
export type ShopFragment = Pick<StorefrontAPI.Shop, 'id' | 'name' | 'description'> & {
    primaryDomain: Pick<StorefrontAPI.Domain, 'url'>;
    brand?: StorefrontAPI.Maybe<{
        logo?: StorefrontAPI.Maybe<{
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
        }>;
    }>;
};
export type HeaderQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    headerMenuHandle: StorefrontAPI.Scalars['String']['input'];
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type HeaderQuery = {
    shop: Pick<StorefrontAPI.Shop, 'id' | 'name' | 'description'> & {
        primaryDomain: Pick<StorefrontAPI.Domain, 'url'>;
        brand?: StorefrontAPI.Maybe<{
            logo?: StorefrontAPI.Maybe<{
                image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
            }>;
        }>;
    };
    menu?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Menu, 'id'> & {
        items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'> & {
            items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>>;
        }>;
    }>;
};
export type FooterQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    footerMenuHandle: StorefrontAPI.Scalars['String']['input'];
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type FooterQuery = {
    menu?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Menu, 'id'> & {
        items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'> & {
            items: Array<Pick<StorefrontAPI.MenuItem, 'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'>>;
        }>;
    }>;
};
export type MoneyProductItemFragment = Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
export type SitemapQueryVariables = StorefrontAPI.Exact<{
    urlLimits?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type SitemapQuery = {
    products: {
        nodes: Array<Pick<StorefrontAPI.Product, 'updatedAt' | 'handle' | 'onlineStoreUrl' | 'title'> & {
            featuredImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText'>>;
        }>;
    };
    collections: {
        nodes: Array<Pick<StorefrontAPI.Collection, 'updatedAt' | 'handle' | 'onlineStoreUrl'>>;
    };
    pages: {
        nodes: Array<Pick<StorefrontAPI.Page, 'updatedAt' | 'handle' | 'onlineStoreUrl'>>;
    };
};
export type StoreCollectionsQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type StoreCollectionsQuery = {
    collections: {
        nodes: Array<Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle'> & {
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
        }>;
        pageInfo: Pick<StorefrontAPI.PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>;
    };
};
export type CatalogQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type CatalogQuery = {
    products: {
        nodes: Array<Pick<StorefrontAPI.Product, 'id' | 'handle' | 'title'> & {
            featuredImage?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>>;
            priceRange: {
                minVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
                maxVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
            };
            variants: {
                nodes: Array<{
                    selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
                }>;
            };
        }>;
        pageInfo: Pick<StorefrontAPI.PageInfo, 'hasPreviousPage' | 'hasNextPage' | 'startCursor' | 'endCursor'>;
    };
};
export type PageQueryVariables = StorefrontAPI.Exact<{
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    handle: StorefrontAPI.Scalars['String']['input'];
}>;
export type PageQuery = {
    page?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Page, 'id' | 'title' | 'body'> & {
        seo?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Seo, 'description' | 'title'>>;
    }>;
};
export type PolicyFragment = Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>;
export type PolicyQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    privacyPolicy: StorefrontAPI.Scalars['Boolean']['input'];
    refundPolicy: StorefrontAPI.Scalars['Boolean']['input'];
    shippingPolicy: StorefrontAPI.Scalars['Boolean']['input'];
    termsOfService: StorefrontAPI.Scalars['Boolean']['input'];
}>;
export type PolicyQuery = {
    shop: {
        privacyPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>>;
        shippingPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>>;
        termsOfService?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>>;
        refundPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>>;
    };
};
export type PolicyItemFragment = Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>;
export type PoliciesQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type PoliciesQuery = {
    shop: {
        privacyPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>>;
        shippingPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>>;
        termsOfService?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>>;
        refundPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>>;
        subscriptionPolicy?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ShopPolicyWithDefault, 'id' | 'title' | 'handle'>>;
    };
};
export type ProductVariantsQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    handle: StorefrontAPI.Scalars['String']['input'];
}>;
export type ProductVariantsQuery = {
    product?: StorefrontAPI.Maybe<{
        variants: {
            nodes: Array<Pick<StorefrontAPI.ProductVariant, 'availableForSale' | 'id' | 'sku' | 'title'> & {
                compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
                image?: StorefrontAPI.Maybe<{
                    __typename: 'Image';
                } & Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>>;
                price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
                product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
                selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
                unitPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
            }>;
        };
    }>;
};
export type SearchProductFragment = {
    __typename: 'Product';
} & Pick<StorefrontAPI.Product, 'handle' | 'id' | 'publishedAt' | 'title' | 'trackingParameters' | 'vendor'> & {
    variants: {
        nodes: Array<Pick<StorefrontAPI.ProductVariant, 'id'> & {
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
            price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
            compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
            selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
            product: Pick<StorefrontAPI.Product, 'handle' | 'title'>;
        }>;
    };
};
export type SearchPageFragment = {
    __typename: 'Page';
} & Pick<StorefrontAPI.Page, 'handle' | 'id' | 'title' | 'trackingParameters'>;
export type SearchArticleFragment = {
    __typename: 'Article';
} & Pick<StorefrontAPI.Article, 'handle' | 'id' | 'title' | 'trackingParameters'>;
export type PageInfoFragmentFragment = Pick<StorefrontAPI.PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>;
export type RegularSearchQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    endCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
    first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
    term: StorefrontAPI.Scalars['String']['input'];
    startCursor?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['String']['input']>;
}>;
export type RegularSearchQuery = {
    articles: {
        nodes: Array<{
            __typename: 'Article';
        } & Pick<StorefrontAPI.Article, 'handle' | 'id' | 'title' | 'trackingParameters'>>;
    };
    pages: {
        nodes: Array<{
            __typename: 'Page';
        } & Pick<StorefrontAPI.Page, 'handle' | 'id' | 'title' | 'trackingParameters'>>;
    };
    products: {
        nodes: Array<{
            __typename: 'Product';
        } & Pick<StorefrontAPI.Product, 'handle' | 'id' | 'publishedAt' | 'title' | 'trackingParameters' | 'vendor'> & {
            variants: {
                nodes: Array<Pick<StorefrontAPI.ProductVariant, 'id'> & {
                    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
                    price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
                    compareAtPrice?: StorefrontAPI.Maybe<Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>>;
                    selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
                    product: Pick<StorefrontAPI.Product, 'handle' | 'title'>;
                }>;
            };
        }>;
        pageInfo: Pick<StorefrontAPI.PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>;
    };
};
export type PredictiveArticleFragment = {
    __typename: 'Article';
} & Pick<StorefrontAPI.Article, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
    blog: Pick<StorefrontAPI.Blog, 'handle'>;
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
};
export type PredictiveCollectionFragment = {
    __typename: 'Collection';
} & Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
};
export type PredictivePageFragment = {
    __typename: 'Page';
} & Pick<StorefrontAPI.Page, 'id' | 'title' | 'handle' | 'trackingParameters'>;
export type PredictiveProductFragment = {
    __typename: 'Product';
} & Pick<StorefrontAPI.Product, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
    variants: {
        nodes: Array<Pick<StorefrontAPI.ProductVariant, 'id'> & {
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
            price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
        }>;
    };
};
export type PredictiveQueryFragment = {
    __typename: 'SearchQuerySuggestion';
} & Pick<StorefrontAPI.SearchQuerySuggestion, 'text' | 'styledText' | 'trackingParameters'>;
export type PredictiveSearchQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
    limit: StorefrontAPI.Scalars['Int']['input'];
    limitScope: StorefrontAPI.PredictiveSearchLimitScope;
    term: StorefrontAPI.Scalars['String']['input'];
    types?: StorefrontAPI.InputMaybe<Array<StorefrontAPI.PredictiveSearchType> | StorefrontAPI.PredictiveSearchType>;
}>;
export type PredictiveSearchQuery = {
    predictiveSearch?: StorefrontAPI.Maybe<{
        articles: Array<{
            __typename: 'Article';
        } & Pick<StorefrontAPI.Article, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
            blog: Pick<StorefrontAPI.Blog, 'handle'>;
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
        }>;
        collections: Array<{
            __typename: 'Collection';
        } & Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
            image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
        }>;
        pages: Array<{
            __typename: 'Page';
        } & Pick<StorefrontAPI.Page, 'id' | 'title' | 'handle' | 'trackingParameters'>>;
        products: Array<{
            __typename: 'Product';
        } & Pick<StorefrontAPI.Product, 'id' | 'title' | 'handle' | 'trackingParameters'> & {
            variants: {
                nodes: Array<Pick<StorefrontAPI.ProductVariant, 'id'> & {
                    image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>>;
                    price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
                }>;
            };
        }>;
        queries: Array<{
            __typename: 'SearchQuerySuggestion';
        } & Pick<StorefrontAPI.SearchQuerySuggestion, 'text' | 'styledText' | 'trackingParameters'>>;
    }>;
};
export type StoreRobotsQueryVariables = StorefrontAPI.Exact<{
    country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
    language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;
export type StoreRobotsQuery = {
    shop: Pick<StorefrontAPI.Shop, 'id'>;
};
