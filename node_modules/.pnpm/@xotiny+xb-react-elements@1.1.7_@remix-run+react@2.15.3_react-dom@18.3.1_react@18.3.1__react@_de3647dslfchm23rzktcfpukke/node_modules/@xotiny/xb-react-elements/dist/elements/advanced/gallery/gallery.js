import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const Gallery = ({ element, children, child }) => {
    const { settings } = element;
    const { grid } = element.settings;
    const colDesktop = child.length > 0 ? grid?.desktop?.value : 1;
    const colTablet = child.length > 0 ? grid?.tablet?.value ?? grid?.desktop?.value : 1;
    const colMobile = child.length > 0 ? grid?.mobile?.value ?? grid?.tablet?.value ?? grid?.desktop?.value : 1;
    const numberOfRowDesktop = settings.numberOfRow?.desktop?.value;
    const numberOfRowTablet = settings.numberOfRow?.tablet?.value ?? numberOfRowDesktop;
    const numberOfRowMobile = settings.numberOfRow?.mobile?.value ?? numberOfRowDesktop;
    const templateRowDesktop = Math.max(...child.map(chld => chld.settings?.gridArea?.row?.desktop?.value).filter(Boolean), child.length / colDesktop, numberOfRowDesktop);
    const templateRowTablet = Math.max(...child.map(chld => chld.settings?.row?.tablet?.value ?? chld.settings?.gridArea?.row?.desktop?.value).filter(Boolean), child.length / colTablet, numberOfRowTablet);
    const templateRowMobile = Math.max(...child
        .map(chld => chld.settings?.row?.mobile?.value ?? chld.settings?.gridArea?.row?.tablet?.value ?? chld.settings?.row?.desktop?.value)
        .filter(Boolean), child.length / colMobile, numberOfRowMobile);
    const verticalGapDesktop = settings.verticalGap?.desktop?.value;
    const verticalGapTablet = settings.verticalGap?.tablet?.value ?? verticalGapDesktop;
    const verticalGapMobile = settings.verticalGap?.mobile?.value ?? verticalGapTablet;
    const hotizontalGapDesktop = settings.horizontalGap?.desktop?.value;
    const hotizontalGapTablet = settings.horizontalGap?.tablet?.value ?? hotizontalGapDesktop;
    const hotizontalGapMobile = settings.horizontalGap?.mobile?.value ?? hotizontalGapTablet;
    const rowHeightDesktop = settings.rowHeight?.desktop?.value;
    const rowHeightTablet = settings.rowHeight?.tablet?.value ?? rowHeightDesktop;
    const rowHeightMobile = settings.rowHeight?.mobile?.value ?? rowHeightDesktop;
    function getStyle() {
        const style = Style.create({
            '--xb-gallery-row-height-desktop': `${rowHeightDesktop}px`,
            '--xb-gallery-row-height-tablet': `${rowHeightTablet}px`,
            '--xb-gallery-row-height-mobile': `${rowHeightMobile}px`,
        });
        return style.get();
    }
    function getGridStyle() {
        const style = Style.create({
            '--xb-col-desktop': colDesktop,
            '--xb-col-tablet': colTablet,
            '--xb-col-mobile': colMobile,
            '--xb-grid-row-desktop': templateRowDesktop,
            '--xb-grid-row-tablet': templateRowTablet,
            '--xb-grid-row-mobile': templateRowMobile,
            '--xb-layout-spacing-grid-horizontal-desktop': `${hotizontalGapDesktop}px`,
            '--xb-layout-spacing-grid-horizontal-tablet': `${hotizontalGapTablet}px`,
            '--xb-layout-spacing-grid-horizontal-mobile': `${hotizontalGapMobile}px`,
            '--xb-layout-spacing-grid-vertical-desktop': `${verticalGapDesktop}px`,
            '--xb-layout-spacing-grid-vertical-tablet': `${verticalGapTablet}px`,
            '--xb-layout-spacing-grid-vertical-mobile': `${verticalGapMobile}px`,
        });
        return style.get();
    }
    const observed = hash(JSON.stringify(child.map(chld => {
        return {
            ...chld,
            collapsed: false,
        };
    })));
    return (_jsxs("div", { ...elementAttr(element, {
            classNames: ['xb-gallery', settings.static?.class, settings?.modifier?.handle],
            style: {
                ...getStyle(),
            },
        }), children: [_jsx("style", { children: `
        .xb-gallery__portal-${element.id} xo-gallery-counter {
          color: ${settings.textColor};
        }
        .xb-gallery__portal-${element.id} xo-gallery-next svg, .xb-gallery__portal-${element.id} xo-gallery-prev svg, .xb-gallery__portal-${element.id} xo-modal-trigger svg{
          fill: ${settings.textColor};
        }
      ` }), _jsx("xo-gallery", { "xo-observed": observed, "xo-sync": "false", "xo-backdrop-color": settings.overlayColor, "xo-portal-class": `xb-gallery__portal-${element.id}`, "xo-animate": settings.popupAnimate, children: _jsx("div", { className: "xb-grid", style: { ...getGridStyle() }, children: children }) })] }));
};
