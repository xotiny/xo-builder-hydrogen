import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { createElement } from 'react';
import { useSettings } from "../../../hooks/use-settings";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { imageUtils } from './image-utils';
import './styles';
export const Image = ({ element }) => {
    const { settings } = element;
    const { classLink, classMaskContent, classMaskImage, tagName, placeholderImage, containerStyle } = imageUtils({
        element,
    });
    const { globalSettings: global } = useSettings();
    function renderLoading() {
        const loaderType = global?.imageLoader?.type ?? 'loader-1';
        const loaderColor = global?.imageLoader?.color ?? '#000';
        const loaderBackgroundColor = global?.imageLoader?.backgroundColor ?? 'rgba(0, 0, 0, 0.1)';
        const loaderDuration = global?.imageLoader?.duration?.value ?? 1600;
        const loaderSize = global?.imageLoader?.size?.value ?? 40;
        switch (loaderType) {
            case 'loader-1':
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-1", style: { '--color': loaderColor, '--duration': loaderDuration, '--size': loaderSize }, children: _jsx("span", {}) }) }) }));
            case 'loader-2':
                const loaderSize2 = Math.round(loaderSize / 2);
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-2", style: { '--color': loaderColor, '--duration': loaderDuration, '--stroke-width': 2, '--size': loaderSize2 }, children: _jsx("div", { children: _jsx("span", {}) }) }) }) }));
            case 'loader-3':
                const loaderSize3 = Math.round(loaderSize / 4);
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-3", style: { '--color': loaderColor, '--duration': loaderDuration, '--size': loaderSize3 }, children: _jsx("span", {}) }) }) }));
        }
    }
    return createElement(tagName, {
        ...elementAttr(element, {
            classNames: ['xb-image', classMaskImage, classLink, settings.static?.class, settings?.modifier?.handle],
            style: containerStyle,
        }),
        children: (_jsxs(_Fragment, { children: [settings.imageCaptionEnabled === 'yes' && settings.captionPosition === 'top' && (_jsx("figcaption", { className: "xb-image__caption", children: settings.caption })), _jsxs("div", { className: classMaskContent, style: {
                        position: 'relative',
                        '--xb-image-mask-svg': `url('${settings.maskImageStyle || ''}')`,
                    }, children: [_jsx("img", { className: "xb-image__img", is: "xo-lazyload", "xo-src": settings.image?.url ?? placeholderImage, loading: "lazy", alt: settings.alt, width: settings.image?.width, height: settings.image?.height, "xo-intrinsic-width": settings.image?.width, "xo-intrinsic-height": settings.image?.height, "xo-fallback-width": "400" }), renderLoading()] }), settings.imageCaptionEnabled === 'yes' && settings.captionPosition === 'bottom' && (_jsx("figcaption", { className: "xb-image__caption", children: settings.caption }))] })),
    });
};
