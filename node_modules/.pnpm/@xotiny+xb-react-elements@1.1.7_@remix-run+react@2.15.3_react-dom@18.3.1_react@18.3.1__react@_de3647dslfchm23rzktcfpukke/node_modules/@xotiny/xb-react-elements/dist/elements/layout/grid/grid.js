import { jsx as _jsx } from "react/jsx-runtime";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
export const Grid = ({ element, child, children }) => {
    const { settings } = element;
    const { grid } = element.settings;
    const templateRowDesktop = Math.max(...child.map(child => child.settings?.gridArea?.row?.desktop?.value).filter(Boolean), 1);
    const templateRowTablet = Math.max(...child.map(child => child.settings?.gridArea?.row?.tablet?.value ?? 1).filter(Boolean), 1);
    const templateRowMobile = Math.max(...child.map(child => child.settings?.gridArea?.row?.mobile?.value ?? 1).filter(Boolean), 1);
    const colDesktop = child.length > 0 ? grid?.desktop?.value : 1;
    const colTablet = child.length > 0 ? grid?.tablet?.value ?? grid?.desktop?.value : 1;
    const colMobile = child.length > 0 ? grid?.mobile?.value ?? grid?.tablet?.value ?? grid?.desktop?.value : 1;
    const verticalGapDesktop = settings.verticalGap?.desktop?.value ?? 0;
    const verticalGapTablet = settings.verticalGap?.tablet?.value ?? verticalGapDesktop;
    const verticalGapMobile = settings.verticalGap?.mobile?.value ?? verticalGapTablet;
    const hotizontalGapDesktop = settings.horizontalGap?.desktop?.value ?? 0;
    const hotizontalGapTablet = settings.horizontalGap?.tablet?.value ?? hotizontalGapDesktop;
    const hotizontalGapMobile = settings.horizontalGap?.mobile?.value ?? hotizontalGapTablet;
    const styles = {
        '--xb-col-desktop': colDesktop,
        '--xb-col-tablet': colTablet,
        '--xb-col-mobile': colMobile,
        '--xb-grid-row-desktop': templateRowDesktop,
        '--xb-grid-row-tablet': templateRowTablet,
        '--xb-grid-row-mobile': templateRowMobile,
        '--xb-layout-spacing-grid-horizontal-desktop': `${hotizontalGapDesktop}px`,
        '--xb-layout-spacing-grid-horizontal-tablet': `${hotizontalGapTablet}px`,
        '--xb-layout-spacing-grid-horizontal-mobile': `${hotizontalGapMobile}px`,
        '--xb-layout-spacing-grid-vertical-desktop': `${verticalGapDesktop}px`,
        '--xb-layout-spacing-grid-vertical-tablet': `${verticalGapTablet}px`,
        '--xb-layout-spacing-grid-vertical-mobile': `${verticalGapMobile}px`,
    };
    return (_jsx("div", { ...elementAttr(element, {
            classNames: ['xb-grid', settings.static?.class],
            style: styles,
        }), children: children }));
};
