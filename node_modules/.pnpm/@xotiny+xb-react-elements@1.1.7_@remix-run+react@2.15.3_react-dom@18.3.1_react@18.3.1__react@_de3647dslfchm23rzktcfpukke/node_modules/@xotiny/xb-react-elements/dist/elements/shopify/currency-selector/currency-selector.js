import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useFetcher, useLocation, useRouteLoaderData } from '@remix-run/react';
import { CartForm } from '@shopify/hydrogen';
import { useCallback, useEffect, useRef } from 'react';
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { classNames } from "../../../utils/class-names";
import './styles';
const DEFAULT_LOCALE = {
    label: 'United States (USD $)',
    language: 'EN',
    country: 'US',
    currency: 'USD',
};
export const CurrencySelector = ({ element }) => {
    const { settings } = element;
    const fetcher = useFetcher();
    const closeRef = useRef(null);
    const rootData = useRouteLoaderData('root');
    const selectedLocale = rootData?.selectedLocale ?? DEFAULT_LOCALE;
    const { pathname, search } = useLocation();
    const pathWithoutLocale = `${pathname.replace(selectedLocale.pathPrefix, '')}${search}`;
    const countries = (fetcher.data ?? {});
    const defaultLocale = countries?.default;
    const defaultLocalePrefix = defaultLocale ? `${defaultLocale?.language}-${defaultLocale?.country}` : '';
    const flagClass = `xb-currency-selector__flag-${settings.flagShape}`;
    const placementDesktop = settings.placement.desktop;
    const placementTablet = settings.placement.tablet ?? placementDesktop;
    const placementMobile = settings.placement.mobile ?? placementTablet;
    useEffect(() => {
        if (fetcher.data || fetcher.state === 'loading')
            return;
        fetcher.load('/api/countries');
    }, [fetcher]);
    const closeDropdown = useCallback(() => {
        closeRef.current?.removeAttribute('open');
    }, []);
    const getCountryUrlPath = ({ countryLocale, defaultLocalePrefix, pathWithoutLocale, }) => {
        let countryPrefixPath = '';
        const countryLocalePrefix = `${countryLocale.language}-${countryLocale.country}`;
        if (countryLocalePrefix !== defaultLocalePrefix) {
            countryPrefixPath = `/${countryLocalePrefix.toLowerCase()}`;
        }
        return `${countryPrefixPath}${pathWithoutLocale}`;
    };
    return (_jsxs("div", { ...elementAttr(element, {
            classNames: ['xb-currency-selector', settings?.modifier?.handle, settings.static?.class, 'relative'],
        }), children: [_jsxs("xo-popover-trigger", { class: classNames('xb-currency-selector__trigger', flagClass), "xo-name": element.id, tabIndex: 0, role: "button", children: [_jsx("span", { className: "xb-currency-selector__name", children: selectedLocale.label }), _jsx("svg", { className: "xb-currency-selector__icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", children: _jsx("path", { d: "M239 401c9.4 9.4 24.6 9.4 33.9 0L465 209c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-175 175L81 175c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9L239 401z" }) })] }), _jsx("xo-popover", { "xo-name": element.id, class: "xb-currency-selector__wrapper-content", "xo-placement": placementDesktop, "xo-breakpoints": `{
            768: {
              placement: '${placementMobile}',
            },
            992: {
              placement: '${placementTablet}',
            },
          }`, "xo-portal": true, children: _jsx("div", { className: "xb-currency-selector__content xb-scrollbar", children: countries &&
                        Object.keys(countries).map(countryPath => {
                            const countryLocale = countries[countryPath];
                            const isSelected = countryLocale.language === selectedLocale.language && countryLocale.country === selectedLocale.country;
                            const countryUrlPath = getCountryUrlPath({
                                countryLocale,
                                defaultLocalePrefix,
                                pathWithoutLocale,
                            });
                            return (_jsx(CartForm, { route: "/cart", action: CartForm.ACTIONS.BuyerIdentityUpdate, inputs: {
                                    buyerIdentity: {
                                        countryCode: countryLocale.country,
                                    },
                                }, children: _jsxs("label", { className: classNames('xb-currency-selector__item', isSelected ? 'xb-currency-selector__item--active' : ''), children: [_jsx("input", { type: "hidden", name: "redirectTo", value: countryUrlPath }), _jsx("button", { className: "xb-currency-selector__name", type: "submit", onClick: closeDropdown, children: countryLocale.label })] }) }, countryPath));
                        }) }) })] }));
};
