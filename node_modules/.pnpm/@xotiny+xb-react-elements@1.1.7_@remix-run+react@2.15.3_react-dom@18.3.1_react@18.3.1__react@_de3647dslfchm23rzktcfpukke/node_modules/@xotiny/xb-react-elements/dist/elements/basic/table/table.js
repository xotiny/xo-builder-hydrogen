import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { classNames } from "../../../utils/class-names";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const Table = ({ element }) => {
    const { settings } = element;
    const { fit_table } = element.settings;
    const classFullWidth = fit_table === 'yes' ? 'xb-table--full-width' : '';
    function getStyle() {
        const style = Style.create({
            '--table-cell-color': settings.cell_color,
            '--table-header-color': settings.header_color,
            '--table-border-color': settings.border_color,
            '--td-vertical-padding': `${settings.td_vertical_padding.value}${settings.td_vertical_padding.unit}`,
            '--td-horizontal-padding': `${settings.td_horizontal_padding.value}${settings.td_horizontal_padding.unit}`,
            '--th-vertical-padding': `${settings.th_vertical_padding.value}${settings.th_vertical_padding.unit}`,
            '--th-horizontal-padding': `${settings.th_horizontal_padding.value}${settings.th_horizontal_padding.unit}`,
        });
        return style.get();
    }
    return (_jsx("div", { ...elementAttr(element, {
            classNames: ['xb-table-container', settings.modifier?.handle, settings.static?.class],
            style: { ...getStyle() },
        }), children: _jsxs("table", { className: classNames('xb-table', classFullWidth), children: [_jsx("thead", { children: settings.table.head.map((row, rowIndex) => {
                        return (_jsx("tr", { className: settings.table.head.length % 2 === 0 ? 'head--even' : 'head--odd', children: row.data.map((col, colIndex) => {
                                return (_jsx("th", { "text-binding": `table.head.[${rowIndex}].data.[${colIndex}].data`, children: col.data || '...' }, colIndex));
                            }) }, rowIndex));
                    }) }), _jsx("tbody", { children: settings.table.body.map((row, rowIndex) => {
                        return (_jsx("tr", { children: row.data.map((col, colIndex) => {
                                if (colIndex < settings.table.headColumn) {
                                    return (_jsxs("th", { "text-binding": `table.body.[${rowIndex}].data.[${colIndex}].data`, children: ["$", col.data || '...'] }, colIndex));
                                }
                                return (_jsxs("td", { "text-binding": `table.body.[${rowIndex}].data.[${colIndex}].data`, children: ["$", col.data || '...'] }, colIndex));
                            }) }, rowIndex));
                    }) })] }) }));
};
