import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { classNames } from "../../../utils/class-names";
import { Style } from "../../../utils/template-helpers/style";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import './styles';
export const Countdown = ({ element, children }) => {
    const { settings } = element;
    const observed = hash(`${JSON.stringify(element.settings)}`);
    const endDateTimestamp = new Date(settings.date_picker).getTime();
    const currentTimestamp = new Date().getTime();
    const directionClass = `xb-countdown--${settings.direction}`;
    const spacingDesktop = settings.itemSpacing.desktop.value;
    const spacingTablet = settings.itemSpacing?.tablet?.value ?? settings.itemSpacing.desktop.value;
    const spacingMobile = settings.itemSpacing?.mobile?.value ?? settings.itemSpacing?.tablet?.value ?? settings.itemSpacing.desktop.value;
    const isHidden = settings.hide_on_finish === 'yes' && endDateTimestamp <= currentTimestamp;
    function getStyle() {
        const style = Style.create({
            '--xb-countdown-item-spacing-desktop': `${spacingDesktop}px`,
            '--xb-countdown-item-spacing-tablet': `${spacingTablet}px`,
            '--xb-countdown-item-spacing-mobile': `${spacingMobile}px`,
        });
        return style.get();
    }
    return (_jsxs("div", { ...elementAttr(element, {
            classNames: ['xo-countdown-container', settings.static?.class, settings?.modifier?.handle],
            style: {
                ...getStyle(),
            },
        }), children: [isHidden && _jsxs("div", { className: classNames('xo-countdown__label', element.id, settings?.styles?.handle), children: ["$", settings.on_finish_label] }), !isHidden && (_jsx("xo-countdown", { "xo-observed": observed, "xo-name": element.id, "xo-zero-pad": settings.zero_pad.value, "xo-timestamp": endDateTimestamp, class: classNames('xb-countdown', directionClass), children: children }))] }));
};
