import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createElement } from 'react';
import { classNames } from "../../../utils/class-names";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { buttonUtils } from './button-utils';
import './styles';
export const Button = ({ element, children }) => {
    const { settings } = element;
    const { actionEnabled, classLink, fullWidthClass, tagName } = buttonUtils({ element });
    let buttonIcon = null;
    if (settings.iconEnabled) {
        buttonIcon = children;
    }
    return createElement(tagName, {
        ...elementAttr(element, {
            classNames: ['xb-button', classLink, settings.static?.class, fullWidthClass],
            style: { '--xb-button-gap': `${settings.iconSpacing.value}px` },
        }, false),
        ...(!actionEnabled && settings.static.type && settings.static.type !== '' ? { type: settings.static.type } : {}),
        ...(!actionEnabled && settings.static.formId && settings.static.formId !== '' ? { form: settings.static.formId } : {}),
        ...(!actionEnabled && settings.static.name && settings.static.name !== '' ? { name: settings.static.name } : {}),
        role: 'button',
        children: (_jsxs("span", { className: classNames('xb-button__content', element.id, settings?.modifier?.handle), children: [settings.iconPosition === 'left' ? buttonIcon : null, _jsx("span", { dangerouslySetInnerHTML: { __html: settings.buttonText } }), settings.iconPosition === 'right' ? buttonIcon : null] })),
    });
};
