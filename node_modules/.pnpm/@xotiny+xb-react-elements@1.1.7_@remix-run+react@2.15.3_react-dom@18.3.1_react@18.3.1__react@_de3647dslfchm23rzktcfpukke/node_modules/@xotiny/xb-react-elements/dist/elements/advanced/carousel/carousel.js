import { jsx as _jsx } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
export const Carousel = ({ element, child, children }) => {
    const { settings } = element;
    const observed = hash(`${JSON.stringify(element.settings)}${JSON.stringify(child.map(child => {
        return {
            ...child,
            collapsed: false,
        };
    }))}`);
    const { slider_displayed, slider_per_move, slider_speed, slider_rewind } = element.settings;
    const spacingDesktop = settings.itemSpacing.desktop.value;
    const spacingTablet = settings.itemSpacing?.tablet?.value ?? settings.itemSpacing.desktop.value;
    const spacingMobile = settings.itemSpacing?.mobile?.value ?? settings.itemSpacing?.tablet?.value ?? settings.itemSpacing.desktop.value;
    const autoplayAttr = settings.enable_autoplay === 'yes' ? { 'xo-autoplay': settings.slider_auto_play.value * 1000 } : {};
    function getStyle() {
        const style = Style.create({
            '--xo-per-view': slider_displayed.desktop.value,
            '--xo-gap': `${spacingDesktop}px`,
        });
        return style.get();
    }
    return (_jsx("xo-carousel", { ...elementAttr(element, {
            classNames: ['xb-carousel', settings.static?.class],
            style: {
                ...getStyle(),
            },
            isCustomElement: true,
        }), "xo-name": element.id, "xo-speed": slider_speed.value, "xo-observed": observed, "xo-per-view": slider_displayed.desktop.value, "xo-per-move": slider_per_move.value, "xo-gap": spacingDesktop, "xo-rewind": slider_rewind === 'yes', ...autoplayAttr, "xo-render-bullet": "<div class='pagination__inner'> <span class='pagination__inner-content'></span> </div>", "xo-overflow": settings.slider_overflow, "xo-breakpoints": `{
        768: {
          perView: ${slider_displayed.mobile.value},
          gap: ${spacingMobile},
        },
        992: {
          perView: ${slider_displayed.tablet.value},
          gap: ${spacingTablet},
        },
      }`, children: children }));
};
