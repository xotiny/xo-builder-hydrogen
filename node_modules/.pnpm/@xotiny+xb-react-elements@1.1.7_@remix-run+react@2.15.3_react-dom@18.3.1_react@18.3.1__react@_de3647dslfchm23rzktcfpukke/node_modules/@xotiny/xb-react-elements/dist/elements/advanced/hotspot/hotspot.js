import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { createElement } from 'react';
import { useSettings } from "../../../hooks/use-settings";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { hotspotUtils } from './hotspot-utils';
import './styles';
export const Hotspot = ({ element, children }) => {
    const { settings } = element;
    const { desktopImage, tabletImage, mobileImage, getObjectFit, getRatio, tagName } = hotspotUtils({ element });
    const { globalSettings: global } = useSettings();
    function renderLoading() {
        const loaderType = global?.imageLoader?.type ?? 'loader-1';
        const loaderColor = global?.imageLoader?.color ?? '#000';
        const loaderBackgroundColor = global?.imageLoader?.backgroundColor ?? 'rgba(0, 0, 0, 0.1)';
        const loaderDuration = global?.imageLoader?.duration?.value ?? 1600;
        const loaderSize = global?.imageLoader?.size?.value ?? 40;
        switch (loaderType) {
            case 'loader-1':
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-1", style: { '--color': loaderColor, '--duration': loaderDuration, '--size': loaderSize }, children: _jsx("span", {}) }) }) }));
            case 'loader-2':
                const loaderSize2 = Math.round(loaderSize / 2);
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-2", style: { '--color': loaderColor, '--duration': loaderDuration, '--stroke-width': 2, '--size': loaderSize2 }, children: _jsx("div", { children: _jsx("span", {}) }) }) }) }));
            case 'loader-3':
                const loaderSize3 = Math.round(loaderSize / 4);
                return (_jsx("div", { className: "xb-image__overlay xo-lazyload-overlay", children: _jsx("div", { className: "xb-image__loading", style: { '--xb-image-loading-background': loaderBackgroundColor }, children: _jsx("div", { className: "xo-loader-3", style: { '--color': loaderColor, '--duration': loaderDuration, '--size': loaderSize3 }, children: _jsx("span", {}) }) }) }));
        }
    }
    return createElement(tagName, {
        ...elementAttr(element, {
            classNames: ['xo-hotspot-container', settings.static?.class],
            style: {
                ...getRatio(),
                ...getObjectFit(),
            },
        }),
        href: settings.enable_link ? settings.hotspot_link : '',
        target: settings.enable_link ? '_blank' : '',
        rel: 'noreferrer',
    }, _jsxs(_Fragment, { children: [_jsx("img", { is: "xo-lazyload", loading: "lazy", "xo-fallback-width": "400", className: "xb-hotspot__image xo-image__img xo-image__img--desktop", "xo-src": desktopImage.url, alt: desktopImage.alt, width: desktopImage.width, height: desktopImage.height, "xo-intrinsic-width": desktopImage.width, "xo-intrinsic-height": desktopImage.height }), _jsx("img", { is: "xo-lazyload", loading: "lazy", "xo-fallback-width": "400", className: "xb-hotspot__image xo-image__img xo-image__img--tablet", "xo-src": tabletImage.url, alt: tabletImage.alt, width: tabletImage.width, height: tabletImage.height, "xo-intrinsic-width": tabletImage.width, "xo-intrinsic-height": tabletImage.height }), _jsx("img", { is: "xo-lazyload", loading: "lazy", className: "xb-hotspot__image xo-image__img xo-image__img--mobile", "xo-fallback-width": "400", "xo-src": mobileImage.url, alt: mobileImage.alt, width: mobileImage.width, height: mobileImage.height, "xo-intrinsic-width": mobileImage.width, "xo-intrinsic-height": mobileImage.height }), renderLoading(), children] }));
};
