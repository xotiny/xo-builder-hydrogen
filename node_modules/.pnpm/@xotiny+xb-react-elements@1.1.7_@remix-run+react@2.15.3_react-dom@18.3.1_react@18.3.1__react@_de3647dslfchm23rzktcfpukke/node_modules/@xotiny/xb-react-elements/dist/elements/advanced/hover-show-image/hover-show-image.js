import { jsx as _jsx } from "react/jsx-runtime";
import { createElement } from 'react';
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const HoverShowImage = ({ element, parent }) => {
    const { settings } = element;
    const imageWidthDesktop = `${settings.imageWidth.desktop.value}${settings.imageWidth.desktop.unit}`;
    const imageWidthTablet = `${settings.imageWidth.tablet?.value ?? settings.imageWidth.desktop.value}${settings.imageWidth.tablet?.unit ?? settings.imageWidth.desktop.unit}`;
    const imageWidthMobile = `${settings.imageWidth.mobile?.value ?? settings.imageWidth.desktop.value}${settings.imageWidth.mobile?.unit ?? settings.imageWidth.desktop.unit}`;
    const imageHeightDesktop = settings.imageHeight.desktop?.value;
    const imageHeightTablet = settings.imageHeight.tablet?.value ?? imageHeightDesktop;
    const imageHeightMobile = settings.imageHeight.mobile?.value ?? imageHeightTablet;
    function getHeightUnit(screen) {
        if (screen === 'tablet') {
            return settings.imageHeight.tablet ? settings.imageHeight.tablet?.unit : settings.imageHeight.desktop?.unit;
        }
        if (screen === 'mobile') {
            return settings.imageHeight.mobile
                ? settings.imageHeight.mobile?.unit
                : settings.imageHeight.tablet
                    ? settings.imageHeight.tablet?.unit
                    : settings.imageHeight.desktop?.unit;
        }
        return settings.imageHeight.desktop?.unit;
    }
    function getRatio() {
        if (settings.imageRatio === 'square') {
            const ratio = Style.create({
                '--xb-image-aspect-ratio-desktop': 1,
                '--xb-image-aspect-ratio-tablet': 1,
                '--xb-image-aspect-ratio-mobile': 1,
            });
            return ratio.get();
        }
        else if (settings.imageRatio === 'custom') {
            const ratio = Style.create({});
            if (settings.imageHeight.desktop?.unit === '%') {
                ratio.set({
                    '--xb-image-aspect-ratio-desktop': `100 / ${imageHeightDesktop}`,
                });
            }
            else {
                ratio.set({
                    '--xb-image-aspect-ratio-desktop': 'unset',
                    '--xb-image-height-desktop': `${imageHeightDesktop}px`,
                });
            }
            if (getHeightUnit('tablet') === '%') {
                ratio.set({
                    '--xb-image-aspect-ratio-tablet': `100 / ${imageHeightTablet}`,
                });
            }
            else {
                ratio.set({
                    '--xb-image-aspect-ratio-tablet': 'unset',
                    '--xb-image-height-tablet': `${imageHeightTablet}px`,
                });
            }
            if (getHeightUnit('mobile') === '%') {
                ratio.set({
                    '--xb-image-aspect-ratio-mobile': `100 / ${imageHeightMobile}`,
                });
            }
            else {
                ratio.set({
                    '--xb-image-aspect-ratio-mobile': 'unset',
                    '--xb-image-height-mobile': `${imageHeightMobile}px`,
                });
            }
            return ratio.get();
        }
        return settings.image?.width && settings.image?.height
            ? Style.create({
                '--xb-image-aspect-ratio-desktop': `${settings.image?.width} / ${settings.image?.height}`,
                '--xb-image-aspect-ratio-tablet': `${settings.image?.width} / ${settings.image?.height}`,
                '--xb-image-aspect-ratio-mobile': `${settings.image?.width} / ${settings.image?.height}`,
            }).get()
            : '';
    }
    function getObjectFit() {
        if (settings.maskImageEnabled === 'no' && settings.imageObjectFit === 'contain') {
            return Style.create({
                '--xb-hover-image-object-fit': 'contain',
            }).get();
        }
        return Style.create({
            '--xb-hover-image-object-fit': 'cover',
        }).get();
    }
    function getStyle() {
        const style = Style.create({
            '--xb-image-width-desktop': imageWidthDesktop,
            '--xb-image-width-tablet': imageWidthTablet,
            '--xb-image-width-mobile': imageWidthMobile,
            '--xb-image-caption-background-color': settings.captionBackgroundColor,
        });
        if (settings.imageSize === 'full') {
            style.set({
                width: '100%',
            });
        }
        return style.get();
    }
    const placeholderImage = 'https://cdn.shopify.com/s/files/1/0677/7900/2622/files/Default_image.png?v=1713954435';
    const actionEnabled = settings.action?.actionType !== 'no';
    const tagName = actionEnabled ? 'a' : 'figure';
    const classLink = actionEnabled ? 'xb-link' : '';
    const id = parent?.id;
    return (_jsx("xo-cursor-item", { class: "xb-hover-show__image-cursor-item", "xo-name": id, children: createElement(tagName, {
            ...elementAttr(element, {
                classNames: [
                    'xb-hover-show__image',
                    `xb-hover-show__image--${parent?.settings.image_animation}`,
                    classLink,
                    settings.static?.class,
                    settings?.modifier?.handle,
                ],
                style: { ...getStyle(), ...getRatio(), ...getObjectFit() },
            }),
        }, _jsx("div", { className: "xb-image__static", style: { position: 'relative' }, children: _jsx("img", { className: "xb-image__static", is: "xo-lazyload", "xo-src": settings.image?.url ?? placeholderImage, loading: "lazy", alt: settings.alt ?? settings.image?.alt ?? `Image ${element.id}`, width: settings.image?.width, height: settings.image?.height, "xo-intrinsic-width": settings.image?.width, "xo-intrinsic-height": settings.image?.height, "xo-fallback-width": "400", draggable: "false" }) })) }));
};
