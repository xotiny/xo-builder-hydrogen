import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useLocation, useNavigate } from '@remix-run/react';
import { useProduct, useProductOptionValue } from "../../../hooks/use-shopify-data";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { isColorName } from "../../../utils/is-color-name/is-color-name";
export const ProductSwatchesValueItem = ({ element }) => {
    const { settings } = element;
    const data = useProductOptionValue();
    const { selectedVariant, product, setSelectedVariant, isProductPage } = useProduct();
    const location = useLocation();
    const navigate = useNavigate();
    if (!data || !selectedVariant) {
        return null;
    }
    const { name, value, swatchColorEnabled } = data;
    const optionIndex = selectedVariant.selectedOptions.findIndex(option => option.name === name);
    const option = selectedVariant.selectedOptions[optionIndex];
    const isActive = option?.value == value;
    const activeClass = isActive ? 'xb-product-swatches__value-item--active' : '';
    const { selectedOptions } = selectedVariant;
    const currentOption = selectedOptions.map(item => (item.name === name ? { name, value } : item));
    const variant = product?.variants?.nodes?.find?.(variant => currentOption.every((item, index) => item.value === variant?.selectedOptions?.[index]?.value));
    const disabledClass = variant ? '' : 'xb-product-swatches__value-item--disabled';
    const colorItemClass = swatchColorEnabled && name === 'Color' ? 'xb-product-swatches__value-item--color' : '';
    const handleChangeVariant = () => {
        if (!variant) {
            return;
        }
        if (isProductPage) {
            const link = getVariantUrl();
            if (link) {
                setSelectedVariant(variant);
                navigate(link);
            }
        }
        else {
            setSelectedVariant(variant);
        }
    };
    const getVariantUrl = () => {
        if (!variant) {
            return;
        }
        const params = new URLSearchParams();
        const { selectedOptions } = variant;
        selectedOptions.forEach(item => {
            params.set(item.name, item.value);
        });
        return `${location.pathname}?${params.toString()}`;
    };
    const productOptionSwatch = () => {
        const enabled = swatchColorEnabled && name === 'Color';
        // const image = swatch?.image?.previewImage?.url;
        // const color = swatch?.color;
        if (!isColorName(value) || !enabled)
            return value;
        return (_jsx("div", { className: "xb-product-swatches__value-item-background", "aria-label": value, style: {
                backgroundColor: value || 'transparent',
            } }));
    };
    return (_jsxs("div", { ...elementAttr(element, {
            classNames: [settings.static?.class, 'xb-product-swatches__value-item', disabledClass, activeClass, colorItemClass],
        }), onClick: handleChangeVariant, children: [productOptionSwatch(), _jsx("svg", { className: "xb-product-swatches__diagonal", xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%", children: _jsx("line", { x1: "100%", y1: "0", x2: "0", y2: "100%", stroke: "currentColor", strokeWidth: "1" }) })] }));
};
