import { jsx as _jsx } from "react/jsx-runtime";
import { classNames } from "../../../utils/class-names";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const Drr = ({ element, children }) => {
    const { settings } = element;
    const { x, y, width, height, angle } = settings;
    const parallaxEnabled = settings.parallaxEnabled === 'yes';
    const zIndex = settings?.zIndex?.value == null ? 99 : settings?.zIndex?.value + 99;
    const desktopKeyframes = JSON.stringify(settings.keyframes?.desktop)?.replace(/"/g, "'");
    const tabletKeyframes = JSON.stringify(settings.keyframes?.tablet)?.replace(/"/g, "'");
    const mobileKeyframes = JSON.stringify(settings.keyframes?.mobile)?.replace(/"/g, "'");
    let parallaxBreakpoints = {};
    const parallaxBreakpointsArr = [];
    const hasParallaxBreakpoints = tabletKeyframes || mobileKeyframes;
    if (tabletKeyframes) {
        parallaxBreakpointsArr.push(`991: ${tabletKeyframes}`);
    }
    if (mobileKeyframes) {
        parallaxBreakpointsArr.push(`767: ${mobileKeyframes}`);
    }
    if (hasParallaxBreakpoints) {
        parallaxBreakpoints = { 'xo-breakpoints': `{ ${parallaxBreakpointsArr.join(', ')} }` };
    }
    function getStyle() {
        const style = Style.create({
            '--xb-ddr-z-index': `${zIndex}`,
            '--xb-ddr-real-width-desktop': `${width?.desktop?.value}%`,
            '--xb-ddr-real-height-desktop': `${height?.desktop?.value}%`,
            '--xb-ddr-real-x-desktop': `${x?.desktop?.value}%`,
            '--xb-ddr-real-y-desktop': `${y?.desktop?.value}%`,
            '--xb-ddr-real-angle-desktop': `${angle?.desktop?.value}deg`,
            '--xb-ddr-real-width-tablet': `${width?.tablet?.value ?? width?.desktop?.value}%`,
            '--xb-ddr-real-height-tablet': `${height?.tablet?.value ?? height?.desktop?.value}%`,
            '--xb-ddr-real-x-tablet': `${x?.tablet?.value ?? x?.desktop?.value}%`,
            '--xb-ddr-real-y-tablet': `${y?.tablet?.value ?? y?.desktop?.value}%`,
            '--xb-ddr-real-angle-tablet': `${angle?.tablet?.value ?? angle?.desktop?.value}deg`,
            '--xb-ddr-real-width-mobile': `${width?.mobile?.value ?? width?.tablet?.value ?? width?.desktop?.value}%`,
            '--xb-ddr-real-height-mobile': `${height?.mobile?.value ?? height?.tablet?.value ?? height?.desktop?.value}%`,
            '--xb-ddr-real-x-mobile': `${x?.mobile?.value ?? x?.tablet?.value ?? x?.desktop?.value}%`,
            '--xb-ddr-real-y-mobile': `${y?.mobile?.value ?? y?.tablet?.value ?? y?.desktop?.value}%`,
            '--xb-ddr-real-angle-mobile': `${angle?.mobile?.value ?? angle?.tablet?.value ?? angle?.desktop?.value}deg`,
        });
        return style.get();
    }
    function getHorizontalAlignment() {
        const alignment = Style.create({
            '--xb-ddr-horizontal-alignment-desktop': settings.horizontalAlignment.desktop,
        });
        if (settings.horizontalAlignment?.tablet) {
            alignment.set({
                '--xb-ddr-horizontal-alignment-tablet': settings.horizontalAlignment?.tablet,
            });
        }
        else {
            alignment.set({
                '--xb-ddr-horizontal-alignment-tablet': settings.horizontalAlignment?.desktop,
            });
        }
        if (settings.horizontalAlignment?.mobile) {
            alignment.set({
                '--xb-ddr-horizontal-alignment-mobile': settings.horizontalAlignment?.mobile,
            });
        }
        else {
            alignment.set({
                '--xb-ddr-horizontal-alignment-mobile': settings.horizontalAlignment?.desktop,
            });
        }
        return alignment.get();
    }
    function getVerticalAlignment() {
        const alignment = Style.create({
            '--xb-ddr-vertical-alignment-desktop': settings.verticalAlignment.desktop,
        });
        if (settings.verticalAlignment?.tablet) {
            alignment.set({
                '--xb-ddr-vertical-alignment-tablet': settings.verticalAlignment?.tablet,
            });
        }
        else {
            alignment.set({
                '--xb-ddr-vertical-alignment-tablet': settings.verticalAlignment?.desktop,
            });
        }
        if (settings.verticalAlignment?.mobile) {
            alignment.set({
                '--xb-ddr-vertical-alignment-mobile': settings.verticalAlignment?.mobile,
            });
        }
        else {
            alignment.set({
                '--xb-ddr-vertical-alignment-mobile': settings.verticalAlignment?.desktop,
            });
        }
        return alignment.get();
    }
    const lerpEase = {
        'xo-lerp-ease': settings?.lerp_ease?.value,
    };
    function getAttrs() {
        return parallaxEnabled
            ? {
                className: classNames('xb-parallax-scroll', 'xb-drr'),
                style: {
                    ...getStyle(),
                    ...getHorizontalAlignment(),
                    ...getVerticalAlignment(),
                },
            }
            : {
                className: 'xb-drr',
                style: {
                    ...getStyle(),
                    ...getHorizontalAlignment(),
                    ...getVerticalAlignment(),
                },
            };
    }
    return (_jsx("div", { ...getAttrs, children: parallaxEnabled ? (_jsx("xo-parallax", { children: _jsx("xo-parallax-scroll", { "xo-keyframes": desktopKeyframes, ...parallaxBreakpoints, ...lerpEase, children: children }) })) : (children) }));
};
