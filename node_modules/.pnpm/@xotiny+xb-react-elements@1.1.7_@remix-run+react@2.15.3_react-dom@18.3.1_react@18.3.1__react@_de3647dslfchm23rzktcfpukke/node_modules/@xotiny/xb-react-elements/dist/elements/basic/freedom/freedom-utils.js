import { Style } from "../../../utils/template-helpers/style";
export function freedomUtils({ element }) {
    const { settings } = element;
    const CSS_VARS = {
        Z_INDEX: '--xb-fzi',
        WIDTH_DESKTOP: '--xb-fwd',
        HEIGHT_DESKTOP: '--xb-fhd',
        X_DESKTOP: '--xb-fxd',
        Y_DESKTOP: '--xb-fyd',
        ANGLE_DESKTOP: '--xb-fad',
        RATIO_DESKTOP: '--xb-fard',
        HORIZONTAL_ALIGNMENT_DESKTOP: '--xb-fhad',
        VERTICAL_ALIGNMENT_DESKTOP: '--xb-fvad',
        WIDTH_TABLET: '--xb-fwt',
        HEIGHT_TABLET: '--xb-fht',
        X_TABLET: '--xb-fxt',
        Y_TABLET: '--xb-fyt',
        ANGLE_TABLET: '--xb-fat',
        RATIO_TABLET: '--xb-fart',
        HORIZONTAL_ALIGNMENT_TABLET: '--xb-fhat',
        VERTICAL_ALIGNMENT_TABLET: '--xb-fvat',
        WIDTH_MOBILE: '--xb-fwm',
        HEIGHT_MOBILE: '--xb-fhm',
        X_MOBILE: '--xb-fxm',
        Y_MOBILE: '--xb-fym',
        ANGLE_MOBILE: '--xb-fam',
        RATIO_MOBILE: '--xb-farm',
        HORIZONTAL_ALIGNMENT_MOBILE: '--xb-fham',
        VERTICAL_ALIGNMENT_MOBILE: '--xb-fvam',
    };
    const { x, y, width, height, angle } = settings;
    const parallaxEnabled = settings.parallaxEnabled === 'yes';
    const zIndex = settings.zIndex.value == null ? 99 : settings.zIndex.value + 99;
    const desktopKeyframes = JSON.stringify(settings.keyframes?.desktop)?.replace(/"/g, "'");
    const tabletKeyframes = JSON.stringify(settings.keyframes?.tablet)?.replace(/"/g, "'");
    const mobileKeyframes = JSON.stringify(settings.keyframes?.mobile)?.replace(/"/g, "'");
    let parallaxBreakpoints = {};
    const parallaxBreakpointsArr = [];
    const hasParallaxBreakpoints = tabletKeyframes || mobileKeyframes;
    if (tabletKeyframes) {
        parallaxBreakpointsArr.push(`991: ${tabletKeyframes}`);
    }
    if (mobileKeyframes) {
        parallaxBreakpointsArr.push(`767: ${mobileKeyframes}`);
    }
    if (hasParallaxBreakpoints) {
        parallaxBreakpoints = {
            'xo-breakpoints': `{ ${parallaxBreakpointsArr.join(', ')} }`,
        };
    }
    function getStyle() {
        const ratioDesktop = width.desktop.value / height.desktop.value;
        const ratioTablet = !!width?.tablet?.value && !!height?.tablet?.value ? width.tablet.value / height.tablet.value : ratioDesktop;
        const ratioMobile = !!width?.mobile?.value && !!height?.mobile?.value ? width.mobile.value / height.mobile.value : ratioTablet;
        const style = Style.create({
            [CSS_VARS.Z_INDEX]: `${zIndex}`,
            [CSS_VARS.WIDTH_DESKTOP]: `${width.desktop.value}%`,
            [CSS_VARS.HEIGHT_DESKTOP]: `${height.desktop.value}%`,
            [CSS_VARS.X_DESKTOP]: `${x.desktop.value}%`,
            [CSS_VARS.Y_DESKTOP]: `${y.desktop.value}%`,
            [CSS_VARS.ANGLE_DESKTOP]: `${angle.desktop.value}deg`,
            [CSS_VARS.RATIO_DESKTOP]: ratioDesktop,
            [CSS_VARS.WIDTH_TABLET]: `${width.tablet?.value ?? width.desktop.value}%`,
            [CSS_VARS.HEIGHT_TABLET]: `${height.tablet?.value ?? height.desktop.value}%`,
            [CSS_VARS.X_TABLET]: `${x.tablet?.value ?? x.desktop.value}%`,
            [CSS_VARS.Y_TABLET]: `${y.tablet?.value ?? y.desktop.value}%`,
            [CSS_VARS.ANGLE_TABLET]: `${angle.tablet?.value ?? angle.desktop.value}deg`,
            [CSS_VARS.RATIO_TABLET]: ratioTablet,
            [CSS_VARS.WIDTH_MOBILE]: `${width.mobile?.value ?? width.tablet?.value ?? width.desktop.value}%`,
            [CSS_VARS.HEIGHT_MOBILE]: `${height.mobile?.value ?? height.tablet?.value ?? height.desktop.value}%`,
            [CSS_VARS.X_MOBILE]: `${x.mobile?.value ?? x.tablet?.value ?? x.desktop.value}%`,
            [CSS_VARS.Y_MOBILE]: `${y.mobile?.value ?? y.tablet?.value ?? y.desktop.value}%`,
            [CSS_VARS.ANGLE_MOBILE]: `${angle.mobile?.value ?? angle.tablet?.value ?? angle.desktop.value}deg`,
            [CSS_VARS.RATIO_MOBILE]: ratioMobile,
        });
        return style.get();
    }
    function getHorizontalAlignment() {
        const alignment = Style.create({
            [CSS_VARS.HORIZONTAL_ALIGNMENT_DESKTOP]: settings.horizontalAlignment.desktop,
        });
        alignment.set({
            [CSS_VARS.HORIZONTAL_ALIGNMENT_TABLET]: settings.horizontalAlignment?.tablet ?? settings.horizontalAlignment?.desktop,
        });
        alignment.set({
            [CSS_VARS.HORIZONTAL_ALIGNMENT_MOBILE]: settings.horizontalAlignment?.mobile ?? settings.horizontalAlignment?.tablet ?? settings.horizontalAlignment?.desktop,
        });
        return alignment.get();
    }
    function getVerticalAlignment() {
        const alignment = Style.create({
            [CSS_VARS.VERTICAL_ALIGNMENT_DESKTOP]: settings.verticalAlignment.desktop,
        });
        alignment.set({
            [CSS_VARS.VERTICAL_ALIGNMENT_TABLET]: settings.verticalAlignment?.tablet ?? settings.verticalAlignment?.desktop,
        });
        alignment.set({
            [CSS_VARS.VERTICAL_ALIGNMENT_MOBILE]: settings.verticalAlignment?.mobile ?? settings.verticalAlignment?.tablet ?? settings.verticalAlignment?.desktop,
        });
        return alignment.get();
    }
    const lerpEase = { 'xo-lerp-ease': settings.lerp_ease.value };
    return {
        parallaxEnabled,
        desktopKeyframes,
        parallaxBreakpoints,
        lerpEase,
        getStyle,
        getHorizontalAlignment,
        getVerticalAlignment,
    };
}
