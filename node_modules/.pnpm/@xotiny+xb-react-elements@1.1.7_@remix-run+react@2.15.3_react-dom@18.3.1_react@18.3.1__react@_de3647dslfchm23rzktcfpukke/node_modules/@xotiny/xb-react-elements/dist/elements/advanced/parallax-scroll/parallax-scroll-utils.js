import { classNames } from "../../../utils/class-names";
import { Style } from "../../../utils/template-helpers/style";
export function parallaxScrollUtils({ element }) {
    const { settings } = element;
    const { x, y, width, height, angle, position } = settings;
    const zIndex = settings.zIndex.value == null ? 99 : settings.zIndex.value + 99;
    const classes = classNames('xb-parallax-scroll', `xb-parallax-scroll--${position}`);
    const desktopKeyframes = JSON.stringify(settings.keyframes?.desktop)?.replace(/"/g, "'");
    const tabletKeyframes = JSON.stringify(settings.keyframes?.tablet)?.replace(/"/g, "'");
    const mobileKeyframes = JSON.stringify(settings.keyframes?.mobile)?.replace(/"/g, "'");
    let parallaxBreakpoints = {};
    const parallaxBreakpointsArr = [];
    const hasParallaxBreakpoints = tabletKeyframes || mobileKeyframes;
    if (tabletKeyframes) {
        parallaxBreakpointsArr.push(`991: ${tabletKeyframes}`);
    }
    if (mobileKeyframes) {
        parallaxBreakpointsArr.push(`767: ${mobileKeyframes}`);
    }
    if (hasParallaxBreakpoints) {
        parallaxBreakpoints = {
            'xo-breakpoints': `{ ${parallaxBreakpointsArr.join(', ')} }`,
        };
    }
    function getStyle() {
        const style = Style.create({
            '--z-index': zIndex,
            '--real-width-desktop': `${width.desktop.value}%`,
            '--real-height-desktop': `${height.desktop.value}%`,
            '--real-x-desktop': `${x.desktop.value}%`,
            '--real-y-desktop': `${y.desktop.value}%`,
            '--real-angle-desktop': `${angle.desktop.value}deg`,
            '--real-width-tablet': `${width.tablet?.value ?? width.desktop.value}%`,
            '--real-height-tablet': `${height.tablet?.value ?? height.desktop.value}%`,
            '--real-x-tablet': `${x.tablet?.value ?? x.desktop.value}%`,
            '--real-y-tablet': `${y.tablet?.value ?? y.desktop.value}%`,
            '--real-angle-tablet': `${angle.tablet?.value ?? angle.desktop.value}deg`,
            '--real-width-mobile': `${width.mobile?.value ?? width.tablet?.value ?? width.desktop.value}%`,
            '--real-height-mobile': `${height.mobile?.value ?? height.tablet?.value ?? height.desktop.value}%`,
            '--real-x-mobile': `${x.mobile?.value ?? x.tablet?.value ?? x.desktop.value}%`,
            '--real-y-mobile': `${y.mobile?.value ?? y.tablet?.value ?? y.desktop.value}%`,
            '--real-angle-mobile': `${angle.mobile?.value ?? angle.tablet?.value ?? angle.desktop.value}deg`,
        });
        return style.get();
    }
    const lerpEase = { 'xo-lerp-ease': settings.lerp_ease.value };
    function getAttrs() {
        return {
            className: `${classes} xb-parallax-scroll--real`,
            style: getStyle(),
        };
    }
    return {
        getAttrs,
        getStyle,
        parallaxBreakpoints,
        lerpEase,
        desktopKeyframes,
    };
}
