import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { CartForm } from '@shopify/hydrogen';
import { useSettings } from "../../../hooks/use-settings";
import { useProduct } from "../../../hooks/use-shopify-data";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import { classNames } from "../../../utils/class-names";
import './styles';
export const AddToCartButton = ({ element, children }) => {
    const { settings } = element;
    const { globalSettings: global } = useSettings();
    const fullWidthClass = settings.fullWidthEnabled === 'yes' ? 'xb-button--full' : 'xb-button--fit';
    function getIcon(fetcher) {
        const loaderType = global?.imageLoader?.type ?? 'loader-1';
        const loaderDuration = global?.imageLoader?.duration?.value ?? 1600;
        switch (loaderType) {
            case 'loader-1':
                return (_jsxs(_Fragment, { children: [settings.iconEnabled && (_jsx("span", { className: "xb-add-to-cart-button__icon", style: fetcher.state !== 'idle' ? { opacity: 0 } : {}, children: children })), fetcher.state !== 'idle' && (_jsx("span", { className: "xb-button__loading", children: _jsx("div", { className: "xo-loader-1", style: {
                                    '--size': 20,
                                    '--color': 'currentColor',
                                    '--duration': loaderDuration,
                                }, children: _jsx("span", {}) }) }))] }));
            case 'loader-2':
                return (_jsxs(_Fragment, { children: [settings.iconEnabled && (_jsx("span", { className: "xb-add-to-cart-button__icon", style: fetcher.state !== 'idle' ? { opacity: 0 } : {}, children: children })), fetcher.state !== 'idle' && (_jsx("span", { className: "xb-button__loading", children: _jsx("div", { className: "xo-loader-2", style: {
                                    '--size': 16,
                                    '--color': 'currentColor',
                                    '--duration': loaderDuration,
                                    '--stroke-width': 2,
                                }, children: _jsx("div", { children: _jsx("span", {}) }) }) }))] }));
            case 'loader-3':
                return (_jsxs(_Fragment, { children: [settings.iconEnabled && (_jsx("span", { className: "xb-add-to-cart-button__icon", style: fetcher.state !== 'idle' ? { opacity: 0 } : {}, children: children })), fetcher.state !== 'idle' && (_jsx("span", { className: "xb-button__loading", children: _jsx("div", { className: "xo-loader-3", style: {
                                    '--size': 8,
                                    '--color': 'currentColor',
                                    '--duration': loaderDuration,
                                }, children: _jsx("span", {}) }) }))] }));
        }
    }
    function getGap() {
        const style = Style.create({
            '--xb-button-gap': `${settings.iconSpacing.value}px`,
        });
        return style.get();
    }
    const { product, selectedVariant, quantity } = useProduct(element.id);
    if (!product) {
        return null;
    }
    const disabled = !selectedVariant || !selectedVariant.availableForSale;
    const lines = selectedVariant
        ? [
            {
                merchandiseId: selectedVariant.id,
                quantity,
                selectedVariant,
            },
        ]
        : [];
    return (_jsx(CartForm, { route: "/cart", inputs: { lines }, action: CartForm.ACTIONS.LinesAdd, children: (fetcher) => {
            return (_jsx("button", { ...elementAttr(element, {
                    classNames: ['xb-add-to-cart-button__button', fullWidthClass, settings.static?.class],
                    style: getGap(),
                }, false), type: "submit", onClick: () => { }, disabled: disabled ?? fetcher.state !== 'idle', children: _jsxs("span", { className: classNames('xb-add-to-cart-button__content', element.id, settings?.modifier?.handle), children: [settings.iconPosition === 'left' && getIcon(fetcher), settings.$textEnabled === 'yes' && (_jsx("span", { className: "xb-add-to-cart-button__text", style: fetcher.state !== 'idle' ? { opacity: 0 } : {}, children: selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out' })), settings.iconPosition === 'right' && getIcon(fetcher)] }) }));
        } }));
};
