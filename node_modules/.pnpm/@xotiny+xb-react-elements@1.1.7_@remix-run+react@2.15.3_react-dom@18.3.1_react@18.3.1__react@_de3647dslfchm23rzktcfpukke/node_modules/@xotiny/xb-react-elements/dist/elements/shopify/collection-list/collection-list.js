import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import './styles';
import { collectionListUtils } from './collection-list-utils';
export const CollectionList = ({ element, children, child }) => {
    const { settings } = element;
    const { autoplayAttr, colDesktop, colTablet, colMobile, gapDesktop, gapMobile, gapTablet, layoutClass } = collectionListUtils({ element });
    const observed = hash(`${JSON.stringify(element.settings)}${child.length}`);
    return (_jsx("div", { ...elementAttr(element, {
            classNames: ['xb-collection-list', settings.static?.class, settings?.modifier?.handle, layoutClass],
        }), children: element.settings.$layout_type === 'grid' ? (_jsx(_Fragment, { children: children })) : (_jsx("xo-carousel", { "xo-name": element.id, "xo-observed": observed, "xo-per-view": colDesktop, "xo-per-move": settings.itemsPerMove.value, "xo-rewind": settings.infiniteLoopEnabled === 'yes', "xo-gap": gapDesktop, ...autoplayAttr, "xo-render-bullet": "<div class='pagination__inner'> <span class='pagination__inner-content'></span> </div>", "xo-breakpoints": `
            {
              768: {
                perView: ${colMobile},
                gap: ${gapMobile}
              },
              992: {
                perView: ${colTablet},
                gap: ${gapTablet}
              }
            }
          `, style: {
                '--xo-per-view': `${colDesktop}`,
                '--xo-gap': `${gapDesktop}px`,
            }, children: children })) }));
};
