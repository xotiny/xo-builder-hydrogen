import { jsx as _jsx } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { ProductMediaProvider, useProduct } from "../../../hooks/use-shopify-data";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { productMediaListUtils } from './product-media-list-utils';
import './styles';
export const ProductMediaList = ({ element, children, parent }) => {
    const { settings } = element;
    const { slideDesktop, slideTablet, slideMobile, gapDesktop, gapTablet, gapMobile } = productMediaListUtils({ element });
    const directionAttr = parent?.settings.$thumbnailDirection === 'left' || parent?.settings.$thumbnailDirection === 'right' ? { 'xo-vertical': 'true' } : {};
    const verticalEnabled = parent?.settings.$thumbnailDirection === 'left' || parent?.settings.$thumbnailDirection === 'right';
    const thumbnailWrapperClass = parent?.settings.$thumbnailDirection === 'left' || parent?.settings.$thumbnailDirection === 'right' ? 'xb-product-media__thumbnail-wrapper' : '';
    const { product } = useProduct(element.id);
    if (!product || !product?.variants?.nodes?.length || parent?.settings?.$showMediaList === 'no' || product.media.nodes.length <= 1) {
        return null;
    }
    return (_jsx("div", { className: "xb-product-media__thumbnail", children: _jsx("xo-carousel-thumbnail", { ...elementAttr(element, {
                classNames: ['xb-product-media', settings.static?.class],
            }), "xo-observed": hash(`${JSON.stringify(element.settings)}${JSON.stringify(parent?.settings)}`), "xo-per-view": slideDesktop, "xo-gap": gapDesktop, ...directionAttr, "xo-breakpoints": `
          {
            767: {
              perView: ${slideMobile},
              gap: ${gapMobile},
              vertical: false
            },
            1024: {
              perView: ${slideTablet},
              gap: ${gapTablet},
              vertical: ${verticalEnabled}
            },
          }
        `, children: _jsx("div", { className: thumbnailWrapperClass, children: _jsx("xo-carousel-inner", { children: _jsx("xo-carousel-list", { children: product.media.nodes.map(media => {
                            return (!!media.previewImage?.url && (_jsx("xo-carousel-slide", { children: _jsx(ProductMediaProvider, { data: media, children: children }) }, media.id)));
                        }) }) }) }) }) }));
};
