import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const Hero = ({ element, children, child }) => {
    const { settings } = element;
    function getHeight() {
        const height = Style.create({
            '--xb-hero-height-desktop': `${settings.height.desktop.value}${settings.height.desktop.unit}`,
        });
        if (settings.height?.tablet) {
            height.set({
                '--xb-hero-height-tablet': `${settings.height?.tablet.value}${settings.height?.tablet?.unit}`,
            });
        }
        else {
            height.set({
                '--xb-hero-height-tablet': `${settings.height?.desktop?.value}${settings.height?.desktop?.unit}`,
            });
        }
        if (settings.height?.mobile) {
            height.set({
                '--xb-hero-height-mobile': `${settings.height?.mobile.value}${settings.height?.mobile?.unit}`,
            });
        }
        else {
            height.set({
                '--xb-hero-height-mobile': `${settings.height?.desktop?.value}${settings.height?.desktop?.unit}`,
            });
        }
        return height.get();
    }
    const observed = hash(`${JSON.stringify(element.settings)}${JSON.stringify(child.map(chld => {
        return {
            ...chld,
            collapsed: false,
        };
    }))}`);
    const autoplayAttr = settings.autoPlayEnabled === 'yes' ? { 'xo-autoplay': settings.delay.value } : {};
    return (_jsxs("div", { children: [_jsx("style", { children: `
        .${element.id} xo-carousel-inner, .${element.id} .xb-hero__slide img {
          height: var(--xb-hero-height-desktop) !important;
        }

        @media screen and (min-width: 768px) and (max-width: 1024px) {
          .${element.id} xo-carousel-inner, .${element.id} .xb-hero__slide img {
            height: var(--xb-hero-height-tablet) !important;
          }
        }
        @media screen and (max-width: 767px) {
          .${element.id} xo-carousel-inner, .${element.id} .xb-hero__slide img {
            height: var(--xb-hero-height-mobile) !important;
          }
        }
      ` }), _jsx("xo-carousel", { ...elementAttr(element, {
                    classNames: ['xb-hero', settings.static?.class],
                    style: {
                        ...getHeight(),
                    },
                    isCustomElement: true,
                }), "xo-observed": observed, ...autoplayAttr, "xo-type": settings.heroType, "xo-name": element.id, "xo-per-view": "1", "xo-per-move": "1", "xo-hover-pause": settings.pauseOnHoverEnabled === 'yes', "xo-gap": "0", "xo-rewind": settings.infiniteLoopEnabled === 'yes', "xo-speed": settings.speed?.value ?? 200, "xo-render-bullet": "<div class='pagination__inner'><span class='pagination__inner-content'></span></div>", children: children })] }));
};
