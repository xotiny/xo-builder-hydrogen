import { jsx as _jsx } from "react/jsx-runtime";
import { Children } from 'react';
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const Divider = ({ element, children }) => {
    const { settings } = element;
    let content = null;
    const childrens = Children.toArray(children);
    switch (settings.type) {
        case 'icon':
            content = _jsx("span", { className: "xb-divider__icon", children: childrens[0] });
            break;
        case 'text':
            content = _jsx("span", { className: "xb-divider__text", children: childrens[1] });
            break;
    }
    const dividerWrapperStyles = Style.create();
    if (settings.fullWidthEnabled === 'no') {
        dividerWrapperStyles.set({
            display: 'flex',
            justifyContent: settings.dividerAlignment,
            '--xb-divider-width-desktop': `${settings.dividerWidth.desktop.value}${settings.dividerWidth.desktop.unit}`,
        });
        if (settings.dividerWidth.tablet) {
            dividerWrapperStyles.set({
                '--xb-divider-width-tablet': `${settings.dividerWidth.tablet.value}${settings.dividerWidth.tablet.unit}`,
            });
        }
        else {
            dividerWrapperStyles.set({
                '--xb-divider-width-tablet': `${settings.dividerWidth.desktop.value}${settings.dividerWidth.desktop.unit}`,
            });
        }
        if (settings.dividerWidth.mobile) {
            dividerWrapperStyles.set({
                '--xb-divider-width-mobile': `${settings.dividerWidth.mobile.value}${settings.dividerWidth.mobile.unit}`,
            });
        }
        else if (settings.dividerWidth.tablet) {
            dividerWrapperStyles.set({
                '--xb-divider-width-mobile': `${settings.dividerWidth.tablet.value}${settings.dividerWidth.tablet.unit}`,
            });
        }
        else {
            dividerWrapperStyles.set({
                '--xb-divider-width-mobile': `${settings.dividerWidth.desktop.value}${settings.dividerWidth.desktop.unit}`,
            });
        }
    }
    let orderBefore = '';
    let orderContent = '';
    let orderAfter = '';
    switch (settings.align) {
        case 'left':
            orderBefore = '1';
            orderAfter = '1';
            break;
        case 'right':
            orderContent = '1';
            break;
    }
    return (_jsx("div", { className: "xb-divider-wrapper", style: dividerWrapperStyles.get(), children: _jsx("div", { ...elementAttr(element, {
                classNames: ['xb-divider', `xb-divider--${settings.type}`, settings.static?.class, settings?.modifier?.handle],
                style: {
                    '--xb-divider-type': settings.type,
                    '--xb-divider-order-before': orderBefore,
                    '--xb-divider-order-content': orderContent,
                    '--xb-divider-order-after': orderAfter,
                },
            }), children: content }) }));
};
