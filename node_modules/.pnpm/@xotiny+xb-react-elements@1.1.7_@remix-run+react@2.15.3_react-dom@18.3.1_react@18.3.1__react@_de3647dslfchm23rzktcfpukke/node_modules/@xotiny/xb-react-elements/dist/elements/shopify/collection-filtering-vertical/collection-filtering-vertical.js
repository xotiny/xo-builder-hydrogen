import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Link, useLocation, useSearchParams } from '@remix-run/react';
import { FilterCollectionItem } from "../../../components/filter-collection-item";
import { PriceRangeFilter } from "../../../components/price-range-filter";
import { CONFIG } from "../../../config";
import { useCollectionDetail, useElementSettings } from "../../../hooks/use-shopify-data";
import { getFilterLink } from "../../../utils/get-collection-filter";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { classNames } from "../../../utils/class-names";
import './styles';
export const CollectionFilteringVertical = ({ element }) => {
    const { settings } = element;
    const parentSettings = useElementSettings();
    const data = useCollectionDetail();
    const [params] = useSearchParams();
    const location = useLocation();
    if (!parentSettings || !data) {
        return null;
    }
    const enabled = parentSettings.$filterEnabled == 'yes' && parentSettings.$filterType === 'vertical';
    const { appliedFilters, collection, collections } = data;
    if (!enabled || !collection) {
        return null;
    }
    const filterMarkup = (filter, option) => {
        switch (filter.type) {
            case 'PRICE_RANGE':
                const priceFilter = params.get(`${CONFIG.collectionPage.filterUrlPrefix}price`);
                const price = priceFilter ? JSON.parse(priceFilter) : undefined;
                const min = isNaN(Number(price?.min)) ? undefined : Number(price?.min);
                const max = isNaN(Number(price?.max)) ? undefined : Number(price?.max);
                return _jsx(PriceRangeFilter, { min: min, max: max });
            default:
                const to = getFilterLink(option.input, params, location);
                const isActive = appliedFilters.some(fil => JSON.stringify(fil.filter) === option.input);
                const activeClass = isActive ? 'xb-field-checkbox-1--active' : '';
                return (_jsxs(Link, { className: classNames('xb-field-checkbox-1', activeClass), prefetch: "intent", to: to, style: {
                        '--icon-size': '16px',
                    }, children: [_jsx("span", { className: "xb-field-checkbox-1__item", children: _jsx("span", { className: "xb-field-checkbox-1__icon", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "20", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round", children: _jsx("polyline", { points: "20 6 9 17 4 12" }) }) }) }), _jsxs("span", { className: "xb-field-checkbox-1__label", children: [_jsx("span", { children: option.label }), parentSettings.$numberCountEnabled == 'yes' && _jsxs("div", { children: ["(", option.count, ")"] })] })] }));
        }
    };
    return (_jsxs("div", { ...elementAttr(element, {
            classNames: ['xb-collection-filtering-vertical', 'xb-collection-filtering', settings?.modifier?.handle, settings.static?.class],
        }), children: [_jsx("div", { className: "xb-collapse", children: parentSettings.$collapseEnabled == 'yes' ? (_jsxs(_Fragment, { children: [_jsxs("xo-collapse-trigger", { class: "xb-collapse__trigger", "xo-name": "collection", "xo-active": true, children: [_jsx("div", { className: "xb-collapse__trigger-option", children: "Collections" }), _jsx("div", { className: "xb-collapse__trigger-icon", children: _jsx("div", { className: "xb-collapse__trigger-icon-icon", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "15", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round", children: _jsx("polyline", { points: "6 9 12 15 18 9" }) }) }) })] }), _jsx("xo-collapse", { class: "xb-collapse__body xb-scrollbar", "xo-name": "collection", "xo-active": true, children: _jsx("div", { className: "xb-collapse__content", style: { flexDirection: 'column' }, children: collections.map(collection => {
                                    return _jsx(FilterCollectionItem, { collection: collection }, collection.handle);
                                }) }) })] })) : (_jsxs(_Fragment, { children: [_jsx("div", { className: "xb-collapse__trigger", "xo-name": "collection", "xo-active": true, children: _jsx("div", { className: "xb-collapse__trigger-option", children: "Collections" }) }), _jsx("div", { className: "xb-collapse__body xb-scrollbar", "xo-name": "collection", "xo-active": true, children: _jsx("div", { className: "xb-collapse__content", children: collections.map(collection => {
                                    return _jsx(FilterCollectionItem, { collection: collection }, collection.handle);
                                }) }) })] })) }), collection?.products?.filters?.map(filter => {
                const name = filter.label.toLocaleLowerCase();
                if (name === 'category') {
                    return null;
                }
                return (_jsx("div", { className: "xb-collapse", children: parentSettings.$collapseEnabled == 'yes' ? (_jsxs(_Fragment, { children: [_jsxs("xo-collapse-trigger", { class: "xb-collapse__trigger", "xo-name": filter.label, "xo-active": true, children: [_jsx("div", { className: "xb-collapse__trigger-option", children: filter.label }), _jsx("div", { className: "xb-collapse__trigger-icon", children: _jsx("div", { className: "xb-collapse__trigger-icon-icon", children: _jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "15", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round", children: _jsx("polyline", { points: "6 9 12 15 18 9" }) }) }) })] }), _jsx("xo-collapse", { class: "xb-collapse__body xb-scrollbar", "xo-name": filter.label, "xo-active": true, children: _jsx("div", { className: "xb-collapse__content", children: filter?.values?.map(option => {
                                        return _jsx("div", { children: filterMarkup(filter, option) }, option.id);
                                    }) }) })] })) : (_jsxs(_Fragment, { children: [_jsx("div", { className: "xb-collapse__trigger", "xo-name": filter.label, "xo-active": true, children: _jsx("div", { className: "xb-collapse__trigger-option", children: filter.label }) }), _jsx("div", { className: "xb-collapse__body xb-scrollbar", "xo-name": filter.label, "xo-active": true, children: _jsx("div", { className: "xb-collapse__content", children: filter?.values?.map(option => {
                                        return _jsx("div", { children: filterMarkup(filter, option) }, option.id);
                                    }) }) })] })) }, filter.id));
            })] }));
};
