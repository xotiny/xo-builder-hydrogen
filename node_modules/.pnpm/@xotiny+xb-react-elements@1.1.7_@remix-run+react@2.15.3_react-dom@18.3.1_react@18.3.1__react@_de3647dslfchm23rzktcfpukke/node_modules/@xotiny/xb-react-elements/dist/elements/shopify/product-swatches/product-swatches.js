import { jsx as _jsx } from "react/jsx-runtime";
import { ProductOptionProvider, useProduct } from "../../../hooks/use-shopify-data";
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { Style } from "../../../utils/template-helpers/style";
import './styles';
export const ProductSwatches = ({ element, children }) => {
    const { settings } = element;
    const optionsSpacingDesktop = settings.optionsSpacing.desktop?.value;
    const optionsSpacingTablet = settings.optionsSpacing.tablet?.value ?? settings.optionsSpacing.desktop.value;
    const optionsSpacingMobile = settings.optionsSpacing.mobile?.value ?? settings.optionsSpacing.desktop.value;
    const optionValuesSpacingDesktop = settings.optionValuesSpacing.desktop?.value;
    const optionValuesSpacingTablet = settings.optionValuesSpacing.tablet?.value ?? settings.optionValuesSpacing.desktop?.value;
    const optionValuesSpacingMobile = settings.optionValuesSpacing.mobile?.value ?? settings.optionValuesSpacing.desktop?.value;
    const optionNamePosition = settings.optionNamePosition === 'left' ? { display: 'flex', gap: '5px' } : {};
    function getStyle() {
        const style = Style.create({
            '--xb-product-swatches-spacing-desktop': `${optionsSpacingDesktop}px`,
            '--xb-product-swatches-spacing-tablet': `${optionsSpacingTablet}px`,
            '--xb-product-swatches-spacing-mobile': `${optionsSpacingMobile}px`,
            '--xb-product-swatches-item-spacing-desktop': `${optionValuesSpacingDesktop}px`,
            '--xb-product-swatches-item-spacing-tablet': `${optionValuesSpacingTablet}px`,
            '--xb-product-swatches-item-spacing-mobile': `${optionValuesSpacingMobile}px`,
        });
        if (settings.optionValueLayout === 'vertical') {
            style.set({
                flexDirection: 'column',
            });
        }
        return style.get();
    }
    const { product } = useProduct(element.id);
    if (!product) {
        return null;
    }
    const { options } = product;
    if (!options) {
        return null;
    }
    return (_jsx("div", { ...elementAttr(element, {
            classNames: ['xb-product-swatches', settings.static?.class, settings?.modifier?.handle],
            style: getStyle(),
        }), children: options.map(option => {
            return (_jsx("div", { style: optionNamePosition, children: _jsx(ProductOptionProvider, { data: option, children: children }) }, option.name));
        }) }));
};
