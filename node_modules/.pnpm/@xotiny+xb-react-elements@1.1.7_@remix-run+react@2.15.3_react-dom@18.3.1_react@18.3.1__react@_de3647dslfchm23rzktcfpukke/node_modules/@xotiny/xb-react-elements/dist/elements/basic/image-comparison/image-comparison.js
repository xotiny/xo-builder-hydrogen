import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Children } from 'react';
import { elementAttr } from "../../../utils/template-helpers/element-attr";
import { imageComparisonUtils } from './image-comparison-utils';
import './styles';
export const ImageComparison = ({ element, children }) => {
    const { settings } = element;
    const { getStyle, iconColor, observed, placeholderImage } = imageComparisonUtils({
        element,
    });
    return (_jsx("xo-image-comparison", { "xo-observed": observed, "xo-default-percent": settings.defaultRatio.value, ...elementAttr(element, {
            classNames: ['xb-image-comparison', settings.static?.class],
            isCustomElement: true,
            style: {
                ...getStyle(),
            },
        }), children: Children.map(children, (child, index) => {
            if (index === 0) {
                return (_jsxs("xo-image-comparison-before", { children: [_jsx("img", { is: "xo-lazyload", src: settings.beforeImage?.url ?? placeholderImage, alt: settings.beforeText, width: settings.beforeImage?.width, height: settings.beforeImage?.height, "xo-intrinsic-width": settings.beforeImage?.width, "xo-intrinsic-height": settings.beforeImage?.height, "xo-fallback-width": settings.beforeImage?.width ?? 400, loading: "lazy" }), _jsx("div", { children: child })] }));
            }
            if (index === 1) {
                return _jsx("xo-image-comparison-handle", { style: { backgroundColor: iconColor }, children: child });
            }
            if (index === 2) {
                return (_jsxs("xo-image-comparison-after", { children: [_jsx("img", { is: "xo-lazyload", src: settings.afterImage?.url ?? placeholderImage, alt: settings.afterText, width: settings.beforeImage?.width, height: settings.beforeImage?.height, "xo-intrinsic-width": settings.beforeImage?.width, "xo-intrinsic-height": settings.beforeImage?.height, "xo-fallback-width": settings.beforeImage?.width ?? 400, loading: "lazy" }), _jsx("div", { children: child })] }));
            }
            return null;
        }) }));
};
