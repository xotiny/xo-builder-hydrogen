import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { hash } from "../../../utils/hash";
import { classNames } from "../../../utils/class-names";
import { Children } from 'react';
import { tabsUtils } from './tabs-utils';
import './styles';
export const Tabs = ({ element, children, child }) => {
    const { containerClass, getStyle, renderTabActiveCond, tabHeaderClass, tabsNavClass } = tabsUtils({ element });
    const observed = hash(JSON.stringify(child.length) + JSON.stringify(element.settings));
    return (_jsxs("xo-tabs", { "xo-name": element.id, "xo-observed": observed, class: containerClass, style: getStyle(), children: [_jsxs("div", { style: {
                    position: 'relative',
                }, children: [_jsx("div", { className: tabsNavClass, children: Children.map(children, (chld, index) => {
                            const currentElement = child[index];
                            if (!currentElement) {
                                return null;
                            }
                            const { settings } = currentElement;
                            if (!settings) {
                                return null;
                            }
                            const childrenId = element.settings.childrenId || child[0]?.id;
                            const active = currentElement.id === childrenId;
                            const defaultIconSize = `${settings.icon_size?.desktop?.value}${settings.icon_size?.desktop?.unit}`;
                            const iconSizeDesktop = defaultIconSize;
                            const iconSizeTablet = settings.icon_size?.tablet ? `${settings.icon_size.tablet.value}${settings.icon_size.tablet.unit}` : '';
                            const iconSizeMobile = settings.icon_size?.mobile ? `${settings.icon_size.mobile.value}${settings.icon_size.mobile.unit}` : '';
                            const iconStyles = {
                                '--tabpane-icon-size-desktop': iconSizeDesktop,
                                '--tabpane-icon-size-tablet': iconSizeTablet ? iconSizeTablet : defaultIconSize,
                                '--tabpane-icon-size-mobile': iconSizeMobile ? iconSizeMobile : defaultIconSize,
                                '--tabpane-icon-space': `${settings?.spacing?.value}${settings?.spacing?.unit}`,
                            };
                            const iconClass = `xb-tabs__icon--${settings.icon_position}`;
                            return (_jsxs("xo-tabs-trigger", { class: classNames(tabHeaderClass, iconClass), "xo-name": currentElement.id, "xo-active": active, style: iconStyles, "xo-trigger": element.settings.change_tab_when, children: [settings?.enable_icon === 'yes' && (_jsx("span", { className: "xb-tab-pane__icon", children: settings.icon.type === 'image' ? _jsx("img", { src: settings.icon?.source, alt: "" }) : settings.icon?.source })), _jsxs("div", { children: [settings.title, !!settings?.description && (_jsx("div", { className: "xb-tab-pane__description", dangerouslySetInnerHTML: { __html: settings.description } }))] })] }));
                        }) }), renderTabActiveCond && _jsx("xo-tabs-active", { class: "xb-tabs-active" })] }), _jsx("xo-tabs-content", { class: "xb-tabs-content", children: children })] }));
};
