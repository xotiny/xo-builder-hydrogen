import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useLocation, useMatches } from '@remix-run/react';
import { Script } from '@shopify/hydrogen';
import { useEffect } from 'react';
import { useLinks, useLinksPrefetch } from "../hooks/use-links";
import { devReload } from "../hydrogen/utils/dev-reload";
import { setAnimateObserved } from "../utils/set-animate-observed";
devReload();
const XoBuilderHead = ({ cssUrls = [], jsUrls = [], nonce, children }) => {
    const matches = useMatches();
    const pageData = matches?.[matches?.length - 1]?.data;
    // @ts-ignore
    const cssFromSettings = (pageData?.css ?? '');
    // @ts-ignore
    let jsFromSettings = (pageData?.js ?? '');
    return (_jsxs("head", { children: [Array.from(new Set(cssUrls)).map(url => {
                return _jsx("link", { rel: "stylesheet", href: url }, url);
            }), !!cssFromSettings && _jsx("style", { dangerouslySetInnerHTML: { __html: cssFromSettings }, type: "text/css" }), Array.from(new Set(jsUrls)).map(url => {
                return _jsx(Script, { waitForHydration: true, src: url, nonce: nonce }, url);
            }), _jsx("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: jsFromSettings }, nonce: nonce }), children] }));
};
const XoBuilderRootPrivate = ({ children }) => {
    const location = useLocation();
    useLinks();
    useLinksPrefetch();
    useEffect(() => {
        setAnimateObserved();
    }, [location]);
    return _jsx(_Fragment, { children: children });
};
export const XoBuilderRoot = Object.assign(XoBuilderRootPrivate, {
    Head: XoBuilderHead,
});
