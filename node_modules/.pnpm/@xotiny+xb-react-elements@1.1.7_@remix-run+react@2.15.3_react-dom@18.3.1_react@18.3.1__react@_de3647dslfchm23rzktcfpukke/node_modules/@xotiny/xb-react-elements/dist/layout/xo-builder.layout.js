import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment } from 'react';
import { Section } from "../elements/layout/section/section";
import { XbBuilderShopifyProvider } from "../context/xb-builder.context";
import { devElements } from './dev-elements';
import { MegaMenu } from './mega-menu';
export const XoBuilderLayout = ({ isDev = false, page, customSections = {}, elements, customElementId = 'custom', shopifyData, cssContent, }) => {
    const finalElements = (isDev ? devElements : elements);
    const getElement = (elementId) => {
        const pascalId = elementId.replace(/([-]\w)/g, g => g[1].toUpperCase()).replace(/^(\w)/, g => g[0].toUpperCase());
        return finalElements[pascalId];
    };
    const hasElement = (id) => {
        return !!getElement(id);
    };
    const renderChildItem = (childId, index) => {
        const child = page.entities[childId];
        if (!child) {
            return null;
        }
        if (child?.hide) {
            return null;
        }
        if (child.type === 'element') {
            return _jsx(Fragment, { children: renderChild(child, index) }, child.id);
        }
        if (child.type === 'wrapper') {
            if (hasElement(child.elementId)) {
                const Component = getElement(child.elementId);
                if (!Component) {
                    return null;
                }
                return (_jsx(Component, { element: { ...child, index }, parent: child.parent ? page.entities[child.parent] : null, child: child.children.map(id => page.entities[id]), ...(child.elementId === 'mega-menu'
                        ? {
                            renderMegaMenu: () => {
                                return _jsx(MegaMenu, { elementId: child.id, renderContent: renderSection });
                            },
                        }
                        : {}), children: !!child.children && renderChild(child, index) }, child.id));
            }
            return _jsx("div", { children: !!child.children && renderChild(child, index) }, child.id);
        }
        return null;
    };
    const renderChild = (item, index) => {
        if (item.type === 'element') {
            if (hasElement(item.elementId)) {
                const Component = getElement(item.elementId);
                if (!Component) {
                    return null;
                }
                return _jsx(Component, { parent: item.parent ? page.entities[item.parent] : null, element: { ...item, index } }, item.id);
            }
            return null;
        }
        if (item.children.length === 0) {
            return null;
        }
        return item.children.map(renderChildItem);
    };
    const renderSection = (section, index, megaMenu = false) => {
        if (section?.hide || !section) {
            return null;
        }
        if (section?.megaMenu && !megaMenu) {
            return null;
        }
        if (section.elementId.includes(customElementId)) {
            const content = customSections[section.id];
            if (!content) {
                return null;
            }
            return _jsx(Fragment, { children: content }, section.id);
        }
        return (_jsx(Section, { element: { ...section, index }, parent: section.parent ? page.entities[section.parent] : null, child: section.children.map(id => page.entities[id]), children: renderChild(section, index) }, section.id));
    };
    return (_jsxs(XbBuilderShopifyProvider, { data: { shopifyData, pageData: page }, children: [!!cssContent && _jsx("style", { dangerouslySetInnerHTML: { __html: cssContent } }), page.order.map((sectionId, index) => {
                const section = page.entities[sectionId];
                return renderSection(section, index);
            })] }));
};
