import {
  getAdjacentAndFirstAvailableVariants,
  useOptimisticVariant
} from "./chunk-NBGQ7WMI.js";
import {
  isEmpty
} from "./chunk-PVLXMXEH.js";
import {
  useMatches
} from "./chunk-Z267FA2X.js";
import {
  require_jsx_runtime
} from "./chunk-3YQ7MRFA.js";
import {
  require_react
} from "./chunk-FO5G5QMT.js";
import {
  __toESM
} from "./chunk-DNCPQDPH.js";

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hooks/use-shopify-data.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/context/shopify-item-provider.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
function createShopifyItemContext() {
  const Context = (0, import_react.createContext)(null);
  function Provider({ data, children }) {
    return (0, import_jsx_runtime.jsx)(Context.Provider, { value: { data }, children });
  }
  function useItem() {
    const state = (0, import_react.useContext)(Context);
    if (!state) {
      return null;
    }
    return state.data;
  }
  return { Provider, useItem };
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/context/shopify-product-provider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
function createShopifyProductContext() {
  const Context = (0, import_react2.createContext)(null);
  function Provider({ data, isProductPage = false, children }) {
    var _a, _b;
    const firstVariant = (_b = (_a = data == null ? void 0 : data.variants) == null ? void 0 : _a.nodes) == null ? void 0 : _b[0];
    const variant = data.selectedVariant ?? firstVariant;
    const selectedOrFirstAvailableVariant = isProductPage ? data.selectedOrFirstAvailableVariant : variant;
    const variants = isProductPage ? getAdjacentAndFirstAvailableVariants(data) : data == null ? void 0 : data.variants;
    const currentSelectedVariant = useOptimisticVariant(selectedOrFirstAvailableVariant, variants);
    const [selectedVariant, setSelectedVariant] = (0, import_react2.useState)(currentSelectedVariant);
    const [quantity, setQuantity] = (0, import_react2.useState)(1);
    return (0, import_react2.useMemo)(() => {
      return (0, import_jsx_runtime2.jsx)(Context.Provider, { value: { product: data, selectedVariant, setSelectedVariant, quantity, setQuantity, isProductPage }, children });
    }, [selectedVariant == null ? void 0 : selectedVariant.id, quantity]);
  }
  function useItem() {
    const state = (0, import_react2.useContext)(Context);
    if (!state) {
      return null;
    }
    return state;
  }
  return { Provider, useItem };
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/config.js
var CONFIG = {
  API: {
    URL_DEV: "https://hydrogen.builder.awe7.com/api/v1",
    URL: "http://h.xobuilder.app/api/v1",
    GLOBAL_SETTINGS: "/hydrogen/settings",
    PAGE_SETTINGS: "/hydrogen/page-settings/",
    HOME: "/hydrogen/pages/home",
    PRODUCT: "/hydrogen/pages/product",
    COLLECTION: "/hydrogen/pages/collection",
    ARTICLE: "/hydrogen/pages/article",
    PAGE: "/hydrogen/pages/page"
  },
  CACHE_MAX_AGE: 30,
  dev: {
    baseURL: "http://localhost:8082",
    page: "/hydrogen/page",
    settings: "/hydrogen/settings"
  },
  shopifyFieldIds: {
    collection: "$collection",
    collectionList: "$collection_list",
    collectionSource: "$collection_source",
    limit: "$limit",
    product: "$product",
    blog: "$blogPicker",
    article: "$article",
    productSource: "$productSource"
  },
  collectionPage: {
    filterUrlPrefix: "filter.v.",
    priceRangeDebounce: 500
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/object/object-values.js
var objectValues = (obj) => Object.values(obj);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/utils/get-shopify-settings.js
function getShopifySettings(page) {
  return Object.values(page.entities).reduce((acc, entity) => {
    const val = objectValues(CONFIG.shopifyFieldIds).reduce((acc2, key) => {
      var _a;
      const optionValue = (_a = entity.settings) == null ? void 0 : _a[key];
      if (isEmpty(optionValue)) {
        return acc2;
      }
      return {
        ...acc2,
        [key]: optionValue
      };
    }, {});
    if (isEmpty(val)) {
      return acc;
    }
    return [
      ...acc,
      {
        id: entity.id,
        elementId: entity.elementId,
        settings: val
      }
    ];
  }, []);
}
function hasCollectionSetting(settings) {
  return !!(settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.collection]);
}
function hasProductSetting(settings) {
  return !!(settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.product]);
}
function hasCollectionListManualSetting(settings) {
  return (settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.collectionSource]) === "manual";
}
function hasCollectionListAllSetting(settings) {
  return (settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.collectionSource]) === "all";
}
function hasProductRecommendationSetting(settings) {
  return (settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.productSource]) === "related" && (settings == null ? void 0 : settings.$product);
}
function hasProductList(settings) {
  return (settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.productSource]) === "all";
}
function hasArticleSetting(settings) {
  return !!(settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.article]);
}
function hasBlogSettings(settings) {
  return !!(settings == null ? void 0 : settings[CONFIG.shopifyFieldIds.blog]);
}
function filterBy(type, settings) {
  switch (type) {
    case "collectionList":
      return settings.filter((item) => hasCollectionListAllSetting(item.settings) || hasCollectionListManualSetting(item.settings));
    case "collection":
      return settings.filter((item) => hasCollectionSetting(item.settings));
    case "product":
      return settings.filter((item) => hasProductSetting(item.settings));
    case "article":
      return settings.filter((item) => hasArticleSetting(item.settings));
    case "blog":
      return settings.filter((item) => hasBlogSettings(item.settings));
    case "productRecommendation":
      return settings.filter((item) => hasProductRecommendationSetting(item.settings));
    case "productList":
      return settings.filter((item) => hasProductList(item.settings));
    default:
      return settings;
  }
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/context/xb-builder.context.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var XbBuilderContext = (0, import_react3.createContext)({});
var XbBuilderShopifyProvider = ({ data = {}, children }) => {
  return (0, import_jsx_runtime3.jsx)(XbBuilderContext.Provider, { value: data, children });
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hooks/use-shopify-data.js
function useGetElementId() {
  function getElementId(type, currentElementId, page) {
    const currentElements = page.entities;
    const currentElement = currentElements[currentElementId];
    function handler(element) {
      if (!element.parent) {
        return currentElementId;
      }
      if (type === "collectionList" && element.settings && (hasCollectionListAllSetting(element.settings) || hasCollectionListManualSetting(element.settings)) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "collection" && element.settings && hasCollectionSetting(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "product" && element.settings && hasProductSetting(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "productRecommendation" && element.settings && hasProductRecommendationSetting(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "productList" && element.settings && hasProductList(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "blog" && element.settings && hasBlogSettings(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      if (type === "article" && element.settings && hasArticleSetting(element.settings) && element.elementId !== currentElement.elementId) {
        return element.id;
      }
      const parentElement = currentElements[element.parent];
      return handler(parentElement);
    }
    return handler(currentElement);
  }
  return getElementId;
}
function useAppState() {
  const appState = (0, import_react4.useContext)(XbBuilderContext);
  if (isEmpty(appState)) {
    throw new Error("useAppState must be in the XbBuilderShopifyProvider");
  }
  return appState;
}
function useShopifyData(type, currentElementId) {
  var _a;
  const appState = useAppState();
  const getElementId = useGetElementId();
  if (!currentElementId) {
    return;
  }
  const elementId = getElementId(type, currentElementId, appState.pageData);
  if (isEmpty(appState)) {
    throw new Error("useShopifyData must be in the XbBuilderShopifyProvider");
  }
  const elementState = (_a = appState == null ? void 0 : appState.shopifyData) == null ? void 0 : _a[type];
  return elementState == null ? void 0 : elementState[elementId];
}
var ProductContext = createShopifyProductContext();
var CollectionContext = createShopifyItemContext();
var ArticleContext = createShopifyItemContext();
var BlogContext = createShopifyItemContext();
var ProductMediaContext = createShopifyItemContext();
var ProductOptionContext = createShopifyItemContext();
var ProductOptionValueContext = createShopifyItemContext();
var ElementSettingsContext = createShopifyItemContext();
var ProductProvider = ProductContext.Provider;
var CollectionProvider = CollectionContext.Provider;
var ArticleProvider = ArticleContext.Provider;
var BlogProvider = BlogContext.Provider;
var ProductMediaProvider = ProductMediaContext.Provider;
var ProductOptionProvider = ProductOptionContext.Provider;
var ProductOptionValueProvider = ProductOptionValueContext.Provider;
var ElementSettingsProvider = ElementSettingsContext.Provider;
function useCollection(elementId) {
  const collection = CollectionContext.useItem();
  const data = useShopifyData("collection", elementId);
  const collectionDetail = useCollectionDetail();
  if (!collection && !collectionDetail) {
    return data;
  }
  if (collection) {
    return collection;
  }
  return collectionDetail == null ? void 0 : collectionDetail.collection;
}
function useProduct(elementId) {
  const data = ProductContext.useItem();
  const productData = useShopifyData("product", elementId);
  const productDetail = useProductDetail();
  if (!(data == null ? void 0 : data.product) && !!productData) {
    return {
      product: productData,
      selectedVariant: productData == null ? void 0 : productData.selectedVariant
    };
  }
  if (data == null ? void 0 : data.product) {
    return data;
  }
  return {
    product: productDetail,
    selectedVariant: productDetail == null ? void 0 : productDetail.selectedVariant,
    isProductPage: true
  };
}
function useCollectionList(elementId) {
  const data = useShopifyData("collectionList", elementId);
  return data == null ? void 0 : data.collections;
}
function useArticle(elementId) {
  const article = ArticleContext.useItem();
  const data = useShopifyData("article", elementId);
  const appState = useAppState();
  const articleDetail = appState.shopifyData.articleDetail;
  if (!article && !!data) {
    return data;
  }
  if (article) {
    return article;
  }
  return articleDetail;
}
function useBlog(elementId) {
  const data = useShopifyData("blog", elementId);
  return data == null ? void 0 : data.blog;
}
function useProductList(type, elementId) {
  var _a;
  if (type === "all") {
    const data2 = useShopifyData("productList", elementId);
    return data2 == null ? void 0 : data2.products;
  }
  if (type === "related") {
    const data2 = useShopifyData("productRecommendation", elementId);
    return data2 == null ? void 0 : data2.productRecommendations;
  }
  const data = useShopifyData("collection", elementId);
  return (_a = data == null ? void 0 : data.products) == null ? void 0 : _a.nodes;
}
function useProductMedia() {
  const data = ProductMediaContext.useItem();
  if (data)
    return data;
  return {};
}
function useShop() {
  const appState = useAppState();
  return appState.shopifyData.shop;
}
function useProductOption() {
  const data = ProductOptionContext.useItem();
  if (data)
    return data;
  return null;
}
function useProductOptionValue() {
  const data = ProductOptionValueContext.useItem();
  if (data)
    return data;
  return null;
}
function useProductDetail() {
  const appState = useAppState();
  return appState.shopifyData.productDetail;
}
function useCollectionDetail() {
  const appState = useAppState();
  return appState.shopifyData.collectionDetail;
}
function useElementSettings() {
  const data = ElementSettingsContext.useItem();
  if (data)
    return data;
  return null;
}
function usePageDetail() {
  const appState = useAppState();
  return appState.shopifyData.page;
}
function useSeo() {
  var _a;
  const matches = useMatches();
  const pageData = (_a = matches == null ? void 0 : matches[(matches == null ? void 0 : matches.length) - 1]) == null ? void 0 : _a.data;
  return pageData;
}

export {
  CONFIG,
  objectValues,
  getShopifySettings,
  hasCollectionListManualSetting,
  filterBy,
  XbBuilderShopifyProvider,
  useAppState,
  ProductProvider,
  CollectionProvider,
  ArticleProvider,
  ProductMediaProvider,
  ProductOptionProvider,
  ProductOptionValueProvider,
  ElementSettingsProvider,
  useCollection,
  useProduct,
  useCollectionList,
  useArticle,
  useBlog,
  useProductList,
  useProductMedia,
  useShop,
  useProductOption,
  useProductOptionValue,
  useProductDetail,
  useCollectionDetail,
  useElementSettings,
  usePageDetail,
  useSeo
};
//# sourceMappingURL=chunk-SSTWVKXD.js.map
