import {
  ProductVariantsName
} from "./chunk-H6IM6Q5Y.js";
import {
  ProductVendor
} from "./chunk-M5E3RIKQ.js";
import {
  ShopifyPagination
} from "./chunk-USHJMOHM.js";
import {
  StarRating
} from "./chunk-ELHFPZCL.js";
import {
  StockCounter
} from "./chunk-JTUAW2OT.js";
import {
  PageContent
} from "./chunk-PUZHPQFU.js";
import {
  ProductQuantityPlus
} from "./chunk-ETJ73PFC.js";
import {
  ProductSwatches
} from "./chunk-K3DTQFV4.js";
import {
  ProductSwatchesValue
} from "./chunk-4LWJQUEF.js";
import {
  ProductSwatchesValueItem
} from "./chunk-KIUKKPVR.js";
import {
  ProductTitle
} from "./chunk-K6C6ZWVQ.js";
import {
  ProductVariantsDropdown
} from "./chunk-AYVMWX7R.js";
import {
  ProductVariantsDropdownValue
} from "./chunk-QLJFB47T.js";
import {
  ProductVariantsDropdownValueItem
} from "./chunk-XWIEPRZO.js";
import {
  ProductMediaList
} from "./chunk-VH55LY4W.js";
import {
  ProductMediaListItem
} from "./chunk-QDCPC2SH.js";
import {
  ProductPrice
} from "./chunk-DO7KPIVG.js";
import {
  ProductCompareAtPrice
} from "./chunk-HQGWDVBR.js";
import {
  ProductPriceWrapper
} from "./chunk-4B3AAB4F.js";
import {
  ProductQuantity
} from "./chunk-DWB2CT54.js";
import {
  ProductQuantityInput
} from "./chunk-BWLXBLWQ.js";
import {
  ProductQuantityMinus
} from "./chunk-Z4MZTKGT.js";
import {
  ProductBadgeSale
} from "./chunk-6FEIJZOP.js";
import {
  ProductDescription
} from "./chunk-6DXRA6XC.js";
import {
  ProductListHoverImage
} from "./chunk-HCPWMEHL.js";
import {
  ProductList
} from "./chunk-6LBY5IUQ.js";
import {
  ProductListContent
} from "./chunk-47ZGE7FB.js";
import {
  ProductListItem
} from "./chunk-QUGZ5WHK.js";
import {
  ProductMainMedia
} from "./chunk-KEB7637C.js";
import {
  ProductMedia
} from "./chunk-D7OWAXVS.js";
import {
  FeaturedProduct
} from "./chunk-ZCCSJILS.js";
import {
  PageTitle
} from "./chunk-ETICODYX.js";
import {
  PaymentMethods
} from "./chunk-XH2ZKBEB.js";
import {
  PaymentMethodsItem
} from "./chunk-HCIHIXYF.js";
import {
  PaymentMethodsShopItem
} from "./chunk-45KFRDPM.js";
import {
  PickupAvailabilities
} from "./chunk-ZMJFOJFJ.js";
import {
  PickupAvailabilitiesModal
} from "./chunk-HWFYUKQC.js";
import {
  ProductBadgeNew
} from "./chunk-YE2T4PVL.js";
import {
  CollectionTitle
} from "./chunk-ICS7E4JQ.js";
import {
  CurrencySelector
} from "./chunk-BWLX7TR6.js";
import {
  CustomerForm
} from "./chunk-GWZN6V5X.js";
import {
  CustomerFormField
} from "./chunk-NKB3KOQL.js";
import {
  CustomerFormInput
} from "./chunk-LGLEJELM.js";
import {
  CustomerFormLabel
} from "./chunk-YEFB7MUR.js";
import {
  DynamicCheckout
} from "./chunk-L4D2LMI3.js";
import {
  FeaturedArticle
} from "./chunk-DKO7BZU2.js";
import {
  CollectionFilteringVertical
} from "./chunk-OEDPFGUL.js";
import {
  CollectionImage
} from "./chunk-Z25QXSJY.js";
import {
  CollectionList
} from "./chunk-E3V62NRS.js";
import {
  CollectionListContent
} from "./chunk-AQY7KCFW.js";
import {
  CollectionListItem
} from "./chunk-7VW6JAAF.js";
import {
  CollectionProducts
} from "./chunk-36RFMOFP.js";
import {
  CollectionProductsContent
} from "./chunk-VNWSXYBP.js";
import {
  CollectionProductsItem
} from "./chunk-4VTJWORU.js";
import {
  CollectionFilterFacetsHorizontal
} from "./chunk-736UDKTD.js";
import {
  CollectionFilterHead
} from "./chunk-TYMQECHV.js";
import {
  CollectionFilterLayout
} from "./chunk-VVGKFY2R.js";
import {
  CollectionFilterRefine
} from "./chunk-5SZRWP5C.js";
import {
  CollectionFilterSorting
} from "./chunk-P6HTKRRM.js";
import {
  CollectionFilterVerticalSidebar
} from "./chunk-KEPWWSNM.js";
import {
  CollectionFilteringDrawer
} from "./chunk-N7LYG5BS.js";
import {
  CollectionFilteringHorizontal
} from "./chunk-XL3GMMZ7.js";
import "./chunk-LCGNXR2R.js";
import {
  getAppliedFilter,
  getSortValuesFromParam
} from "./chunk-6VVRWVZQ.js";
import {
  Breadcrumb
} from "./chunk-BHTCAMLG.js";
import {
  CollectionDescription
} from "./chunk-4KAKDJ6C.js";
import {
  CollectionFilter
} from "./chunk-NWLK4NXD.js";
import {
  CollectionFilterContent
} from "./chunk-QJUAGYU4.js";
import {
  CollectionFilterCount
} from "./chunk-QKPDNYLV.js";
import {
  CollectionFilterFacetsDrawer
} from "./chunk-TA2LZJG2.js";
import {
  CollectionFilterFacetsDrawerModal
} from "./chunk-TPU6ZFW4.js";
import {
  CollectionFilterFacetsDrawerTrigger
} from "./chunk-EEQ26QSM.js";
import {
  ArticleDate
} from "./chunk-B54E3OCZ.js";
import {
  ArticleImage
} from "./chunk-JNICGEQU.js";
import {
  ArticleList
} from "./chunk-GAIYHPWP.js";
import {
  ArticleListContent
} from "./chunk-BPLOMWNW.js";
import {
  ArticleListItem
} from "./chunk-UVAYDQKY.js";
import {
  ArticleTags
} from "./chunk-MYZJRLSN.js";
import {
  ArticleTitle
} from "./chunk-VCROERQJ.js";
import {
  BadgeWrapper
} from "./chunk-FYREMKFQ.js";
import {
  Grid
} from "./chunk-4YK5R2Z5.js";
import {
  Hover
} from "./chunk-LZWTQQKW.js";
import {
  HoverContent
} from "./chunk-O7EIJ3O7.js";
import {
  Section
} from "./chunk-QFGEO24R.js";
import {
  Wrapper
} from "./chunk-NAW4UANH.js";
import "./chunk-LJPPDYIJ.js";
import {
  AddToCartButton
} from "./chunk-AWPPI4YX.js";
import {
  ArticleAuthor
} from "./chunk-PDN4AUPP.js";
import {
  ArticleContent
} from "./chunk-NRPPWXIM.js";
import {
  CONFIG,
  XbBuilderShopifyProvider,
  filterBy,
  getShopifySettings,
  hasCollectionListManualSetting,
  objectValues,
  useAppState
} from "./chunk-SSTWVKXD.js";
import {
  Script,
  flattenConnection,
  getPaginationVariables,
  getSelectedProductOptions,
  getSeoMeta
} from "./chunk-NBGQ7WMI.js";
import {
  isEmpty
} from "./chunk-PVLXMXEH.js";
import {
  Paragraph
} from "./chunk-WI2A66ZY.js";
import {
  Qr
} from "./chunk-VHRXPFSE.js";
import {
  Share
} from "./chunk-GMWLFSGF.js";
import {
  ShareItem
} from "./chunk-FUXYZ227.js";
import {
  SocialLink
} from "./chunk-D7OQJERH.js";
import {
  SocialLinkItem
} from "./chunk-EULANMSD.js";
import {
  Table
} from "./chunk-KNEUUX5K.js";
import {
  Col
} from "./chunk-LJI45GUU.js";
import {
  Image
} from "./chunk-P4P3JBMR.js";
import {
  ImageComparison
} from "./chunk-Y6SCBTRZ.js";
import {
  ImageComparisonIcon
} from "./chunk-YYMRVDCK.js";
import {
  ImageComparisonLabel
} from "./chunk-YM75KN42.js";
import {
  List
} from "./chunk-MBCWLNAT.js";
import {
  ListItem
} from "./chunk-FPM4HJQG.js";
import {
  Map
} from "./chunk-3TUS5EJU.js";
import {
  Marquee
} from "./chunk-XUGNF57M.js";
import {
  Divider
} from "./chunk-7A2D4FNK.js";
import {
  Drr
} from "./chunk-GWJGDJZQ.js";
import {
  ExternalVideo
} from "./chunk-JTRWQFNP.js";
import {
  FacebookPage
} from "./chunk-XLMID7QW.js";
import {
  Heading
} from "./chunk-26VU2N77.js";
import {
  HtmlVideo
} from "./chunk-IDJILLBH.js";
import {
  HtmlVideoIcon
} from "./chunk-VEWIVBLY.js";
import {
  Icon
} from "./chunk-XUBMKDZV.js";
import {
  Shape
} from "./chunk-4LGL33JS.js";
import {
  Tabs
} from "./chunk-X2WZDAJ7.js";
import {
  TabsPane
} from "./chunk-3XUA56MM.js";
import {
  Timeline
} from "./chunk-TGUHVIXV.js";
import {
  TimelineItem
} from "./chunk-BUWHRVMW.js";
import {
  TimelineMarker
} from "./chunk-L2OWJWUS.js";
import {
  Button
} from "./chunk-VZ4JDIAH.js";
import {
  Callout
} from "./chunk-FI76SWL6.js";
import {
  LightboxContentHeader
} from "./chunk-U4SN5XID.js";
import {
  LightboxTrigger
} from "./chunk-V5A2T6VG.js";
import {
  Masonry
} from "./chunk-XUUZ3XAZ.js";
import {
  MasonryItem
} from "./chunk-YK2WNK22.js";
import {
  ParallaxHover
} from "./chunk-QCQXH547.js";
import {
  ParallaxScroll
} from "./chunk-EO7ICRJ7.js";
import {
  Progress
} from "./chunk-HFKHWLT4.js";
import {
  SaleBadge
} from "./chunk-XIEW5TLH.js";
import {
  HoverCursor
} from "./chunk-B32TKG34.js";
import {
  HoverCursorItem
} from "./chunk-HIXNZSZE.js";
import {
  HoverShow
} from "./chunk-C77R5UTA.js";
import {
  HoverShowContent
} from "./chunk-OGL264A4.js";
import {
  HoverShowImage
} from "./chunk-QAMFJRNA.js";
import {
  Instagram
} from "./chunk-24HSRVAW.js";
import {
  Lightbox
} from "./chunk-CCXKROOV.js";
import {
  LightboxContent
} from "./chunk-HYPLPWFG.js";
import {
  HeadingTyping
} from "./chunk-DLZ3MRTX.js";
import {
  Hero
} from "./chunk-NKEPPCTN.js";
import {
  HeroContent
} from "./chunk-4GXUUALM.js";
import {
  HeroSlide
} from "./chunk-B7QAW5AA.js";
import {
  Hotspot
} from "./chunk-SXZ2WQQY.js";
import {
  HotspotContent
} from "./chunk-N77A2G7B.js";
import {
  HotspotItem
} from "./chunk-OM5TGIUM.js";
import {
  HotspotTrigger
} from "./chunk-RG4H6ZDL.js";
import {
  CountdownLabel
} from "./chunk-UDZ4GB5Y.js";
import {
  CountdownTime
} from "./chunk-OM7P3QXO.js";
import {
  Counter
} from "./chunk-B3UPNW5G.js";
import {
  FlipBox
} from "./chunk-M2LBSH37.js";
import {
  FlipBoxBack
} from "./chunk-EKWHIQ7B.js";
import {
  FlipBoxFront
} from "./chunk-SJNM7JVS.js";
import {
  Gallery
} from "./chunk-Z3WYNNJU.js";
import {
  GalleryItem
} from "./chunk-3KAHCL6M.js";
import "./chunk-OFJGWOBY.js";
import {
  useLocation,
  useMatches,
  useNavigate
} from "./chunk-Z267FA2X.js";
import "./chunk-ZARKD5FD.js";
import {
  CarouselContent
} from "./chunk-2INUBK5H.js";
import {
  CarouselNavigation
} from "./chunk-LNDWV7FI.js";
import {
  CarouselNavigationNext
} from "./chunk-AQWISMT4.js";
import {
  CarouselNavigationPrev
} from "./chunk-OTJR2ULR.js";
import {
  CarouselPagination
} from "./chunk-IDG3TS7O.js";
import {
  CarouselSlide
} from "./chunk-XB3Y35V2.js";
import {
  Countdown
} from "./chunk-IHLD4EXB.js";
import {
  CountdownItem
} from "./chunk-ZHTLNPIZ.js";
import {
  AccodionIcon
} from "./chunk-KCHL4M64.js";
import {
  Accordion
} from "./chunk-NU3SBIDU.js";
import {
  AccordionContent
} from "./chunk-TZNEFRYC.js";
import {
  AccordionHeader
} from "./chunk-SLY5RXSD.js";
import {
  AccordionItem
} from "./chunk-RMX3IMSY.js";
import {
  AnimateHeading
} from "./chunk-WXXC77PF.js";
import {
  Carousel
} from "./chunk-GSPB3GLJ.js";
import "./chunk-LIC67Q6F.js";
import "./chunk-PEYES2GH.js";
import {
  require_jsx_runtime
} from "./chunk-3YQ7MRFA.js";
import "./chunk-YPUMDGBE.js";
import "./chunk-RAOCVWQR.js";
import "./chunk-AVF5UQVT.js";
import {
  require_react
} from "./chunk-FO5G5QMT.js";
import {
  __toESM
} from "./chunk-DNCPQDPH.js";

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/article-query.js
var ARTICLE_QUERY = `#graphql
  query Article(
    $articleHandle: String!
    $blogHandle: String!
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(language: $language, country: $country) {
    blog(handle: $blogHandle) {
      articleByHandle(handle: $articleHandle) {
        id
        title
        contentHtml
        handle
        tags
        publishedAt
        author: authorV2 {
          name
        }
        image {
          id
          altText
          url
          width
          height
        }
        blog {
          handle
        }
        seo {
          description
          title
        }
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/blog-query.js
var BLOG_QUERY = `#graphql
  query Blog(
    $language: LanguageCode
    $blogHandle: String!
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(language: $language) {
    blog(handle: $blogHandle) {
      title
      seo {
        title
        description
      }
      articles(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ArticleItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          hasNextPage
          endCursor
          startCursor
        }
      }
    }
  }
  fragment ArticleItem on Article {
    author: authorV2 {
      name
    }
    contentHtml
    handle
    id
    image {
      id
      altText
      url
      width
      height
    }
    publishedAt
    title
    tags
    blog {
      handle
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/collections-query.js
var COLLECTIONS_QUERY = `#graphql
  fragment Collection on Collection {
    id
    title
    handle
    image {
      id
      url
      altText
      width
      height
    }
  }
  query StoreCollections(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
    $query: String
  ) @inContext(country: $country, language: $language) {
    collections(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor,
      query: $query
    ) {
      nodes {
        ...Collection
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/fragments.js
var MEDIA_FRAGMENT = `#graphql
  fragment Media on Media {
    __typename
    mediaContentType
    alt
    previewImage {
      url
    }
    ... on MediaImage {
      id
      image {
        id
        url
        width
        height
      }
    }
    ... on Video {
      id
      sources {
        mimeType
        url
      }
    }
    ... on Model3d {
      id
      presentation {
        asJson(format: MODEL_VIEWER)
        id
      }
      sources {
        filesize
        format
        mimeType
        url
      }
    }
    ... on ExternalVideo {
      id
      embedUrl
      host
    }
  }
`;
var PRODUCT_VARIANT_FRAGMENT = `#graphql
  fragment ProductVariantFragment on ProductVariant {
    id
    availableForSale
    quantityAvailable
    selectedOptions {
      name
      value
    }
    image {
      id
      url
      altText
      width
      height
    }
    price {
      amount
      currencyCode
    }
    compareAtPrice {
      amount
      currencyCode
    }
    sku
    title
    unitPrice {
      amount
      currencyCode
    }
    quantityAvailable
    product {
      title
      handle
    }
    storeAvailability(first: 100) {
      nodes {
        available
        pickUpTime
        quantityAvailable
        location {
          name
          address {
            address1
            address2
            city
            country
            countryCode
            formatted
            latitude
            longitude
            phone
            province
            provinceCode
            zip
          }
        }
      }
    }
  }
`;
var PRODUCT_ITEM_FRAGMENT = `#graphql
  ${MEDIA_FRAGMENT}
  ${PRODUCT_VARIANT_FRAGMENT}
  fragment MoneyProductItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment ProductItem on Product {
    id
    handle
    title
    vendor
    featuredImage {
      id
      altText
      url
      width
      height
    }
    options {
      name
      optionValues {
        name
      }
    }
    priceRange {
      minVariantPrice {
        ...MoneyProductItem
      }
      maxVariantPrice {
        ...MoneyProductItem
      }
    }
    media(first: 7) {
      nodes {
        ...Media
      }
    }
    variants(first: 1) {
      nodes {
        ...ProductVariantFragment
      }
    }
    updatedAt
    totalInventory
    descriptionHtml
    description
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/product-query.js
var PRODUCT_QUERY = `#graphql
  ${MEDIA_FRAGMENT}
  ${PRODUCT_VARIANT_FRAGMENT}
  query Product(
    $country: CountryCode
    $language: LanguageCode
    $handle: String!
    $selectedOptions: [SelectedOptionInput!]!
  ) @inContext(country: $country, language: $language) {
    product(handle: $handle) {
      id
      title
      vendor
      handle
      descriptionHtml
      description
      encodedVariantExistence
      encodedVariantAvailability
      options {
        name
        optionValues {
          name
          firstSelectableVariant {
          ...ProductVariantFragment
          }
          swatch {
            color
            image {
              previewImage {
                url
              }
            }
          }
        }
      }
      selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
        ...ProductVariantFragment
      }
      adjacentVariants (selectedOptions: $selectedOptions) {
       ...ProductVariantFragment
      }
      featuredImage {
        id
        altText
        url
        width
        height
      }
      media(first: 100) {
        nodes {
          ...Media
        }
      }
      variants(first: 100) {
        nodes {
          ...ProductVariantFragment
        }
      }
      seo {
        description
        title
      }
      updatedAt
      totalInventory
      collections(first: 1) {
        edges {
          node {
            handle
            title
          }
        }
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/root-settings-short.js
var rootSettingsShort = {
  paragraph: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  button: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "stock-counter": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "star-rating": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "shopify-pagination": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-vendor": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-variants-name": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-variants-dropdown-value-item": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-variants-dropdown-value": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-variants-dropdown": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-title": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-swatches-value-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-swatches-value": {
    settings: []
  },
  "product-swatches": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-quantity-plus": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-quantity-minus": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-quantity-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-quantity": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-price-wrapper": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-price": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-metafield": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-media-list-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-media-list": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      }
    ]
  },
  "product-media": {
    settings: []
  },
  "product-main-media": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-list-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-list-hover-image": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-list-content": {
    settings: []
  },
  "product-list": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-description": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-compare-at-price": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-badge-sale": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "product-badge-new": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "pickup-availabilities-modal": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "pickup-availabilities": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "payment-methods-shop-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "payment-methods-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "payment-methods": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "featured-product": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "dynamic-checkout": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "customer-form-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "customer-form-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "customer-form-field": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "customer-form": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-title": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-metafield": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-list-content": {
    settings: []
  },
  "collection-list": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-image": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-description": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "badge-wrapper": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "article-title": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-tags": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-list-content": {
    settings: []
  },
  "article-list": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "add-to-cart-button": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  wrapper: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  section: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "hover-content": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  hover: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  grid: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  col: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  vitals: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  trustoo: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  stamped: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "shopify-subscriptions": {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  ryviu: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  rivyo: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  omnisend: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  okendo: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  loox: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  lai: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "judge-me-reviews": {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  fera: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  dadao: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "custom-extension": {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  ali: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  aftership: {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "social-link-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "social-link": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "share-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  share: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  qr: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  marquee: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  map: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "list-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  list: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "image-comparison-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "image-comparison-icon": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "image-comparison": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  image: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  icon: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "html-video-icon": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "html-video": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  heading: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "external-video": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  divider: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  callout: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  shape: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "masonry-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  masonry: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  instagram: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "hero-slide": {
    settings: []
  },
  "hero-content": {
    settings: []
  },
  hero: {
    settings: []
  },
  "heading-typing": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "gallery-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  gallery: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "custom-code": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "animate-heading": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "accordion-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "accordion-header": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "accordion-content": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  accordion: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "accodion-icon": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-quickview-modal": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "product-quickview": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "form-reset-password-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-reset-password-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-reset-password": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-register-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-register-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-register": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-contact-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-contact": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-active-account-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-active-account-input": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "form-active-account": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "feature-article": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  breadcrumb: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-image": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-date": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-content": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-author": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  table: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "facebook-page": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  drr: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "timeline-marker": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "timeline-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  timeline: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "tabs-pane": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  tabs: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  progress: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "parallax-scroll": {
    settings: []
  },
  "parallax-hover": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "lightbox-trigger": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "lightbox-content-header": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "lightbox-content": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  lightbox: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "hotspot-trigger": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "hotspot-item": {
    settings: []
  },
  "hotspot-content": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  hotspot: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "flip-box-front": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "flip-box-back": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "flip-box": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  counter: {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "countdown-time": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "countdown-label": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "countdown-item": {
    settings: []
  },
  countdown: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-slide": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-pagination": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-navigation-prev": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-navigation-next": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-navigation": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "carousel-content": {
    settings: []
  },
  carousel: {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "hover-cursor-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "hover-cursor": {
    settings: []
  },
  "sale-badge": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-list-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "article-list-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "featured-article": {
    settings: [
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "collection-products-item": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-products-content": {
    settings: []
  },
  "collection-products": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "metafield-countdown": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      }
    ]
  },
  "page-title": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filtering-vertical": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filtering-horizontal": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filtering-drawer": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-vertical-sidebar": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-sorting": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-refine": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-head-vertical": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-head-other": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-facets-horizontal": {
    settings: []
  },
  "collection-filter-facets-drawer-trigger": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-facets-drawer-modal": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-facets-drawer": {
    settings: []
  },
  "collection-filter-content": {
    settings: []
  },
  "collection-filter": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "shopify-forms": {
    settings: [
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-layout": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-head": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "collection-filter-count": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "hover-show-image": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "hover-show-content": {
    settings: []
  },
  "hover-show": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "sub-menu": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "mega-menu": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "language-selector": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "currency-selector": {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "menu-hamburger": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  navigation: {
    settings: []
  },
  "menu-link": {
    settings: [
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  },
  "menu-item": {
    settings: []
  },
  menu: {
    settings: [
      {
        id: "modifier",
        type: "modifier"
      },
      {
        id: "navItemStyle",
        type: "styles"
      },
      {
        id: "navItemActiveStyle",
        type: "styles"
      },
      {
        id: "styles",
        type: "styles"
      },
      {
        id: "css_code",
        type: "css_code"
      }
    ]
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/constants.js
var FIELD_TYPES = {
  TEXT: "text",
  CHECKBOX: "checkbox",
  SLIDER: "slider",
  SELECT: "select",
  CHILDREN_ID: "children_id",
  PARENT_ID: "parent_id",
  ATTRIBUTES: "attributes",
  VISIBILITY: "visibility",
  ACTION: "action",
  STYLES: "styles",
  MODIFIER: "modifier",
  CSS_CODE: "css_code",
  IMAGE_PICKER: "image_picker",
  IMAGES_PICKER: "images_picker",
  VIDEO_PICKER: "video_picker",
  VIDEOS_PICKER: "videos_picker",
  FONT_PICKER: "font_picker",
  COLLECTION_PICKER: "collection_picker",
  COLLECTION_LIST: "collection_list",
  PRODUCT_PICKER: "product_picker",
  PRODUCT_LIST: "product_list",
  PAGE_PICKER: "page_picker",
  BLOG_PICKER: "blog_picker",
  ARTICLE_PICKER: "article_picker",
  COLOR: "color",
  VIDEO_URL: "video_url",
  BUTTON_GROUP: "button_group",
  LIQUID: "liquid",
  ICON_PICKER: "icon_picker",
  RICH_TEXT: "rich_text",
  SWITCH: "switch",
  GRID_AREA: "grid_area",
  TABLE: "table",
  DATE_PICKER: "date_picker",
  KEYFRAMES: "keyframes",
  SCREEN_PICKER: "screen_picker",
  CAROUSEL_ID: "carousel_id",
  PRESET: "preset",
  MEGA_MENU: "mega_menu",
  NAVIGATION: "navigation"
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/object/object-entries.js
var objectEntries = (obj) => Object.entries(obj);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/get-css-variable-parallax/index.js
var getCssVariableParallax = (styles) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
  if (!((_b = (_a = styles == null ? void 0 : styles.normal) == null ? void 0 : _a.background) == null ? void 0 : _b["background-image-parallax"])) {
    return "";
  }
  const parallax = (_c = styles == null ? void 0 : styles.normal) == null ? void 0 : _c.background;
  const bgRepeatDesktop = ((_d = parallax == null ? void 0 : parallax["background-repeat"]) == null ? void 0 : _d.desktop) || "repeat";
  const bgRepeatTablet = ((_e = parallax == null ? void 0 : parallax["background-repeat"]) == null ? void 0 : _e.tablet) || bgRepeatDesktop;
  const bgRepeatMobile = ((_f = parallax == null ? void 0 : parallax["background-repeat"]) == null ? void 0 : _f.mobile) || bgRepeatTablet || bgRepeatDesktop;
  const bgPositionDesktop = ((_g = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _g.desktop) ? `${(_h = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _h.desktop.x}% ${(_i = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _i.desktop.y}%` : "center";
  const bgPositionTablet = ((_j = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _j.tablet) ? `${(_k = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _k.tablet.x}% ${(_l = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _l.tablet.y}%` : bgPositionDesktop;
  const bgPositionMobile = ((_m = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _m.mobile) ? `${(_n = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _n.mobile.x}% ${(_o = parallax == null ? void 0 : parallax["background-position"]) == null ? void 0 : _o.mobile.y}%` : bgPositionTablet || bgPositionDesktop;
  const bgSizeDesktop = ((_p = parallax == null ? void 0 : parallax["background-size"]) == null ? void 0 : _p.desktop) || "cover";
  const bgSizeTablet = ((_q = parallax == null ? void 0 : parallax["background-size"]) == null ? void 0 : _q.tablet) || bgSizeDesktop;
  const bgSizeMobile = ((_r = parallax == null ? void 0 : parallax["background-size"]) == null ? void 0 : _r.mobile) || bgSizeTablet || bgSizeDesktop;
  const parallaxDesktop = (_t = (_s = parallax == null ? void 0 : parallax["background-image"]) == null ? void 0 : _s.desktop) == null ? void 0 : _t.url;
  const parallaxTablet = ((_v = (_u = parallax == null ? void 0 : parallax["background-image"]) == null ? void 0 : _u.tablet) == null ? void 0 : _v.url) || parallaxDesktop;
  const parallaxMobile = ((_x = (_w = parallax == null ? void 0 : parallax["background-image"]) == null ? void 0 : _w.mobile) == null ? void 0 : _x.url) || parallaxTablet || parallaxDesktop;
  return `--bg-repeat-desktop: ${bgRepeatDesktop};--bg-repeat-tablet: ${bgRepeatTablet};--bg-repeat-mobile: ${bgRepeatMobile};--bg-position-desktop: ${bgPositionDesktop};--bg-position-tablet: ${bgPositionTablet};--bg-position-mobile: ${bgPositionMobile};--bg-size-desktop: ${bgSizeDesktop};--bg-size-tablet: ${bgSizeTablet};--bg-size-mobile: ${bgSizeMobile};--parallax-desktop: url(${parallaxDesktop});--parallax-tablet: url(${parallaxTablet});--parallax-mobile: url(${parallaxMobile});`;
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/get-styles/index.js
function orientedName(prop, orient) {
  if (prop === "padding" || prop === "margin") {
    return `${prop}-${orient}`;
  }
  if (prop === "border-width") {
    return `border-${orient}-width`;
  }
  if (prop === "border-color") {
    return `border-${orient}-color`;
  }
  if (prop === "border-radius") {
    if (orient === "top") {
      return "border-start-start-radius";
    }
    if (orient === "right") {
      return "border-start-end-radius";
    }
    if (orient === "bottom") {
      return "border-end-end-radius";
    }
    if (orient === "left") {
      return "border-end-start-radius";
    }
  }
  return "";
}
function getShortenOrientedWithValue(prop, value) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  let cssOrientWithValue = "";
  if (value.top && ((_a = value.top) == null ? void 0 : _a.value) != null && value.left && ((_b = value.left) == null ? void 0 : _b.value) != null && value.right && ((_c = value.right) == null ? void 0 : _c.value) != null && value.bottom && ((_d = value.bottom) == null ? void 0 : _d.value) != null) {
    if ((/* @__PURE__ */ new Set([value.top.value, value.left.value, value.right.value, value.bottom.value])).size === 1 && (/* @__PURE__ */ new Set([value.top.unit, value.left.unit, value.right.unit, value.bottom.unit])).size === 1) {
      cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit ?? "px"};`;
    } else if (value.top.value === value.bottom.value && value.top.unit === value.bottom.unit && value.left.value === value.right.value && value.left.unit === value.right.unit) {
      cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit ?? "px"};`;
    } else if (value.left.value === value.right.value && value.left.unit === value.right.unit) {
      cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit} ${value.bottom.value}${value.bottom.unit ?? "px"};`;
    } else {
      cssOrientWithValue = `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit} ${value.bottom.value}${value.bottom.unit} ${value.left.value}${value.left.unit ?? "px"};`;
    }
  } else {
    if (value.top && ((_e = value.top) == null ? void 0 : _e.value) != null) {
      cssOrientWithValue += `${orientedName(prop, "top")}: ${value.top.value}${value.top.unit ?? "px"};`;
    }
    if (value.left && ((_f = value.left) == null ? void 0 : _f.value) != null) {
      cssOrientWithValue += `${orientedName(prop, "left")}: ${value.left.value}${value.left.unit ?? "px"};`;
    }
    if (value.right && ((_g = value.right) == null ? void 0 : _g.value) != null) {
      cssOrientWithValue += `${orientedName(prop, "right")}: ${value.right.value}${value.right.unit ?? "px"};`;
    }
    if (value.bottom && ((_h = value.bottom) == null ? void 0 : _h.value) != null) {
      cssOrientWithValue += `${orientedName(prop, "bottom")}: ${value.bottom.value}${value.bottom.unit ?? "px"};`;
    }
  }
  return cssOrientWithValue;
}
function getShortenOrientedWithoutValue(prop, value) {
  let cssOrientWithValue = "";
  if (value.top && value.left && value.right && value.bottom) {
    if ((/* @__PURE__ */ new Set([value.top, value.left, value.right, value.bottom])).size === 1) {
      cssOrientWithValue = `${prop}: ${value.top};`;
    } else if (value.top === value.bottom && value.left === value.right) {
      cssOrientWithValue = `${prop}: ${value.top} ${value.right};`;
    } else if (value.left === value.right) {
      cssOrientWithValue = `${prop}: ${value.top} ${value.right} ${value.bottom};`;
    } else {
      cssOrientWithValue = `${prop}: ${value.top} ${value.right} ${value.bottom} ${value.left};`;
    }
  } else {
    if (value.top) {
      cssOrientWithValue += `${orientedName(prop, "top")}: ${value.top};`;
    }
    if (value.left) {
      cssOrientWithValue += `${orientedName(prop, "left")}: ${value.left};`;
    }
    if (value.right) {
      cssOrientWithValue += `${orientedName(prop, "right")}: ${value.right};`;
    }
    if (value.bottom) {
      cssOrientWithValue += `${orientedName(prop, "bottom")}: ${value.bottom};`;
    }
  }
  return cssOrientWithValue;
}
function getBackgroundGradient(value) {
  let points = "";
  if (typeof value === "object") {
    [...value.points].sort((a, b) => a.position - b.position).forEach((point) => {
      points += `, ${point.color} ${point.position}%`;
    });
    return `background-image: linear-gradient(${Math.round(value.rotate)}deg${points});`;
  }
  return "";
}
function getShadow(value) {
  let cssShadow = "";
  value == null ? void 0 : value.forEach((shadow, index) => {
    var _a;
    if (!(!shadow.horizontal || !shadow.vertical || shadow.horizontal.value == null || shadow.vertical.value == null)) {
      cssShadow += `${shadow.horizontal.value}${shadow.horizontal.unit} ${shadow.vertical.value}${shadow.vertical.unit}`;
      if (shadow.blur.value != null) {
        cssShadow += ` ${shadow.blur.value}${shadow.blur.unit}`;
      }
      if (((_a = shadow.spread) == null ? void 0 : _a.value) != null) {
        cssShadow += ` ${shadow.spread.value}${shadow.spread.unit}`;
      }
      cssShadow += ` ${shadow.color}${index !== value.length - 1 ? ", " : ""}`;
    }
  });
  if (cssShadow[cssShadow.length - 1] === ",") {
    cssShadow.replace(/,$/, ";");
  }
  return cssShadow;
}
function getTransform(value, device) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  let cssTransform = "";
  if ((_a = value.translateX) == null ? void 0 : _a[device]) {
    cssTransform += `translateX(${(_b = value.translateX[device]) == null ? void 0 : _b.value}${(_c = value.translateX[device]) == null ? void 0 : _c.unit}) `;
  }
  if ((_d = value.translateY) == null ? void 0 : _d[device]) {
    cssTransform += `translateY(${(_e = value.translateY[device]) == null ? void 0 : _e.value}${(_f = value.translateY[device]) == null ? void 0 : _f.unit}) `;
  }
  if ((_g = value.rotate) == null ? void 0 : _g[device]) {
    cssTransform += `rotate(${(_h = value.rotate[device]) == null ? void 0 : _h.value}deg) `;
  }
  if ((_i = value.scale) == null ? void 0 : _i[device]) {
    cssTransform += `scale(${(_j = value.scale[device]) == null ? void 0 : _j.value}) `;
  }
  return cssTransform ? `${cssTransform.trim()}` : cssTransform;
}
function getFieldNotHaveDevice(prop, value, device) {
  if (prop === "font-family" && value.fontFamily && device === "desktop") {
    return `font-family: '${value.fontFamily}';`;
  }
  if (prop === "transition" && value.value && device === "desktop") {
    return `${prop}: ${value.value}${value.unit};`;
  }
  if (prop === "backdrop-filter" && value.value && device === "desktop") {
    return `${prop}: blur(${value.value}${value.unit});`;
  }
  if (prop === "overflow" && value && device === "desktop") {
    return `${prop}: ${value};`;
  }
  if (prop === "transform") {
    const cssTransform = getTransform(value, device);
    return cssTransform ? `${prop}: ${cssTransform};` : "";
  }
  return "";
}
function getPropValue(prop, value, options) {
  if (/^(font-size|line-height|letter-spacing|width|height)$/g.test(prop)) {
    return value.value ? `${prop}: ${value.value}${value.unit};` : "";
  }
  if (prop === "opacity" && value.value != null) {
    return value.value !== 100 ? `opacity: ${(value.value / 100).toFixed(2)};` : "";
  }
  if (prop === "font-weight" && value) {
    return `${prop}: ${value};`;
  }
  if (prop === "blur" && value.value != null) {
    return `filter: blur(${value.value}${value.unit});`;
  }
  if (prop === "text-stroke-width" && value.value != null) {
    return `-webkit-text-stroke-width: ${value.value}${value.unit};`;
  }
  if (prop === "text-stroke-color" && value) {
    return `-webkit-text-stroke-color: ${value};`;
  }
  if (prop === "background-image" && options.backgroundType === "image") {
    return `${prop}: url('${value.url}');`;
  }
  if (prop === "background-color" && (options.backgroundType === "standard" || !options.backgroundType)) {
    return `${prop}: ${value};`;
  }
  if (/^(box-shadow|text-shadow)$/g.test(prop)) {
    const shadow = getShadow(value);
    return (value == null ? void 0 : value.length) && shadow ? `${prop}: ${shadow};` : "";
  }
  if (prop === "background-position") {
    return `${prop}: ${value.x}% ${value.y}%;`;
  }
  if (/^(padding|margin|border-width|border-radius)$/g.test(prop)) {
    const cssGetShortenOrientedWithValue = getShortenOrientedWithValue(prop, value);
    return cssGetShortenOrientedWithValue;
  }
  if (prop === "border-color") {
    const cssGetShortenOrientedWithoutValue = getShortenOrientedWithoutValue(prop, value);
    return cssGetShortenOrientedWithoutValue;
  }
  if (prop === "background-gradient" && (options.backgroundType === "standard" || !options.backgroundType)) {
    const cssBackgroundGradient = getBackgroundGradient(value);
    return cssBackgroundGradient;
  }
  if (prop === "width-fit-content" && value) {
    return "width: fit-content;";
  }
  if (prop === "background-overlay" || prop === "background-video") {
    return "";
  }
  return `${prop}: ${value};`;
}
function getCssWithDevice(device, styles) {
  if (!styles) {
    return "";
  }
  return Object.entries(styles).map(([prop, value]) => {
    if (!value[device]) {
      return getFieldNotHaveDevice(prop, value, device);
    }
    return getPropValue(prop, value[device], {
      backgroundType: styles == null ? void 0 : styles["background-type"]
    });
  }).join("");
}
function flatStyles(styles, pseudo) {
  var _a, _b, _c, _d, _e, _f;
  return {
    ...(_a = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _a.typography,
    ...(_b = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _b.background,
    ...(_c = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _c.border,
    ...(_d = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _d.spacing,
    ...(_e = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _e.effect,
    ...(_f = styles == null ? void 0 : styles[pseudo]) == null ? void 0 : _f.advanced
  };
}
function beautyCss(selector, css) {
  const cssTrim = css.trim();
  if (!cssTrim) {
    return "";
  }
  return `
  ${selector} {
    ${cssTrim}
  }
  `;
}
function assignVariableCssCode(selector, cssCode) {
  return cssCode ? cssCode.replaceAll("$element", selector) : "";
}
function removeEmptyLine(css) {
  return css.replace(/^\s*$(?:\r\n?|\n)/gm, "");
}
function getTabletStyles(selector, tabletNormal, tabletHover, tabletActive, cssCode) {
  const css = `
    ${beautyCss(`${selector}`, tabletNormal)}
    ${beautyCss(`${selector}:hover`, tabletHover)}
    ${beautyCss(`${selector}:active`, tabletActive)}
    ${cssCode}
  `.trim();
  if (css) {
    return `
      @media (min-width: 768px) and (max-width: 991px) {
        ${css}
      }
    `;
  }
  return "";
}
function getMobileStyles(selector, mobileNormal, mobileHover, mobileActive, styles, cssCode, enableBackgroundImageMobile, backgroundImageValue) {
  var _a, _b;
  const normal = `${mobileNormal}
${enableBackgroundImageMobile && backgroundImageValue ? `background-image: url(${backgroundImageValue.url});` : ""}`;
  const bgVideo = ((_b = (_a = styles == null ? void 0 : styles.normal) == null ? void 0 : _a.background) == null ? void 0 : _b["mobile-static-image"]) ? "display: none !important;" : "";
  const css = `
    ${beautyCss(`${selector}`, normal)}
    ${beautyCss(".xb-bg-video", bgVideo)}
    ${beautyCss(`${selector}:hover`, mobileHover)}
    ${beautyCss(`${selector}:active`, mobileActive)}
    ${cssCode}
  `.trim();
  if (css) {
    return `
      @media (max-width: 767px) {
        ${css}
      }
    `;
  }
  return "";
}
function getSelector(className) {
  return `body .${className}`;
}
function getStyles(className, styles, cssCode) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const normal = flatStyles(styles, "normal");
  const hover = flatStyles(styles, "hover");
  const active = flatStyles(styles, "active");
  const desktopNormal = getCssWithDevice("desktop", normal);
  const desktopHover = getCssWithDevice("desktop", hover);
  const desktopActive = getCssWithDevice("desktop", active);
  const tabletNormal = getCssWithDevice("tablet", normal);
  const tabletHover = getCssWithDevice("tablet", hover);
  const tabletActive = getCssWithDevice("tablet", active);
  const mobileNormal = getCssWithDevice("mobile", normal);
  const mobileHover = getCssWithDevice("mobile", hover);
  const mobileActive = getCssWithDevice("mobile", active);
  const selector = getSelector(className);
  const enableBackgroundImageMobile = !!((_b = (_a = styles == null ? void 0 : styles.normal) == null ? void 0 : _a.background) == null ? void 0 : _b["background-image-mobile"]) && ((_d = (_c = styles == null ? void 0 : styles.normal) == null ? void 0 : _c.background) == null ? void 0 : _d["mobile-static-image"]);
  const backgroundImageValue = (_f = (_e = styles == null ? void 0 : styles.normal) == null ? void 0 : _e.background) == null ? void 0 : _f["background-image-mobile"];
  const cssCodeStr = typeof cssCode === "string" ? assignVariableCssCode(selector, cssCode) : "";
  const hoverRelationSelector = ((_h = (_g = styles == null ? void 0 : styles.hover) == null ? void 0 : _g["hover-relation"]) == null ? void 0 : _h["hover-parent"]) && ((_j = (_i = styles == null ? void 0 : styles.hover) == null ? void 0 : _i["hover-relation"]) == null ? void 0 : _j["hover-parent"]) !== className ? `.${styles.hover["hover-relation"]["hover-parent"]}:hover ${selector}` : `${selector}:hover`;
  return removeEmptyLine(`
    ${beautyCss(selector, `${desktopNormal}
${getCssVariableParallax(styles)}`)}
    ${beautyCss(hoverRelationSelector, desktopHover)}
    ${beautyCss(`${selector}:active`, desktopActive)}
    ${isEmpty(cssCode || {}) ? "" : cssCodeStr}
    ${assignVariableCssCode(selector, cssCode == null ? void 0 : cssCode.desktop)}
    ${getTabletStyles(selector, tabletNormal, tabletHover, tabletActive, assignVariableCssCode(selector, cssCode == null ? void 0 : cssCode.tablet))}
    ${getMobileStyles(selector, mobileNormal, mobileHover, mobileActive, styles, assignVariableCssCode(selector, cssCode == null ? void 0 : cssCode.mobile), enableBackgroundImageMobile, backgroundImageValue)}
  `);
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-all-styles/index.js
var CLASS_PLACEHOLDER = "_____CLASS_____";
function getAllStylesFromSettings(rootSettings, settings2 = {}) {
  return rootSettings.reduce((acc, rootSetting) => {
    if (rootSetting.type !== FIELD_TYPES.STYLES) {
      return acc;
    }
    const setting = settings2 == null ? void 0 : settings2[rootSetting.id];
    if (isEmpty(setting)) {
      return acc;
    }
    return `${acc}
${getStyles(CLASS_PLACEHOLDER, setting, settings2.css_code || {})}`;
  }, "");
}
function getAllStyles(currentElements, elements) {
  const merged = objectValues(currentElements).reduce((acc, currentElement) => {
    const element = elements[currentElement.elementId];
    if (!element) {
      return acc;
    }
    const className = currentElement.id;
    const cssArr = getAllStylesFromSettings(element.settings ?? [], currentElement.settings);
    if (!cssArr) {
      return acc;
    }
    return {
      ...acc,
      [cssArr]: acc[cssArr] ? [...acc[cssArr], className] : [className]
    };
  }, {});
  const allCss = objectEntries(merged).map(([css, classNames]) => {
    const result = css.replace(new RegExp(`(\\..*:hover\\s*\\.)(${CLASS_PLACEHOLDER})`, "g"), (_value, p1) => classNames.map((className) => `${p1}${className}`).join(", ")).replace(new RegExp(`${CLASS_PLACEHOLDER}\\s`, "g"), classNames.join(", .")).replaceAll(`${CLASS_PLACEHOLDER}:hover`, classNames.map((className) => `${className}:hover`).join(", .")).replaceAll(`${CLASS_PLACEHOLDER}:active`, classNames.map((className) => `${className}:active`).join(", .")).trim();
    return result;
  });
  return allCss;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-css-code/index.js
function getCssTablet(tablet) {
  if (!tablet) {
    return "";
  }
  return `
    @media (min-width: 768px) and (max-width: 991px) {
      ${tablet}
    }
  `;
}
function getCssMobile(mobile) {
  if (!mobile) {
    return "";
  }
  return `
    @media (max-width: 767px) {
      ${mobile}
    }
  `;
}
function getCssCodeFromSettings(rootSettings, elementId, settings2 = {}) {
  return rootSettings.reduce((acc, rootSetting) => {
    if (rootSetting.type !== FIELD_TYPES.CSS_CODE) {
      return acc;
    }
    const setting = settings2 == null ? void 0 : settings2[rootSetting.id];
    if (typeof setting === "string") {
      if (!setting) {
        return acc;
      }
      return `
          ${acc}
          ${setting}
        `;
    }
    if (isEmpty(setting)) {
      return acc;
    }
    return `
        ${acc}
        ${(setting == null ? void 0 : setting.desktop) ?? ""}
        ${getCssTablet(setting == null ? void 0 : setting.tablet)}
        ${getCssMobile(setting == null ? void 0 : setting.mobile)}
      `;
  }, "").replace(/\$element/g, `.${elementId}`).trim();
}
function getCssCode(currentElements, elements) {
  const cssCode = objectValues(currentElements).map((currentElement) => {
    const element = elements[currentElement.elementId];
    if (!element) {
      return "";
    }
    return getCssCodeFromSettings(element.settings ?? [], currentElement.id, currentElement.settings);
  });
  const beauty = [...new Set(cssCode)].join("\n").trim();
  return beauty;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-fonts/index.js
function getFontsFromSettings(settings2 = {}) {
  return objectValues(settings2).reduce((acc, value) => {
    var _a, _b;
    if (value == null ? void 0 : value.fontFamily) {
      return [...acc, value];
    }
    if ((_b = (_a = value == null ? void 0 : value.normal) == null ? void 0 : _a.typography) == null ? void 0 : _b["font-family"]) {
      return [...acc, value.normal.typography["font-family"]];
    }
    return acc;
  }, []);
}
function getFonts(data) {
  if (data.currentElements) {
    return objectValues(data.currentElements).flatMap((element) => {
      return getFontsFromSettings(element.settings);
    });
  }
  return objectValues(data).flatMap((settings2) => getFontsFromSettings(settings2));
}
function generateGoogleFontUrl({ family, variants }) {
  const $family = family.replace(/\s/g, "+");
  const $variants = variants.map(({ value }) => value).join(",");
  return `https://fonts.googleapis.com/css?family=${$family}${variants.length > 0 ? `:${$variants}` : ""}`;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/object/object-keys.js
var objectKeys = (obj) => Object.keys(obj);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/get-css-variable-modifier/index.js
var getPropValue2 = (prop, value) => {
  if (/\b(font-size|line-height|letter-spacing|opacity|width|height|slider)\b/.test(prop)) {
    if (value.value != null) {
      if (value.unit) {
        return `${prop}: ${value.value}${value.unit};`;
      }
      return `${prop}: ${value.value};`;
    }
    return "";
  }
  if (prop.includes("blur")) {
    return `filter: blur(${value.value}${value.unit});`;
  }
  if (prop.includes("background-image")) {
    return `${prop}: url(${value.url});`;
  }
  if (prop.includes("background-position")) {
    return `${prop}: ${value.x}% ${value.y}%;`;
  }
  if (/\b(padding|margin|border-width|border-radius)\b/.test(prop)) {
    return `${prop}: ${value.top.value}${value.top.unit} ${value.right.value}${value.right.unit} ${value.bottom.value}${value.bottom.unit} ${value.left.value}${value.left.unit};`;
  }
  return `${prop}: ${value};`;
};
var getCssContentVariableModifier = (cssVariables) => {
  const css = {
    desktop: "",
    tablet: "",
    mobile: ""
  };
  objectKeys(cssVariables).forEach((cssVar) => {
    if (cssVar.includes("device")) {
      if (cssVariables[cssVar].desktop) {
        css.desktop += getPropValue2(cssVar, cssVariables[cssVar].desktop);
      }
      if (cssVariables[cssVar].tablet) {
        css.tablet += getPropValue2(cssVar, cssVariables[cssVar].tablet);
      }
      if (cssVariables[cssVar].mobile) {
        css.mobile += getPropValue2(cssVar, cssVariables[cssVar].mobile);
      }
    } else {
      css.desktop += getPropValue2(cssVar, cssVariables[cssVar]);
    }
  });
  return css;
};
var getCssVariableModifier = (className, cssVariables) => {
  let css = "";
  if (className && cssVariables) {
    const cssDevice = getCssContentVariableModifier(cssVariables);
    if (cssDevice.desktop) {
      css += `.${className}{${cssDevice.desktop}}
`;
    }
    if (cssDevice.tablet) {
      css += `@media screen and (min-width: 768px) and (max-width: 1024px) {
        .${className} {
          ${cssDevice.tablet}
        }
      }`;
    }
    if (cssDevice.mobile) {
      css += `@media screen and (max-width: 767px) {
        .${className} {
          ${cssDevice.mobile}
        }
      }`;
    }
  }
  return css;
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-modifiers-css-variables/index.js
function getModifiersCssVariablesFromSettings(rootSettings, currentElementId, settings2 = {}) {
  return rootSettings.reduce((acc, rootSetting) => {
    if (rootSetting.type !== FIELD_TYPES.MODIFIER) {
      return acc;
    }
    const setting = settings2 == null ? void 0 : settings2[rootSetting.id];
    if (!(setting == null ? void 0 : setting.cssVariables)) {
      return acc;
    }
    return [...acc, getCssVariableModifier(currentElementId, setting.cssVariables)];
  }, []);
}
function getModifiersCssVariables(currentElements, elements) {
  const allFiles = objectValues(currentElements).flatMap((currentElement) => {
    const element = elements[currentElement.elementId];
    if (!element) {
      return "";
    }
    return getModifiersCssVariablesFromSettings(element.settings ?? [], currentElement.id, currentElement.settings);
  });
  return [...new Set(allFiles)];
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-global-settings/field-control-values-to-variables.js
function fieldControlValuesToVariables(value, fieldsetName = "", hasPreset = true, result = {}) {
  const preset = hasPreset ? "--xb-" : "";
  const newFieldsetName = fieldsetName !== "" ? `${fieldsetName}-` : "";
  Object.keys(value).forEach((key) => {
    if (typeof value[key] === "object" && !Array.isArray(value[key])) {
      if ("value" in value[key] && "unit" in value[key]) {
        result[`${preset}${newFieldsetName}${key}`] = `${value[key].value}${value[key].unit}`;
      } else if ("value" in value[key]) {
        result[`${preset}${newFieldsetName}${key}`] = value[key].value;
      } else {
        fieldControlValuesToVariables(value[key], `${newFieldsetName}${key}`, hasPreset, result);
      }
    } else {
      result[`${preset}${newFieldsetName}${key}`] = value[key];
    }
  });
  return result;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-global-settings/helpers/obj-to-css-props.js
function convertObjectToCSSProperties(obj, setImportant = false) {
  return Object.entries(obj).map(([key, value]) => {
    const importantSuffix = setImportant ? " !important" : "";
    return value ? `${key}: ${value}${importantSuffix};` : "";
  }).filter(Boolean).join("\n");
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-global-settings/helpers/get-page-background-settings.js
function convertDataObjectToColor(data) {
  const { rotate, points } = data;
  if ("rotate" in data && "points" in data && Array.isArray(points) && points.length > 0) {
    const result = points.map((point) => `${point.color} ${point.position}%`);
    return `linear-gradient(${Math.round(rotate)}deg, ${result.join(", ")})`;
  }
  return "";
}
function getBackgroundFieldResult(value, result = {}) {
  Object.keys(value).forEach((key) => {
    let convertColorResult;
    switch (key) {
      case "background-gradient":
        convertColorResult = convertDataObjectToColor(value[key]);
        result["background-image"] = convertColorResult;
        break;
      case "background-image":
        result[key] = `url("${value[key].url}")`;
        break;
      case "background-position":
        result[key] = `${value[key].x}% ${value[key].y}%`;
        break;
      case "background-type":
        break;
      default:
        result[key] = value[key];
        break;
    }
  });
  return result;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-global-settings/get-css-settings.js
function getGlobalCssSettings(globalOrPageSettings) {
  var _a;
  let resultLayoutColor = {};
  let resultBackgroundColor = {};
  let customCss = "";
  Object.keys(globalOrPageSettings).forEach((key) => {
    if (key === "layout" || key === "colors") {
      resultLayoutColor = {
        ...resultLayoutColor,
        ...fieldControlValuesToVariables(globalOrPageSettings[key], key)
      };
    } else if (key === "background") {
      resultBackgroundColor = {
        ...resultBackgroundColor,
        ...getBackgroundFieldResult(globalOrPageSettings[key])
      };
    } else if (key === "customCode") {
      const { css } = globalOrPageSettings[key];
      customCss = css;
    }
  });
  let pageSettingsVars = convertObjectToCSSProperties(resultLayoutColor);
  const pageBackgroundVars = convertObjectToCSSProperties(resultBackgroundColor, true);
  if (!!(globalOrPageSettings == null ? void 0 : globalOrPageSettings.additionalSettings) && !((_a = globalOrPageSettings == null ? void 0 : globalOrPageSettings.additionalSettings) == null ? void 0 : _a.isOverrideGlobalSettings)) {
    pageSettingsVars = "";
  }
  return `
    :root {
      ${pageSettingsVars}
    }
    body {
      ${pageBackgroundVars}
    }
    ${customCss}
  `;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/get-global-settings/get-js-settings.js
function getGlobalJsSettings(globalOrPageSettings) {
  let customJs = "";
  let resultAnimate = {};
  Object.keys(globalOrPageSettings).forEach((key) => {
    if (key === "animate") {
      resultAnimate = {
        ...resultAnimate,
        ...fieldControlValuesToVariables(globalOrPageSettings[key], "", false)
      };
    }
    if (key === "customCode") {
      const { js } = globalOrPageSettings[key];
      customJs = js;
    }
  });
  return `
    window.settings = {
      ${JSON.stringify(resultAnimate, null, 2).replace(/"/g, "'").replace(/^{/, "").replace(/}$/, "")}
    };
    ${customJs}
  `;
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/page-query.js
var PAGE_QUERY = `#graphql
  query PageDetails($language: LanguageCode, $handle: String!)
  @inContext(language: $language) {
    page(handle: $handle) {
      id
      title
      body
      seo {
        description
        title
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/product-recommendation-query.js
var PRODUCT_RECOMMEDATION_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query productRecommendations(
    $productHandle: String
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(country: $country, language: $language) {
    productRecommendations(productHandle: $productHandle) {
      ...ProductItem
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/products-query.js
var PRODUCTS_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Products(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    products(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      edges {
        node {
          ...ProductItem
        }
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/shop-query.js
var SHOP_QUERY = `#graphql
  query Shop {
    shop {
      name
      paymentSettings {
        acceptedCardBrands
        cardVaultUrl
        countryCode
        currencyCode
        enabledPresentmentCurrencies
        supportedDigitalWallets
      }
      primaryDomain {
        url
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/collection-query.js
var COLLECTION_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Collection(
    $handle: String!
    $country: CountryCode
    $language: LanguageCode
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    collection(handle: $handle) {
      id
      handle
      title
      description
      image {
        id
        url
        width
        height
        altText
      }
      products(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ProductItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          endCursor
          startCursor
        }
      }
      onlineStoreUrl
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/collection-filter-query.js
var COLLECTION_FILTER_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Collection(
    $handle: String!
    $country: CountryCode
    $language: LanguageCode
    $filters: [ProductFilter!]
    $sortKey: ProductCollectionSortKeys!
    $reverse: Boolean
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    collection(handle: $handle) {
      id
      handle
      title
      description
      image {
        id
        url
        width
        height
        altText
      }
      products(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor,
        filters: $filters,
        sortKey: $sortKey,
        reverse: $reverse
      ) {
        nodes {
          ...ProductItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          endCursor
          startCursor
        }
        filters {
          id
          label
          type
          values {
            id
            label
            count
            input
          }
        }
      }
      seo {
        description
        title
      }
    }
    collections(first: 100) {
      edges {
        node {
          title
          handle
        }
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/graphql/collection-all-query.js
var COLLECTION_ALL_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Products(
    $country: CountryCode
    $language: LanguageCode
    $reverse: Boolean
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
    $sortKey: ProductSortKeys!
  ) @inContext(country: $country, language: $language) {
    products(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor,
      reverse: $reverse,
      sortKey: $sortKey,
    ) {
      nodes {
        ...ProductItem
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
        endCursor
        startCursor
      }
      filters {
        id
        label
        type
        values {
          id
          label
          count
          input
        }
      }
    }
    collections(first: 100) {
      edges {
        node {
          title
          handle
        }
      }
    }
  }
`;

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/shared/setting-default.js
var settings = {
  pageSettings: {
    layout: {
      "container-width": {
        desktop: {
          value: 1300,
          unit: "px"
        },
        tablet: {
          value: 992,
          unit: "px"
        },
        mobile: {
          value: 768,
          unit: "px"
        }
      },
      "spacing-grid-horizontal": {
        desktop: {
          value: 30,
          unit: "px"
        },
        tablet: {
          value: 30,
          unit: "px"
        },
        mobile: {
          value: 20,
          unit: "px"
        }
      },
      "spacing-grid-vertical": {
        desktop: {
          value: 30,
          unit: "px"
        },
        tablet: {
          value: 30,
          unit: "px"
        },
        mobile: {
          value: 20,
          unit: "px"
        }
      }
    },
    customCode: {
      css: "",
      js: ""
    },
    colors: {
      accent: "#123233",
      title: "#121212",
      text: "#474747"
    },
    additionalSettings: {
      isOverrideGlobalSettings: false
    },
    background: {
      "background-type": "standard",
      "background-color": "#ffffff",
      "background-gradient": {
        points: [],
        rotate: 0
      }
    }
  },
  globalSettings: {
    layout: {
      "container-width": {
        desktop: {
          value: 1300,
          unit: "px"
        },
        tablet: {
          value: 991,
          unit: "px"
        },
        mobile: {
          value: 767,
          unit: "px"
        }
      },
      "spacing-grid-horizontal": {
        desktop: {
          value: 30,
          unit: "px"
        },
        tablet: {
          value: 30,
          unit: "px"
        },
        mobile: {
          value: 20,
          unit: "px"
        }
      },
      "spacing-grid-vertical": {
        desktop: {
          value: 30,
          unit: "px"
        },
        tablet: {
          value: 30,
          unit: "px"
        },
        mobile: {
          value: 20,
          unit: "px"
        }
      }
    },
    customCode: {
      css: "",
      js: ""
    },
    colors: {
      accent: "#123233",
      title: "#121212",
      text: "#474747"
    },
    imageLoader: {
      type: "loader-1",
      size: {
        value: 40
      },
      color: "rgba(0, 0, 0, 1)",
      duration: {
        value: 1300,
        unit: "ms"
      },
      backgroundColor: "rgba(0, 0, 0, 0.1)"
    },
    placeholderImage: {
      "tab-type": "product"
    }
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/shared/load-page-data.js
function getURL(pageType, id) {
  const assignId = (id == null ? void 0 : id.replace(/gid:\/\/shopify\/\w*\//g, "")) ?? "";
  switch (pageType) {
    case "home":
      return `${CONFIG.API.URL}${CONFIG.API.HOME}`;
    case "product":
      return `${CONFIG.API.URL}${CONFIG.API.PRODUCT}?assignId=${assignId}`;
    case "collection":
      const param = assignId ? `?assignId=${assignId}` : "";
      return `${CONFIG.API.URL}${CONFIG.API.COLLECTION}${param}`;
    case "article":
      return `${CONFIG.API.URL}${CONFIG.API.ARTICLE}?assignId=${assignId}`;
    case "regular":
      return `${CONFIG.API.URL}${CONFIG.API.PAGE}?assignId=${assignId}`;
    default:
      return CONFIG.dev.baseURL + CONFIG.dev.page;
  }
}
async function readPage({ context }, pageType, dataDefault, id) {
  var _a;
  const url = getURL(pageType, id);
  const { withCache, storefront } = context;
  const cacheKey = [url, `${pageType}-${id}`];
  try {
    const { data, response } = await withCache.fetch(url, {
      method: "GET",
      headers: {
        Authorization: context.env.XO_BUILDER_TOKEN
      }
    }, {
      cacheKey,
      cacheStrategy: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      }),
      shouldCacheResponse: () => true
    });
    if (!(response == null ? void 0 : response.ok)) {
      const error = await response.json();
      throw new Error(error.message);
    }
    const hasData = !!Object.keys((_a = data == null ? void 0 : data.payload) == null ? void 0 : _a.entities).length;
    return hasData ? data == null ? void 0 : data.payload : dataDefault;
  } catch (error) {
    console.error(error == null ? void 0 : error.message);
    return dataDefault;
  }
}
async function getGlobalSettings({ context }) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const { withCache, storefront } = context;
  const globalUrl = `${CONFIG.API.URL}${CONFIG.API.GLOBAL_SETTINGS}`;
  const cacheKey = [globalUrl, CONFIG.API.GLOBAL_SETTINGS];
  try {
    const { data, response } = await withCache.fetch(globalUrl, {
      method: "GET",
      headers: {
        Authorization: context.env.XO_BUILDER_TOKEN
      }
    }, {
      cacheKey,
      cacheStrategy: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      }),
      shouldCacheResponse: () => true
    });
    if (!(response == null ? void 0 : response.ok)) {
      const error = await response.json();
      throw new Error(error.message);
    }
    return (data == null ? void 0 : data.success) ? {
      customCode: (_b = (_a = data == null ? void 0 : data.payload) == null ? void 0 : _a.application) == null ? void 0 : _b.customCode,
      colors: (_e = (_d = (_c = data == null ? void 0 : data.payload) == null ? void 0 : _c.application) == null ? void 0 : _d.page) == null ? void 0 : _e.colors,
      layout: (_h = (_g = (_f = data == null ? void 0 : data.payload) == null ? void 0 : _f.application) == null ? void 0 : _g.page) == null ? void 0 : _h.layout,
      imageLoader: (_k = (_j = (_i = data == null ? void 0 : data.payload) == null ? void 0 : _i.application) == null ? void 0 : _j.page) == null ? void 0 : _k.imageLoader,
      placeholderImage: (_n = (_m = (_l = data == null ? void 0 : data.payload) == null ? void 0 : _l.application) == null ? void 0 : _m.page) == null ? void 0 : _n.placeholderImage
    } : settings.globalSettings;
  } catch (error) {
    console.error(error == null ? void 0 : error.message);
    return settings.globalSettings;
  }
}
async function getPageSettings({ context }, pageId) {
  const { withCache, storefront } = context;
  const pageSettingsUrl = `${CONFIG.API.URL}${CONFIG.API.PAGE_SETTINGS}${pageId}`;
  const cacheKey = [pageSettingsUrl, `${CONFIG.API.PAGE_SETTINGS}-${pageId}`];
  try {
    const { data, response } = await withCache.fetch(pageSettingsUrl, {
      method: "GET",
      headers: {
        Authorization: context.env.XO_BUILDER_TOKEN
      }
    }, {
      cacheKey,
      cacheStrategy: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      }),
      shouldCacheResponse: () => true
    });
    if (!(response == null ? void 0 : response.ok)) {
      const error = await response.json();
      throw new Error(error.message);
    }
    return (data == null ? void 0 : data.success) ? data == null ? void 0 : data.payload : settings.pageSettings;
  } catch (error) {
    console.error(error == null ? void 0 : error.message);
    return settings.pageSettings;
  }
}
async function readSettings(args, pageId) {
  const globalSettings = await getGlobalSettings(args);
  const pageSettings = await getPageSettings(args, pageId);
  return { globalSettings, pageSettings };
}
async function loadSettings({ args, pageId }) {
  const { globalSettings, pageSettings } = await readSettings(args, pageId);
  const globalJs = getGlobalJsSettings(globalSettings ?? {});
  const pageJs = getGlobalJsSettings(pageSettings ?? {});
  const globalCss = getGlobalCssSettings(globalSettings ?? {});
  const pageCss = getGlobalCssSettings(pageSettings ?? {});
  const pageCssJsEnabled = !!pageSettings;
  const css = pageCssJsEnabled ? globalCss + pageCss : globalCss;
  const js = pageCssJsEnabled ? globalJs + pageJs : pageJs;
  return {
    globalSettings,
    pageSettings,
    css,
    js
  };
}
async function getCollection(shopifySettings, { context, request }) {
  const storefront = context.storefront;
  const collectionSettings = filterBy("collection", shopifySettings);
  return Object.fromEntries(await Promise.all(collectionSettings.map((item) => {
    var _a;
    const handle = item.settings[CONFIG.shopifyFieldIds.collection].handle;
    const limit = ((_a = item.settings[CONFIG.shopifyFieldIds.limit]) == null ? void 0 : _a.value) ?? 1;
    const paginationVariables = getPaginationVariables(request, {
      pageBy: limit
    });
    const result = Promise.resolve(storefront.query(COLLECTION_QUERY, {
      variables: {
        handle,
        ...paginationVariables,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => [item.id, resolvedValue.collection]);
    return result;
  })));
}
async function getCollectionDetail({ params, context, request }) {
  const { handle } = params;
  const isCollectionPage = (request.url.includes(`/collections/${handle}`) || decodeURI(request.url).includes(`/collections/${handle}`)) && !!handle;
  const limit = 8;
  if (isCollectionPage) {
    const storefront = context.storefront;
    const locale = storefront.i18n;
    const searchParams = new URL(request.url).searchParams;
    const { sortKey, reverse } = getSortValuesFromParam(searchParams.get("sort"), handle);
    const paginationVariables = getPaginationVariables(request, {
      pageBy: limit
    });
    if (handle !== "all") {
      const filters = [...searchParams.entries()].reduce((filters2, [key, value]) => {
        if (key.startsWith(CONFIG.collectionPage.filterUrlPrefix)) {
          const filterKey = key.substring(CONFIG.collectionPage.filterUrlPrefix.length);
          if (filterKey != "category") {
            filters2.push({
              [filterKey]: JSON.parse(value)
            });
          }
        }
        return filters2;
      }, []);
      const result2 = await Promise.resolve(storefront.query(COLLECTION_FILTER_QUERY, {
        variables: {
          handle,
          ...paginationVariables,
          filters,
          sortKey,
          reverse,
          country: storefront.i18n.country,
          language: storefront.i18n.language
        },
        cache: storefront.CacheCustom({
          mode: "must-revalidate, no-transform",
          maxAge: CONFIG.CACHE_MAX_AGE
        })
      })).then((resolvedValue) => {
        var _a, _b, _c, _d;
        if (resolvedValue && (resolvedValue == null ? void 0 : resolvedValue.collection)) {
          const allFilterValues = (_d = (_c = (_b = (_a = resolvedValue.collection) == null ? void 0 : _a.products) == null ? void 0 : _b.filters) == null ? void 0 : _c.flatMap) == null ? void 0 : _d.call(_c, (filter) => filter.values);
          const appliedFilters = getAppliedFilter(filters, allFilterValues, locale);
          return {
            collection: resolvedValue.collection,
            appliedFilters,
            collections: flattenConnection(resolvedValue.collections)
          };
        }
      });
      return result2;
    }
    const result = Promise.resolve(storefront.query(COLLECTION_ALL_QUERY, {
      variables: {
        ...paginationVariables,
        sortKey,
        reverse,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => {
      const data = {
        collection: {
          id: "",
          handle: "all",
          title: "All",
          descriptionHtml: "All the store products",
          description: "All the store products",
          products: resolvedValue.products
        },
        appliedFilters: [],
        collections: (resolvedValue == null ? void 0 : resolvedValue.collections) ? flattenConnection(resolvedValue == null ? void 0 : resolvedValue.collections) : []
      };
      return data;
    });
    return result;
  }
  return null;
}
async function getCollectionList(shopifySettings, { context, request }) {
  const storefront = context.storefront;
  const collectionListSettings = filterBy("collectionList", shopifySettings);
  return Object.fromEntries(await Promise.all(collectionListSettings.flatMap((item) => {
    var _a;
    const list = item.settings[CONFIG.shopifyFieldIds.collectionList].map((item2) => {
      const id = item2.id.replace("gid://shopify/Collection/", "");
      return `(id:${id})`;
    });
    const limit = (_a = item.settings[CONFIG.shopifyFieldIds.limit]) == null ? void 0 : _a.value;
    const query = hasCollectionListManualSetting(item.settings) ? list.join(" OR ") : "";
    const paginationVariables = getPaginationVariables(request, {
      pageBy: limit
    });
    const result = Promise.resolve(storefront.query(COLLECTIONS_QUERY, {
      variables: {
        ...paginationVariables,
        query,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => [item.id, resolvedValue]);
    return result;
  })));
}
async function getProductRecommendation(shopifySettings, { params, context }) {
  const storefront = context.storefront;
  const { handle: handleParam } = params;
  const productRecommendationSettings = filterBy("productRecommendation", shopifySettings);
  return Object.fromEntries(await Promise.all(productRecommendationSettings.flatMap((item) => {
    const handle = item.settings.$product.handle || handleParam;
    const result = Promise.resolve(storefront.query(PRODUCT_RECOMMEDATION_QUERY, {
      variables: {
        productHandle: handle,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => [item.id, resolvedValue]);
    return result;
  })));
}
async function getProducts(shopifySettings, { context, request }) {
  const storefront = context.storefront;
  const productListSettings = filterBy("productList", shopifySettings);
  return Object.fromEntries(await Promise.all(productListSettings.flatMap((item) => {
    var _a;
    const limit = (_a = item.settings[CONFIG.shopifyFieldIds.limit]) == null ? void 0 : _a.value;
    const paginationVariables = getPaginationVariables(request, {
      pageBy: limit
    });
    const result = Promise.resolve(storefront.query(PRODUCTS_QUERY, {
      variables: {
        ...paginationVariables,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => {
      const data = {
        products: [...resolvedValue.products.edges.map((item2) => item2.node)]
      };
      return [item.id, data];
    });
    return result;
  })));
}
async function getProduct(shopifySettings, { params, context, request }) {
  const { handle: handleParam } = params;
  const storefront = context.storefront;
  const productSettings = filterBy("product", shopifySettings);
  return Object.fromEntries(await Promise.all(productSettings.map((item) => {
    const handle = item.settings[CONFIG.shopifyFieldIds.product].handle || handleParam;
    const result = Promise.resolve(storefront.query(PRODUCT_QUERY, {
      variables: {
        handle,
        selectedOptions: getSelectedProductOptions(request),
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => {
      if (resolvedValue == null ? void 0 : resolvedValue.product) {
        const firstVariant = resolvedValue.product.variants.nodes[0];
        const firstVariantIsDefault = Boolean(firstVariant.selectedOptions.find((option) => option.name === "Title" && option.value === "Default Title"));
        if (firstVariantIsDefault || !resolvedValue.product.selectedVariant) {
          resolvedValue.product.selectedVariant = firstVariant;
        }
        return [item.id, resolvedValue == null ? void 0 : resolvedValue.product];
      }
      return [item.id, resolvedValue];
    });
    return result;
  })));
}
async function getProductDetail({ params, context, request }) {
  const { handle } = params;
  const isProductPage = (request.url.includes(`/products/${handle}`) || decodeURI(request.url).includes(`/products/${handle}`)) && !!handle;
  if (isProductPage) {
    const storefront = context.storefront;
    const result = await Promise.resolve(storefront.query(PRODUCT_QUERY, {
      variables: {
        handle,
        selectedOptions: getSelectedProductOptions(request),
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => {
      return resolvedValue.product;
    });
    return result;
  }
  return null;
}
async function getBlog(shopifySettings, { context, request }) {
  const storefront = context.storefront;
  const blogSettings = filterBy("blog", shopifySettings);
  return Object.fromEntries(await Promise.all(blogSettings.map((item) => {
    var _a;
    const handle = item.settings[CONFIG.shopifyFieldIds.blog].handle;
    const limit = ((_a = item.settings[CONFIG.shopifyFieldIds.limit]) == null ? void 0 : _a.value) ?? 1;
    const paginationVariables = getPaginationVariables(request, {
      pageBy: limit
    });
    const result = Promise.resolve(storefront.query(BLOG_QUERY, {
      variables: {
        blogHandle: handle,
        ...paginationVariables,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => [item.id, resolvedValue]);
    return result;
  })));
}
async function getArticle(shopifySettings, { context }) {
  const storefront = context.storefront;
  const productSettings = filterBy("article", shopifySettings);
  return Object.fromEntries(await Promise.all(productSettings.map((item) => {
    const blogHandle = item.settings[CONFIG.shopifyFieldIds.article].blog_handle;
    const articleHandle = item.settings[CONFIG.shopifyFieldIds.article].handle;
    const result = Promise.resolve(storefront.query(ARTICLE_QUERY, {
      variables: {
        blogHandle,
        articleHandle,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => {
      var _a;
      const data = (_a = resolvedValue == null ? void 0 : resolvedValue.blog) == null ? void 0 : _a.articleByHandle;
      return [item.id, data];
    });
    return result;
  })));
}
async function getArticleDetail({ request, context, params }) {
  const { blogHandle, handle: articleHandle } = params;
  const storefront = context.storefront;
  const isArticlePage = (request.url.includes(`/blogs/${blogHandle}/${articleHandle}`) || decodeURI(request.url).includes(`/blogs/${blogHandle}/${articleHandle}`)) && !!articleHandle && !!blogHandle;
  if (isArticlePage) {
    const result = await Promise.resolve(storefront.query(ARTICLE_QUERY, {
      variables: {
        blogHandle,
        articleHandle,
        country: storefront.i18n.country,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => resolvedValue.blog.articleByHandle);
    return result;
  }
  return null;
}
async function getPage({ request, context, params }) {
  const { handle } = params;
  const storefront = context.storefront;
  const isPage = (request.url.includes(`/pages/${handle}`) || decodeURI(request.url).includes(`/pages/${handle}`)) && !!handle;
  if (isPage) {
    const result = await Promise.resolve(storefront.query(PAGE_QUERY, {
      variables: {
        handle: params.handle,
        language: storefront.i18n.language
      },
      cache: storefront.CacheCustom({
        mode: "must-revalidate, no-transform",
        maxAge: CONFIG.CACHE_MAX_AGE
      })
    })).then((resolvedValue) => resolvedValue.page);
    return result;
  }
  return null;
}
async function getShop({ context }) {
  const storefront = context.storefront;
  const result = await Promise.resolve(storefront.query(SHOP_QUERY, {
    cache: storefront.CacheCustom({
      mode: "must-revalidate, no-transform",
      maxAge: CONFIG.CACHE_MAX_AGE
    })
  })).then((resolvedValue) => {
    return resolvedValue.shop;
  });
  return result;
}
function getAssignId(pageType, productDetail, articleDetail, handle, collectionDetail) {
  switch (pageType) {
    case "product":
      return productDetail == null ? void 0 : productDetail.id;
    case "article":
      return articleDetail == null ? void 0 : articleDetail.id;
    case "collection":
      return collectionDetail == null ? void 0 : collectionDetail.id;
    case "regular":
      return handle;
    default:
      return "";
  }
}
function cleanedObject(obj) {
  const result = Object.entries(obj).reduce((acc, [key, value]) => {
    if (value !== null && value !== void 0 && value !== "") {
      acc[key] = value;
    }
    return acc;
  }, {});
  return result;
}
async function loadPageData({ pageType, args, data }) {
  var _a, _b, _c, _d;
  const { params } = args;
  const { handle } = params;
  const [productDetail, articleDetail, page, collectionDetail] = await Promise.all([
    getProductDetail(args),
    getArticleDetail(args),
    getPage(args),
    getCollectionDetail(args)
  ]);
  const id = getAssignId(pageType, productDetail, articleDetail, handle ?? "", collectionDetail);
  const [contentData] = await Promise.all([readPage(args, pageType, data, id)]);
  const pageId = contentData._id;
  const pageSettings = await loadSettings({ args, pageId });
  const pageData = {
    ...contentData,
    entities: {
      ...contentData.entities
    },
    order: [...contentData.order]
  };
  const seo = {
    title: (_a = pageData == null ? void 0 : pageData.configs) == null ? void 0 : _a.seoTitle,
    titleTemplate: ((_b = pageData == null ? void 0 : pageData.configs) == null ? void 0 : _b.seoTitle) ?? (pageData == null ? void 0 : pageData.label),
    description: (_c = pageData == null ? void 0 : pageData.configs) == null ? void 0 : _c.seoDescription,
    media: (_d = pageData == null ? void 0 : pageData.configs) == null ? void 0 : _d.metaImage
  };
  const metaData = cleanedObject(seo);
  const shopifySettings = getShopifySettings(pageData);
  const [collection, product, collectionList, blog, article, productRecommendation, productList, shop] = await Promise.all([
    getCollection(shopifySettings, args),
    getProduct(shopifySettings, args),
    getCollectionList(shopifySettings, args),
    getBlog(shopifySettings, args),
    getArticle(shopifySettings, args),
    getProductRecommendation(shopifySettings, args),
    getProducts(shopifySettings, args),
    getShop(args)
  ]);
  const fonts = getFonts({ currentElements: pageData.entities });
  const linkFonts = fonts ? fonts.filter((font) => font.fontFamily).map((font) => generateGoogleFontUrl({ family: font.fontFamily, variants: font.variants })) : [];
  const cssContent = getAllStyles(pageData.entities, rootSettingsShort).join("\n") + getCssCode(pageData.entities, rootSettingsShort) + getModifiersCssVariables(pageData.entities, rootSettingsShort).join("\n");
  return {
    pageData,
    cssContent,
    fonts: linkFonts,
    shopifyData: {
      collection,
      product,
      collectionList,
      blog,
      article,
      productRecommendation,
      productList,
      shop,
      productDetail,
      collectionDetail,
      articleDetail,
      page
    },
    metaData,
    ...pageSettings
  };
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/shared/page-meta.js
var pageMeta = (metaData) => {
  const { matches, data } = metaData;
  return [
    { tagName: "link", href: "https://fonts.googleapis.com" },
    { tagName: "link", href: "https://fonts.gstatic.com" },
    // @ts-ignore
    ...Array.from(new Set(data.fonts)).map((font) => ({
      tagName: "link",
      rel: "stylesheet",
      href: font
    })),
    // @ts-ignore
    ...getSeoMeta(matches[0].data.seo, data.seo)
  ];
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/xo-builder.layout.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/dev-elements.js
var devElements = {
  Section,
  Col,
  Grid,
  Heading,
  Icon,
  Image,
  Paragraph,
  Wrapper,
  Hover,
  HoverContent,
  Counter,
  Drr,
  Button,
  Divider,
  ParallaxScroll,
  Callout,
  ExternalVideo,
  FacebookPage,
  Map,
  List,
  ListItem,
  Marquee,
  AnimateHeading,
  SocialLink,
  SocialLinkItem,
  Table,
  HeadingTyping,
  AccodionIcon,
  Accordion,
  AccordionHeader,
  AccordionItem,
  AccordionContent,
  Carousel,
  CarouselContent,
  CarouselSlide,
  CarouselNavigation,
  CarouselNavigationNext,
  CarouselNavigationPrev,
  CarouselPagination,
  Qr,
  HtmlVideo,
  HtmlVideoIcon,
  Countdown,
  CountdownItem,
  CountdownLabel,
  CountdownTime,
  ImageComparison,
  ImageComparisonIcon,
  ImageComparisonLabel,
  Gallery,
  GalleryItem,
  FlipBox,
  FlipBoxFront,
  FlipBoxBack,
  Hero,
  HeroContent,
  HeroSlide,
  Hotspot,
  HotspotContent,
  HotspotItem,
  HotspotTrigger,
  Lightbox,
  LightboxContent,
  LightboxContentHeader,
  LightboxTrigger,
  HoverCursor,
  HoverCursorItem,
  HoverShow,
  HoverShowContent,
  HoverShowImage,
  ParallaxHover,
  Instagram,
  Masonry,
  MasonryItem,
  ProductTitle,
  CollectionTitle,
  ProductList,
  ProductListContent,
  ProductListItem,
  ProductListHoverImage,
  ProductVendor,
  ProductPrice,
  ProductPriceWrapper,
  ProductCompareAtPrice,
  Progress,
  Share,
  ShareItem,
  AddToCartButton,
  CollectionList,
  CollectionListContent,
  CollectionListItem,
  ArticleList,
  ArticleListContent,
  ArticleListItem,
  ArticleTitle,
  Tabs,
  TabsPane,
  Timeline,
  TimelineItem,
  TimelineMarker,
  SaleBadge,
  Shape,
  StarRating,
  PageTitle,
  ProductBadgeNew,
  ProductBadgeSale,
  ProductDescription,
  CollectionImage,
  ArticleDate,
  ArticleContent,
  ArticleAuthor,
  ArticleImage,
  ArticleTags,
  BadgeWrapper,
  CollectionDescription,
  ProductMedia,
  ProductMainMedia,
  ProductMediaList,
  ProductMediaListItem,
  FeaturedProduct,
  DynamicCheckout,
  ProductQuantity,
  ProductQuantityInput,
  ProductQuantityMinus,
  ProductQuantityPlus,
  StockCounter,
  ProductSwatches,
  ProductSwatchesValue,
  ProductSwatchesValueItem,
  ProductVariantsName,
  PaymentMethods,
  PaymentMethodsItem,
  ProductVariantsDropdown,
  ProductVariantsDropdownValue,
  ProductVariantsDropdownValueItem,
  PickupAvailabilities,
  PickupAvailabilitiesModal,
  PaymentMethodsShopItem,
  Breadcrumb,
  CollectionFilter,
  CollectionFilterContent,
  CollectionProducts,
  CollectionProductsContent,
  CollectionProductsItem,
  CollectionFilterVerticalSidebar,
  CollectionFilteringVertical,
  CollectionFilterCount,
  CollectionFilterLayout,
  CollectionFilterHead,
  CollectionFilterFacetsDrawer,
  CollectionFilterFacetsDrawerTrigger,
  CollectionFilterFacetsDrawerModal,
  CollectionFilterRefine,
  CollectionFilterFacetsHorizontal,
  CollectionFilteringDrawer,
  CollectionFilteringHorizontal,
  ShopifyPagination,
  CollectionFilterSorting,
  FeaturedArticle,
  CurrencySelector,
  CustomerForm,
  CustomerFormField,
  CustomerFormInput,
  CustomerFormLabel,
  PageContent
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/mega-menu.js
var MEGA_MENU_FIELD_ID = "megaMenu";
var MegaMenu = ({ elementId, renderContent }) => {
  const { pageData: data } = useAppState();
  const megaMenuElement = data.entities[elementId];
  const megaMenuId = megaMenuElement.settings[MEGA_MENU_FIELD_ID];
  const section = objectValues(data.entities).find((entity) => entity.megaMenuId === megaMenuId);
  if (section) {
    const index = data.order.indexOf(section.id);
    return renderContent(section, index, true);
  }
  return null;
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/xo-builder.layout.js
var XoBuilderLayout = ({ isDev = false, page, customSections = {}, elements, customElementId = "custom", shopifyData, cssContent }) => {
  const finalElements = isDev ? devElements : elements;
  const getElement = (elementId) => {
    const pascalId = elementId.replace(/([-]\w)/g, (g) => g[1].toUpperCase()).replace(/^(\w)/, (g) => g[0].toUpperCase());
    return finalElements[pascalId];
  };
  const hasElement = (id) => {
    return !!getElement(id);
  };
  const renderChildItem = (childId, index) => {
    const child = page.entities[childId];
    if (!child) {
      return null;
    }
    if (child == null ? void 0 : child.hide) {
      return null;
    }
    if (child.type === "element") {
      return (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: renderChild(child, index) }, child.id);
    }
    if (child.type === "wrapper") {
      if (hasElement(child.elementId)) {
        const Component = getElement(child.elementId);
        if (!Component) {
          return null;
        }
        return (0, import_jsx_runtime.jsx)(Component, { element: { ...child, index }, parent: child.parent ? page.entities[child.parent] : null, child: child.children.map((id) => page.entities[id]), ...child.elementId === "mega-menu" ? {
          renderMegaMenu: () => {
            return (0, import_jsx_runtime.jsx)(MegaMenu, { elementId: child.id, renderContent: renderSection });
          }
        } : {}, children: !!child.children && renderChild(child, index) }, child.id);
      }
      return (0, import_jsx_runtime.jsx)("div", { children: !!child.children && renderChild(child, index) }, child.id);
    }
    return null;
  };
  const renderChild = (item, index) => {
    if (item.type === "element") {
      if (hasElement(item.elementId)) {
        const Component = getElement(item.elementId);
        if (!Component) {
          return null;
        }
        return (0, import_jsx_runtime.jsx)(Component, { parent: item.parent ? page.entities[item.parent] : null, element: { ...item, index } }, item.id);
      }
      return null;
    }
    if (item.children.length === 0) {
      return null;
    }
    return item.children.map(renderChildItem);
  };
  const renderSection = (section, index, megaMenu = false) => {
    if ((section == null ? void 0 : section.hide) || !section) {
      return null;
    }
    if ((section == null ? void 0 : section.megaMenu) && !megaMenu) {
      return null;
    }
    if (section.elementId.includes(customElementId)) {
      const content = customSections[section.id];
      if (!content) {
        return null;
      }
      return (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: content }, section.id);
    }
    return (0, import_jsx_runtime.jsx)(Section, { element: { ...section, index }, parent: section.parent ? page.entities[section.parent] : null, child: section.children.map((id) => page.entities[id]), children: renderChild(section, index) }, section.id);
  };
  return (0, import_jsx_runtime.jsxs)(XbBuilderShopifyProvider, { data: { shopifyData, pageData: page }, children: [!!cssContent && (0, import_jsx_runtime.jsx)("style", { dangerouslySetInnerHTML: { __html: cssContent } }), page.order.map((sectionId, index) => {
    const section = page.entities[sectionId];
    return renderSection(section, index);
  })] });
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/xo-builder.root.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hooks/use-links.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/delay/index.js
function delay(ms = 0) {
  return new Promise((resolve) => {
    const timeId = setTimeout(() => {
      const clear = () => clearTimeout(timeId);
      resolve(clear);
    }, ms);
  });
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/is-browser/index.js
function isBrowser() {
  return typeof document !== "undefined";
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hooks/use-links.js
var ANCHOR_SELECTOR = '[xb-href]:not([xb-href^="#"]).xb-link, a[href]:not([href^="#"]).xb-link';
var handlePrefetch = (el) => {
  const href = el.getAttribute("xb-href") || el.getAttribute("href");
  const oldLinkEl = document.head.querySelector(`link[rel="prefetch"][href="${href}"]`);
  const fullHref = (href == null ? void 0 : href.startsWith("/")) ? window.location.origin + href : href;
  if (((href == null ? void 0 : href.startsWith(window.location.origin)) || (href == null ? void 0 : href.startsWith("/"))) && !href.includes("/account") && fullHref !== window.location.href) {
    const linkEl = document.createElement("link");
    linkEl.rel = "prefetch";
    linkEl.as = "fetch";
    linkEl.href = href;
    oldLinkEl == null ? void 0 : oldLinkEl.remove();
    document.head.appendChild(linkEl);
  }
};
function useLinksPrefetch() {
  const location = useLocation();
  (0, import_react3.useEffect)(() => {
    if (isBrowser()) {
      const anchorEls = document.querySelectorAll(ANCHOR_SELECTOR);
      const intersectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(async (entry) => {
          await delay(50);
          if (entry.isIntersecting) {
            const el = entry.target;
            handlePrefetch(el);
            intersectionObserver.unobserve(el);
          }
        });
      }, { threshold: 0.5 });
      anchorEls.forEach((el) => {
        intersectionObserver.observe(el);
      });
      return () => {
        intersectionObserver.disconnect();
      };
    }
  }, [location]);
}
function useLinks() {
  const navigate = useNavigate();
  const handleClick = (event) => {
    const targetEl = event.target;
    const anchorEl = targetEl.closest(ANCHOR_SELECTOR);
    const href = (anchorEl == null ? void 0 : anchorEl.getAttribute("xb-href")) || (anchorEl == null ? void 0 : anchorEl.getAttribute("href"));
    if (href) {
      event.preventDefault();
      const targetAttr = anchorEl.getAttribute("xb-target") || anchorEl.getAttribute("target");
      const isBlank = targetAttr === "_blank" || event.ctrlKey || event.metaKey;
      if (isBlank) {
        window.open(href, "_blank");
      } else if (href.startsWith("http") && !href.startsWith(window.location.origin)) {
        window.location.href = href;
      } else {
        navigate(href);
      }
    }
  };
  (0, import_react3.useEffect)(() => {
    if (isBrowser()) {
      window.addEventListener("click", handleClick);
      return () => {
        window.removeEventListener("click", handleClick);
      };
    }
  }, []);
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/hydrogen/utils/dev-reload.js
async function devReload() {
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/set-animate-observed/index.js
function setAnimateObserved() {
  if (isBrowser()) {
    document.body.setAttribute("xo-animate-observed", Date.now().toString());
  }
}

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/layout/xo-builder.root.js
devReload();
var XoBuilderHead = ({ cssUrls = [], jsUrls = [], nonce, children }) => {
  var _a;
  const matches = useMatches();
  const pageData = (_a = matches == null ? void 0 : matches[(matches == null ? void 0 : matches.length) - 1]) == null ? void 0 : _a.data;
  const cssFromSettings = (pageData == null ? void 0 : pageData.css) ?? "";
  let jsFromSettings = (pageData == null ? void 0 : pageData.js) ?? "";
  return (0, import_jsx_runtime2.jsxs)("head", { children: [Array.from(new Set(cssUrls)).map((url) => {
    return (0, import_jsx_runtime2.jsx)("link", { rel: "stylesheet", href: url }, url);
  }), !!cssFromSettings && (0, import_jsx_runtime2.jsx)("style", { dangerouslySetInnerHTML: { __html: cssFromSettings }, type: "text/css" }), Array.from(new Set(jsUrls)).map((url) => {
    return (0, import_jsx_runtime2.jsx)(Script, { waitForHydration: true, src: url, nonce }, url);
  }), (0, import_jsx_runtime2.jsx)("script", { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: jsFromSettings }, nonce }), children] });
};
var XoBuilderRootPrivate = ({ children }) => {
  const location = useLocation();
  useLinks();
  useLinksPrefetch();
  (0, import_react5.useEffect)(() => {
    setAnimateObserved();
  }, [location]);
  return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children });
};
var XoBuilderRoot = Object.assign(XoBuilderRootPrivate, {
  Head: XoBuilderHead
});

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/index.js
var XoBuilder = {
  Root: XoBuilderRoot,
  Layout: XoBuilderLayout,
  loadPageData,
  pageMeta
};
export {
  XoBuilder
};
//# sourceMappingURL=@xotiny_xb-react-elements.js.map
