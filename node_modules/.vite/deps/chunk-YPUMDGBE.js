import {
  actionAttr,
  visibilityClass
} from "./chunk-RAOCVWQR.js";
import {
  classNames
} from "./chunk-AVF5UQVT.js";
import {
  __publicField
} from "./chunk-DNCPQDPH.js";

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/attribute/index.js
var Attribute = class _Attribute {
  constructor(initial = {}) {
    __publicField(this, "attrs");
    this.attrs = initial;
  }
  static create(initial = {}) {
    return new _Attribute(initial);
  }
  set(attrs) {
    this.attrs = {
      ...this.attrs,
      ...attrs
    };
  }
  get() {
    return this.attrs;
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/animate-attr/index.js
var animateAttr = {
  attribute: (options = {}) => {
    var _a, _b;
    const privateOptions = {
      cascade: true,
      enabled: (options == null ? void 0 : options.animationEnabled) ?? false,
      type: (options == null ? void 0 : options.animationType) ?? "infinite",
      duration: ((_a = options == null ? void 0 : options.animateDuration) == null ? void 0 : _a.value) ?? void 0,
      effect: (options == null ? void 0 : options.animateEffect) ?? void 0,
      infiniteEffect: (options == null ? void 0 : options.animateInfiniteEffect) ?? void 0,
      strength: ((_b = options == null ? void 0 : options.animateStrength) == null ? void 0 : _b.value) ?? void 0,
      ...options
    };
    if (!privateOptions.enabled) {
      return { "xo-animate": "none" };
    }
    if (privateOptions.type === "infinite") {
      if (!privateOptions.enabled) {
        return {};
      }
      return {
        "xo-animate": "infinite",
        "xo-animate-infinite": privateOptions.infiniteEffect
      };
    }
    const result = Attribute.create({ "xo-animate": "scroll" });
    if (privateOptions.cascade) {
      result.set({ "xo-cascade": "true" });
    }
    if (privateOptions.duration) {
      result.set({ "xo-duration": privateOptions.duration });
    }
    if (privateOptions.effect) {
      result.set({ "xo-type": privateOptions.effect });
    }
    if (privateOptions.strength) {
      result.set({ "xo-strength": privateOptions.strength });
    }
    return result.get();
  },
  style: (options = {}) => {
    var _a, _b;
    const privateOptions = {
      cascade: true,
      enabled: (options == null ? void 0 : options.animationEnabled) ?? false,
      type: (options == null ? void 0 : options.animationType) ?? "infinite",
      duration: ((_a = options == null ? void 0 : options.animateDuration) == null ? void 0 : _a.value) ?? void 0,
      effect: (options == null ? void 0 : options.animateEffect) ?? void 0,
      infiniteEffect: (options == null ? void 0 : options.animateInfiniteEffect) ?? void 0,
      strength: ((_b = options == null ? void 0 : options.animateStrength) == null ? void 0 : _b.value) ?? void 0,
      ...options
    };
    if (!privateOptions.enabled) {
      return {};
    }
    if (privateOptions.type === "infinite") {
      return { "--xo-animate-infinite-duration": `${privateOptions.duration}ms` };
    }
    return {};
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/html-attr/index.js
var htmlAttr = {
  attribute: (value) => {
    let attributeResult = "";
    if (value.id) {
      attributeResult += ` id="${value.id}"`;
    }
    if (value.custom && value.custom.length > 0) {
      value.custom.forEach((attr) => {
        if (["class", "id", "style", "text-binding", ""].includes(attr.key))
          return;
        attributeResult += ` ${attr.key}="${attr.value}"`;
      });
    }
    return attributeResult;
  },
  class: (value) => {
    if (value.class) {
      return value.class;
    }
    return "";
  }
};

// node_modules/.pnpm/@xotiny+xb-react-elements@1.1.7_@remix-run+react@2.15.3_react-dom@18.3.1_react@18.3.1__react@_de3647dslfchm23rzktcfpukke/node_modules/@xotiny/xb-react-elements/dist/utils/template-helpers/element-attr/index.js
function elementAttr(element, { classNames: classNames2 = [], style = {}, isCustomElement = false }, elementClassEnabled = true) {
  const { settings = {} } = element;
  const animateAttribute = animateAttr.attribute(settings);
  const animateStyle = animateAttr.style(settings);
  const visibilityClassName = (settings == null ? void 0 : settings.visibilityEnabled) && (settings == null ? void 0 : settings.visibility) ? visibilityClass(settings == null ? void 0 : settings.visibility) : "";
  const actAttr = actionAttr(settings == null ? void 0 : settings.action);
  const attrs = (settings == null ? void 0 : settings.attrsEnabled) && (settings == null ? void 0 : settings.attributes) ? htmlAttr.attribute(settings == null ? void 0 : settings.attributes) : {};
  const attrClassNames = (settings == null ? void 0 : settings.attrsEnabled) && (settings == null ? void 0 : settings.attributes) ? htmlAttr.class(settings == null ? void 0 : settings.attributes) : "";
  const allClasses = classNames(...classNames2, visibilityClassName, attrClassNames, elementClassEnabled ? element.id : "");
  const classAttr = isCustomElement ? { class: allClasses } : { className: allClasses };
  return {
    ...classAttr,
    style: { ...animateStyle, ...Object.fromEntries(Object.entries(style).filter(([_, val]) => val != null && val !== "")) },
    ...animateAttribute,
    ...actAttr,
    ...attrs
  };
}

export {
  elementAttr
};
//# sourceMappingURL=chunk-YPUMDGBE.js.map
